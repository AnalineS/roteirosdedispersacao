#!/usr/bin/env python3
"""
üè• Roteiro de Dispensa√ß√£o para Hansen√≠ase - Hugging Face Spaces
Sistema especializado em orienta√ß√£o farmac√™utica baseado em tese de doutorado.

Autora: Ana - Baseado em tese de doutorado
Plataforma: Hugging Face Spaces com Gradio
"""

import gradio as gr
import os
import sys
import logging
from datetime import datetime
import json
import re
from typing import Dict, List, Tuple, Optional

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Adicionar src ao path para imports
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# Imports do sistema existente
try:
    from src.backend.services.personas import get_personas
    from src.backend.services.dr_gasnelio_enhanced import get_enhanced_dr_gasnelio_prompt, validate_dr_gasnelio_response
    from src.backend.services.ga_enhanced import get_enhanced_ga_prompt, validate_ga_response
    from src.backend.services.scope_detection_system import detect_question_scope, get_limitation_response
    from src.backend.services.knowledge_loader import get_structured_knowledge_base
    logger.info("‚úÖ Todos os m√≥dulos importados com sucesso!")
except ImportError as e:
    logger.error(f"‚ùå Erro ao importar m√≥dulos: {e}")
    # Fallback b√°sico se n√£o conseguir importar
    def get_personas():
        return {
            "dr_gasnelio": {"name": "Dr. Gasnelio", "description": "Farmac√™utico t√©cnico"},
            "ga": {"name": "G√°", "description": "Farmac√™utico emp√°tico"}
        }

# Carregar base de conhecimento
try:
    with open('data/Roteiro de Dsispensa√ß√£o - Hansen√≠ase.md', 'r', encoding='utf-8') as f:
        knowledge_base = f.read()
    logger.info(f"‚úÖ Base de conhecimento carregada: {len(knowledge_base)} caracteres")
except FileNotFoundError:
    logger.warning("‚ö†Ô∏è Arquivo de conhecimento n√£o encontrado, usando conte√∫do b√°sico")
    knowledge_base = """
    # Roteiro de Dispensa√ß√£o para Hansen√≠ase
    
    ## PQT-U (Poliquimioterapia √önica)
    - Rifampicina: 600mg uma vez por m√™s
    - Dapsona: 100mg diariamente  
    - Clofazimina: 300mg uma vez por m√™s + 50mg diariamente
    
    ## Efeitos Adversos Comuns
    - Rifampicina: colora√ß√£o avermelhada na urina
    - Dapsona: anemia, metahemoglobinemia
    - Clofazimina: hiperpigmenta√ß√£o da pele
    """

# Personas dispon√≠veis
PERSONAS = get_personas()

def format_response_for_gradio(response: str, persona: str, confidence: float = 0.8) -> str:
    """Formata resposta para exibi√ß√£o no Gradio"""
    
    timestamp = datetime.now().strftime("%H:%M:%S")
    
    if persona == "dr_gasnelio":
        header = f"""
## üë®‚Äç‚öïÔ∏è Dr. Gasnelio - Farmac√™utico Cl√≠nico
*Resposta t√©cnica especializada ‚Ä¢ {timestamp}*

---
"""
        footer = f"""
---
**Confian√ßa:** {confidence:.1%} | **Fonte:** Tese de doutorado sobre dispensa√ß√£o farmac√™utica
        """
        
    elif persona == "ga":
        header = f"""
## üíô G√° - Farmac√™utico Emp√°tico  
*Explica√ß√£o acolhedora e did√°tica ‚Ä¢ {timestamp}*

---
"""
        footer = f"""
---
**üí° Dica:** Sempre consulte seu farmac√™utico para orienta√ß√µes personalizadas!
        """
    else:
        header = f"## Assistente Farmac√™utico ‚Ä¢ {timestamp}\n\n"
        footer = ""
    
    return f"{header}\n{response}\n\n{footer}"

def generate_response(question: str, persona: str) -> str:
    """Gera resposta usando o sistema de IA existente"""
    
    if not question.strip():
        return "‚ùì Por favor, digite uma pergunta sobre hansen√≠ase ou dispensa√ß√£o de medicamentos."
    
    try:
        # Detectar escopo da pergunta
        scope_analysis = detect_question_scope(question)
        
        if not scope_analysis.get('is_in_scope', True):
            limitation_response = get_limitation_response(persona, question)
            if limitation_response:
                return format_response_for_gradio(limitation_response, persona, 0.9)
        
        # Buscar contexto relevante na base de conhecimento
        context = find_relevant_context(question, knowledge_base)
        
        # Gerar resposta baseada na persona
        if persona == "dr_gasnelio":
            prompt = get_enhanced_dr_gasnelio_prompt(question)
            response = generate_dr_gasnelio_response(question, context, prompt)
            
        elif persona == "ga":
            prompt = get_enhanced_ga_prompt(question)
            response = generate_ga_response(question, context, prompt)
            
        else:
            response = generate_generic_response(question, context)
        
        # Validar qualidade da resposta
        confidence = validate_response_quality(response, question, persona)
        
        return format_response_for_gradio(response, persona, confidence)
        
    except Exception as e:
        logger.error(f"Erro ao gerar resposta: {e}")
        error_msg = f"Desculpe, ocorreu um erro t√©cnico. Erro: {str(e)[:100]}..."
        return format_response_for_gradio(error_msg, persona, 0.0)

def find_relevant_context(question: str, text: str, max_length: int = 2000) -> str:
    """Encontra contexto relevante na base de conhecimento"""
    
    # Palavras-chave da pergunta
    question_words = set(re.findall(r'\w+', question.lower()))
    
    # Dividir texto em par√°grafos
    paragraphs = text.split('\n\n')
    
    relevant_paragraphs = []
    
    for paragraph in paragraphs:
        if len(paragraph.strip()) < 50:
            continue
            
        paragraph_words = set(re.findall(r'\w+', paragraph.lower()))
        common_words = question_words.intersection(paragraph_words)
        
        if len(common_words) > 0:
            score = len(common_words) / len(question_words) if question_words else 0
            relevant_paragraphs.append((paragraph, score))
    
    # Ordenar por relev√¢ncia
    relevant_paragraphs.sort(key=lambda x: x[1], reverse=True)
    
    # Construir contexto
    context = ""
    for paragraph, score in relevant_paragraphs[:3]:
        context += paragraph + "\n\n"
        if len(context) > max_length:
            break
    
    return context[:max_length] if context else text[:max_length]

def generate_dr_gasnelio_response(question: str, context: str, prompt: str) -> str:
    """Gera resposta do Dr. Gasnelio (t√©cnica)"""
    
    # Template para resposta t√©cnica
    template = f"""
Como farmac√™utico cl√≠nico especialista em hansen√≠ase, baseando-me na tese sobre roteiro de dispensa√ß√£o e no contexto fornecido:

**PERGUNTA:** {question}

**CONTEXTO DA TESE:**
{context}

**RESPOSTA T√âCNICA:**

Com base nos protocolos estabelecidos na tese sobre roteiro de dispensa√ß√£o para hansen√≠ase:

{generate_technical_content(question, context)}

**RECOMENDA√á√ïES FARMAC√äUTICAS:**
- Sempre verificar intera√ß√µes medicamentosas
- Monitorar eventos adversos espec√≠ficos
- Orientar sobre ades√£o ao tratamento PQT-U
- Registrar adequadamente a dispensa√ß√£o

**REFER√äNCIA:** Baseado na tese de doutorado sobre roteiro de dispensa√ß√£o farmac√™utica para hansen√≠ase.
    """
    
    return template.strip()

def generate_ga_response(question: str, context: str, prompt: str) -> str:
    """Gera resposta do G√° (emp√°tica)"""
    
    template = f"""
Oi! Fico feliz em ajudar voc√™ com sua d√∫vida sobre hansen√≠ase! üòä

**Sua pergunta:** {question}

{generate_empathetic_content(question, context)}

üíô **Lembre-se:** O tratamento da hansen√≠ase √© muito eficaz quando seguido corretamente. Voc√™ n√£o est√° sozinho(a) nesta jornada!

üè• **Dica importante:** Sempre mantenha contato com sua equipe de sa√∫de e n√£o hesite em tirar d√∫vidas. Estamos aqui para apoiar voc√™!

‚ú® Se precisar de mais alguma coisa, √© s√≥ perguntar!
    """
    
    return template.strip()

def generate_technical_content(question: str, context: str) -> str:
    """Gera conte√∫do t√©cnico baseado na pergunta"""
    
    question_lower = question.lower()
    
    if any(term in question_lower for term in ['dose', 'dosagem', 'quanto']):
        return """
**DOSAGENS PADR√ÉO PQT-U:**
- Rifampicina: 600mg (2 c√°psulas de 300mg) - dose supervisionada mensal
- Dapsona: 100mg (1 comprimido) - dose di√°ria autoadministrada  
- Clofazimina: 300mg (3 c√°psulas de 100mg) mensal + 50mg di√°rio

**AJUSTES PEDI√ÅTRICOS:** Calcular por peso corporal conforme protocolo ministerial.
        """
        
    elif any(term in question_lower for term in ['efeito', 'adverso', 'colateral']):
        return """
**PRINCIPAIS EVENTOS ADVERSOS:**
- Rifampicina: Colora√ß√£o alaranjada de urina/suor, hepatotoxicidade rara
- Dapsona: Anemia hemol√≠tica, metahemoglobinemia, s√≠ndrome de hipersensibilidade
- Clofazimina: Hiperpigmenta√ß√£o cut√¢nea (revers√≠vel), sintomas gastrointestinais

**MONITORIZA√á√ÉO:** Hemograma, fun√ß√£o hep√°tica, sinais de intoler√¢ncia.
        """
        
    elif any(term in question_lower for term in ['dispensa√ß√£o', 'dispensar']):
        return """
**ROTEIRO DE DISPENSA√á√ÉO:**
1. Conferir prescri√ß√£o e identifica√ß√£o do paciente
2. Verificar hist√≥rico de dispensa√ß√µes anteriores
3. Orientar sobre modo de uso e hor√°rios
4. Alertar sobre eventos adversos poss√≠veis
5. Refor√ßar import√¢ncia da ades√£o
6. Agendar pr√≥xima dispensa√ß√£o
7. Documentar adequadamente

**PONTOS CR√çTICOS:** Verificar se √© primeira dispensa√ß√£o, avaliar compreens√£o do paciente.
        """
    else:
        return f"Com base no contexto da tese e na literatura cient√≠fica, orienta√ß√µes espec√≠ficas sobre: {question}"

def generate_empathetic_content(question: str, context: str) -> str:
    """Gera conte√∫do emp√°tico baseado na pergunta"""
    
    question_lower = question.lower()
    
    if any(term in question_lower for term in ['medo', 'receio', 'preocup', 'nervos']):
        return """
Entendo perfeitamente sua preocupa√ß√£o! √â muito normal sentir isso quando estamos come√ßando um tratamento novo. üíô

A hansen√≠ase tem cura total quando o tratamento √© seguido corretinho, e voc√™ est√° no caminho certo! Os medicamentos s√£o seguros e eficazes.

Muitas pessoas j√° passaram por isso e hoje est√£o curadas e levando vidas normais. Voc√™ tamb√©m vai conseguir!
        """
        
    elif any(term in question_lower for term in ['como', 'quando', 'tomar']):
        return """
Vou explicar de um jeito bem simples como tomar os rem√©dios! 

üìÖ **Uma vez por m√™s (no mesmo dia):** Voc√™ vai na farm√°cia/posto e toma l√° mesmo os comprimidos amarelos (clofazimina) e a c√°psula vermelha (rifampicina).

üè† **Todo dia em casa:** Voc√™ toma 1 comprimido branco (dapsona) sempre no mesmo hor√°rio.

üí° **Dica:** Use um calend√°rio para marcar os dias! Assim fica mais f√°cil lembrar.
        """
        
    elif any(term in question_lower for term in ['efeito', 'normal', 'acontece']):
        return """
√â super importante voc√™ saber o que pode acontecer para n√£o se assustar! 

üü° **Xixi laranjado:** Por causa da rifampicina, √© normal√≠ssimo! N√£o se preocupe.

ü§é **Pele mais escura:** A clofazimina pode escurecer um pouquinho a pele, mas volta ao normal depois.

Se sentir qualquer coisa diferente, procure logo sua equipe de sa√∫de. Eles est√£o l√° para cuidar de voc√™!
        """
    else:
        return f"Sobre sua d√∫vida '{question}', posso te ajudar com uma explica√ß√£o bem clara e tranquilizadora! üòä"

def generate_generic_response(question: str, context: str) -> str:
    """Gera resposta gen√©rica"""
    return f"Baseado na tese sobre roteiro de dispensa√ß√£o para hansen√≠ase, posso orientar sobre: {question}\n\nContexto relevante:\n{context[:500]}..."

def validate_response_quality(response: str, question: str, persona: str) -> float:
    """Valida qualidade da resposta"""
    
    quality_score = 0.7  # Base
    
    # Verificar se tem conte√∫do substancial
    if len(response) > 100:
        quality_score += 0.1
        
    # Verificar se menciona conceitos relevantes
    relevant_terms = ['hansen√≠ase', 'pqt', 'rifampicina', 'dapsona', 'clofazimina', 'dispensa√ß√£o']
    if any(term in response.lower() for term in relevant_terms):
        quality_score += 0.1
        
    # Verificar formata√ß√£o adequada para persona
    if persona == "dr_gasnelio" and any(term in response.lower() for term in ['protocolo', 't√©cnic', 'farmac']):
        quality_score += 0.1
    elif persona == "ga" and any(term in response.lower() for term in ['üòä', 'üíô', 'fica tranquil', 'n√£o se preocupe']):
        quality_score += 0.1
    
    return min(quality_score, 1.0)

def create_interface() -> gr.Interface:
    """Cria interface Gradio"""
    
    with gr.Blocks(
        title="üè• Roteiro de Dispensa√ß√£o - Hansen√≠ase",
        theme=gr.themes.Soft(),
        css="""
        .gradio-container {
            max-width: 900px !important;
            margin: auto !important;
        }
        .main-header {
            text-align: center;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            border-radius: 15px;
            margin-bottom: 2rem;
        }
        .persona-card {
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            padding: 1rem;
            margin: 0.5rem;
        }
        .warning-box {
            background-color: #fef3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
        }
        """
    ) as interface:
        
        # Header
        gr.HTML("""
        <div class="main-header">
            <h1>üè• Roteiro de Dispensa√ß√£o para Hansen√≠ase</h1>
            <p>Sistema especializado em orienta√ß√£o farmac√™utica baseado em tese de doutorado</p>
        </div>
        """)
        
        # Aviso importante
        gr.HTML("""
        <div class="warning-box">
            <h3>‚ö†Ô∏è Importante</h3>
            <p>Este sistema √© uma ferramenta de apoio educacional e n√£o substitui consulta m√©dica especializada, 
            avalia√ß√£o cl√≠nica individualizada ou julgamento profissional qualificado.</p>
        </div>
        """)
        
        with gr.Row():
            with gr.Column(scale=1):
                # Sele√ß√£o de persona
                gr.HTML("<h3>üë• Escolha sua Persona</h3>")
                
                persona_radio = gr.Radio(
                    choices=[
                        ("üë®‚Äç‚öïÔ∏è Dr. Gasnelio - Farmac√™utico T√©cnico", "dr_gasnelio"),
                        ("üíô G√° - Farmac√™utico Emp√°tico", "ga")
                    ],
                    value="dr_gasnelio",
                    label="Persona",
                    info="Dr. Gasnelio: respostas t√©cnicas detalhadas | G√°: explica√ß√µes simples e acolhedoras"
                )
                
                # Informa√ß√µes das personas
                gr.HTML("""
                <div class="persona-card">
                    <h4>üë®‚Äç‚öïÔ∏è Dr. Gasnelio</h4>
                    <ul>
                        <li>Respostas t√©cnicas detalhadas</li>
                        <li>Protocolos farmacol√≥gicos</li>
                        <li>Para profissionais de sa√∫de</li>
                    </ul>
                </div>
                
                <div class="persona-card">
                    <h4>üíô G√°</h4>
                    <ul>
                        <li>Linguagem simples e clara</li>
                        <li>Apoio emocional</li>
                        <li>Para pacientes e familiares</li>
                    </ul>
                </div>
                """)
            
            with gr.Column(scale=2):
                # Chat interface
                gr.HTML("<h3>üí¨ Fa√ßa sua Pergunta</h3>")
                
                question_input = gr.Textbox(
                    label="Sua pergunta sobre hansen√≠ase ou dispensa√ß√£o",
                    placeholder="Ex: Qual a dose de rifampicina para adultos? Como explicar os efeitos adversos?",
                    lines=3,
                    max_lines=5
                )
                
                submit_btn = gr.Button("üöÄ Obter Orienta√ß√£o", variant="primary", size="lg")
                
                response_output = gr.Markdown(
                    label="Resposta do Especialista",
                    height=400,
                    value="üëã Ol√°! Selecione uma persona e fa√ßa sua pergunta sobre hansen√≠ase ou dispensa√ß√£o farmac√™utica."
                )
                
                # Bot√µes de exemplo
                gr.HTML("<h4>üí° Exemplos de Perguntas</h4>")
                
                examples = [
                    "Qual a dose supervisionada de rifampicina?",
                    "Como explicar os efeitos adversos da clofazimina?",
                    "O que fazer se o paciente esquecer uma dose?",
                    "Quais cuidados especiais para crian√ßas?",
                    "Como monitorar eventos adversos?"
                ]
                
                for example in examples:
                    example_btn = gr.Button(f"üìù {example}", variant="secondary", size="sm")
                    example_btn.click(
                        fn=lambda x=example: x,
                        outputs=question_input
                    )
        
        # Fun√ß√£o de submit
        submit_btn.click(
            fn=generate_response,
            inputs=[question_input, persona_radio],
            outputs=response_output
        )
        
        # Enter key submit
        question_input.submit(
            fn=generate_response,
            inputs=[question_input, persona_radio],
            outputs=response_output
        )
        
        # Footer
        gr.HTML("""
        <div style="text-align: center; margin-top: 2rem; padding: 1rem; border-top: 1px solid #e2e8f0;">
            <p><strong>üìö Baseado em:</strong> Tese de doutorado sobre roteiro de dispensa√ß√£o farmac√™utica para hansen√≠ase</p>
            <p><strong>üéØ Protocolos:</strong> PCDT Hansen√≠ase 2022 - Minist√©rio da Sa√∫de</p>
            <p><em>Desenvolvido para apoiar profissionais de sa√∫de na dispensa√ß√£o segura e eficaz.</em></p>
        </div>
        """)
    
    return interface

def main():
    """Fun√ß√£o principal"""
    
    logger.info("üöÄ Iniciando Roteiro de Dispensa√ß√£o - Hansen√≠ase")
    logger.info(f"üìö Base de conhecimento: {len(knowledge_base)} caracteres")
    logger.info(f"üë• Personas dispon√≠veis: {list(PERSONAS.keys())}")
    
    # Criar e lan√ßar interface
    interface = create_interface()
    
    # Configurar launch
    launch_config = {
        "server_name": "0.0.0.0",
        "server_port": 7860,
        "share": False,
        "show_error": True,
        "quiet": False,
        "show_tips": True,
        "enable_queue": True,
        "max_threads": 10
    }
    
    logger.info("üåê Lan√ßando interface Gradio...")
    interface.launch(**launch_config)

if __name__ == "__main__":
    main()