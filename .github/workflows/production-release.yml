name: 🚀 Production Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - hotfix
      source_branch:
        description: 'Source branch'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - hml
          - dependabot-updates
      skip_tests:
        description: 'Skip quality checks (emergency only)'
        required: false
        default: false
        type: boolean
      create_backup:
        description: 'Create backup before deployment'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  pre-release-checks:
    name: 🔍 Pre-Release Checks
    runs-on: ubuntu-latest
    outputs:
      can-proceed: ${{ steps.checks.outputs.can_proceed }}
      current-production-tag: ${{ steps.version.outputs.current_tag }}
      next-version: ${{ steps.version.outputs.next_version }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.source_branch }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Version Analysis
        id: version
        run: |
          # Get current production tag
          CURRENT_TAG=$(git tag -l "v*" | grep -v "hml-v" | grep -v "dev-v" | grep -v "deps-" | sort -V | tail -n1)
          echo "current_tag=${CURRENT_TAG:-v0.0.0}" >> $GITHUB_OUTPUT
          
          # Calculate next version
          if [ -z "$CURRENT_TAG" ]; then
            NEXT_VERSION="1.0.0"
          else
            VERSION=$(echo $CURRENT_TAG | sed 's/v//')
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)
            PATCH=$(echo $VERSION | cut -d. -f3)
            
            case "${{ github.event.inputs.release_type }}" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch|hotfix)
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEXT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "📊 Version Analysis:"
          echo "  Current: ${CURRENT_TAG:-none}"
          echo "  Next: v$NEXT_VERSION"
          echo "  Type: ${{ github.event.inputs.release_type }}"

      - name: 🔍 Environment Checks
        id: checks
        run: |
          CAN_PROCEED=true
          WARNINGS=()
          
          # Check if source branch is up to date
          if [ "${{ github.event.inputs.source_branch }}" == "main" ]; then
            git fetch origin hml
            BEHIND_HML=$(git rev-list --count HEAD..origin/hml)
            if [ $BEHIND_HML -gt 0 ]; then
              WARNINGS+=("⚠️ Main branch is $BEHIND_HML commits behind HML")
            fi
          fi
          
          # Check for pending PRs
          PENDING_PRS=$(gh pr list --base main --state open --json number,title --jq length)
          if [ $PENDING_PRS -gt 0 ]; then
            WARNINGS+=("⚠️ $PENDING_PRS open PRs targeting main branch")
          fi
          
          # Check workflow runs
          FAILED_WORKFLOWS=$(gh run list --branch ${{ github.event.inputs.source_branch }} --status failure --limit 5 --json status --jq length)
          if [ $FAILED_WORKFLOWS -gt 0 ] && [ "${{ github.event.inputs.skip_tests }}" != "true" ]; then
            WARNINGS+=("❌ $FAILED_WORKFLOWS recent workflow failures")
            CAN_PROCEED=false
          fi
          
          echo "can_proceed=$CAN_PROCEED" >> $GITHUB_OUTPUT
          
          if [ ${#WARNINGS[@]} -gt 0 ]; then
            echo "🚨 Pre-release warnings:"
            printf '%s\n' "${WARNINGS[@]}"
          else
            echo "✅ All pre-release checks passed"
          fi

      - name: 📋 Create Pre-Release Summary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create issue to track release
          gh issue create \
            --title "🚀 Production Release v${{ steps.version.outputs.next_version }} - Tracking" \
            --body "## 🚀 Production Release Tracking

**Release Version:** v${{ steps.version.outputs.next_version }}
**Release Type:** ${{ github.event.inputs.release_type }}
**Source Branch:** ${{ github.event.inputs.source_branch }}
**Requested by:** ${{ github.actor }}

### 📋 Pre-Release Analysis
- **Current Production:** ${{ steps.version.outputs.current_tag }}
- **Next Version:** v${{ steps.version.outputs.next_version }}
- **Can Proceed:** ${{ steps.checks.outputs.can_proceed }}

### 🔄 Release Pipeline
- [ ] Pre-release checks completed
- [ ] Quality gates passed  
- [ ] Production backup created
- [ ] Release tag created
- [ ] Backend deployed to production
- [ ] Frontend deployed to production
- [ ] Post-deployment verification
- [ ] Monitoring confirmed

### 🔗 Links
- **Workflow:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
- **Source Branch:** ${{ github.event.inputs.source_branch }}

---
*This issue will be automatically updated during the release process*" \
            --label "release,production,tracking"

  quality-gates:
    name: 🛡️ Production Quality Gates
    runs-on: ubuntu-latest
    needs: pre-release-checks
    if: needs.pre-release-checks.outputs.can-proceed == 'true' || github.event.inputs.skip_tests == 'true'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.source_branch }}

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/frontend-nextjs/package-lock.json

      - name: 🧪 Backend Quality Gates
        if: github.event.inputs.skip_tests != 'true'
        run: |
          cd apps/backend
          pip install -r requirements.txt
          pip install pytest flake8 mypy
          
          echo "🔍 Running linting..."
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics
          
          echo "🧪 Running tests..."
          python -m pytest --tb=short -v
          
          echo "✅ Backend quality gates passed"

      - name: 🧪 Frontend Quality Gates
        if: github.event.inputs.skip_tests != 'true'
        run: |
          cd apps/frontend-nextjs
          npm ci
          
          echo "🔍 Running linting..."
          npm run lint
          
          echo "🔍 Running type checking..."
          npm run type-check
          
          echo "🧪 Running tests..."
          npm run test -- --passWithNoTests
          
          echo "🏗️ Testing build..."
          npm run build
          
          echo "✅ Frontend quality gates passed"

      - name: 🔒 Security Checks
        if: github.event.inputs.skip_tests != 'true'
        run: |
          echo "🔍 Security audit for backend..."
          cd apps/backend
          pip install safety bandit
          safety check || echo "⚠️ Security warnings found"
          bandit -r . -f json || echo "⚠️ Security issues found"
          
          echo "🔍 Security audit for frontend..."
          cd ../frontend-nextjs
          npm audit --audit-level=moderate || echo "⚠️ Security vulnerabilities found"
          
          echo "✅ Security checks completed"

  create-backup:
    name: 💾 Create Production Backup
    runs-on: ubuntu-latest
    needs: [pre-release-checks, quality-gates]
    if: github.event.inputs.create_backup == 'true' && (needs.quality-gates.result == 'success' || needs.quality-gates.result == 'skipped')
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 💾 Create Backup Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create backup tag from current main
          git checkout main
          
          BACKUP_TAG="backup-$(date +%Y%m%d-%H%M%S)"
          
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$BACKUP_TAG" -m "Production backup before release v${{ needs.pre-release-checks.outputs.next-version }}

Created: $(date)
Previous version: ${{ needs.pre-release-checks.outputs.current-production-tag }}
Next version: v${{ needs.pre-release-checks.outputs.next-version }}
Source: ${{ github.event.inputs.source_branch }}
Backup commit: $(git rev-parse HEAD)"
          
          git push origin "$BACKUP_TAG"
          
          echo "✅ Created backup tag: $BACKUP_TAG"

  create-release:
    name: 🏷️ Create Production Release
    runs-on: ubuntu-latest
    needs: [pre-release-checks, quality-gates, create-backup]
    if: always() && (needs.quality-gates.result == 'success' || needs.quality-gates.result == 'skipped') && needs.pre-release-checks.outputs.can-proceed == 'true'
    
    outputs:
      release-tag: ${{ steps.release.outputs.tag }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔄 Merge to Main (if needed)
        if: github.event.inputs.source_branch != 'main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git checkout main
          git merge origin/${{ github.event.inputs.source_branch }} --no-ff -m "chore: merge ${{ github.event.inputs.source_branch }} for production release v${{ needs.pre-release-checks.outputs.next-version }}"
          
          git push origin main
          
          echo "✅ Merged ${{ github.event.inputs.source_branch }} to main"

      - name: 🏷️ Create Release Tag
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git checkout main
          
          RELEASE_TAG="v${{ needs.pre-release-checks.outputs.next-version }}"
          
          # Generate changelog
          if [ "${{ needs.pre-release-checks.outputs.current-production-tag }}" != "v0.0.0" ]; then
            CHANGELOG=$(git log ${{ needs.pre-release-checks.outputs.current-production-tag }}..HEAD --pretty=format:"- %s" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --no-merges -20)
          fi
          
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$RELEASE_TAG" -m "Production Release $RELEASE_TAG

Release Type: ${{ github.event.inputs.release_type }}
Source Branch: ${{ github.event.inputs.source_branch }}
Released by: ${{ github.actor }}

Changelog:
$CHANGELOG"
          
          git push origin "$RELEASE_TAG"
          
          echo "tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "✅ Created release tag: $RELEASE_TAG"

      - name: 🚀 Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TAG="v${{ needs.pre-release-checks.outputs.next-version }}"
          
          # Generate release notes
          if [ "${{ needs.pre-release-checks.outputs.current-production-tag }}" != "v0.0.0" ]; then
            CHANGES=$(git log ${{ needs.pre-release-checks.outputs.current-production-tag }}..HEAD --pretty=format:"- %s" --no-merges)
          else
            CHANGES="- Initial release"
          fi
          
          cat > release_notes.md << EOF
# 🚀 Production Release $RELEASE_TAG

## 📋 Release Information
- **Type:** ${{ github.event.inputs.release_type }}
- **Source:** ${{ github.event.inputs.source_branch }}
- **Released by:** ${{ github.actor }}
- **Previous version:** ${{ needs.pre-release-checks.outputs.current-production-tag }}

## 📝 Changes
$CHANGES

## 🧪 Quality Assurance
- **Tests:** $([ "${{ github.event.inputs.skip_tests }}" = "true" ] && echo "Skipped (Emergency)" || echo "✅ Passed")
- **Security:** $([ "${{ github.event.inputs.skip_tests }}" = "true" ] && echo "Skipped (Emergency)" || echo "✅ Audited")
- **Backup:** $([ "${{ github.event.inputs.create_backup }}" = "true" ] && echo "✅ Created" || echo "Skipped")

## 🚀 Deployment
This release triggers automatic deployment to production environment:
- **Backend:** Google Cloud Run
- **Frontend:** Firebase Hosting

## 📊 Monitoring
- Post-deployment health checks will be performed
- Monitoring dashboards updated automatically
- Rollback procedures available if needed

---
*This is an official production release*
EOF
          
          gh release create "$RELEASE_TAG" \
            --title "🚀 Production Release $RELEASE_TAG" \
            --notes-file release_notes.md \
            --target main

  post-release:
    name: 📢 Post-Release Actions
    runs-on: ubuntu-latest
    needs: [pre-release-checks, create-release]
    if: success()
    
    steps:
      - name: 📢 Update Tracking Issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Find the tracking issue
          ISSUE_NUMBER=$(gh issue list --label "release,production,tracking" --state open --json number --jq '.[0].number')
          
          if [ "$ISSUE_NUMBER" != "null" ] && [ -n "$ISSUE_NUMBER" ]; then
            gh issue comment $ISSUE_NUMBER --body "## ✅ Release Created Successfully

**Release Tag:** ${{ needs.create-release.outputs.release-tag }}
**Status:** Release tag created and GitHub release published
**Next:** Automatic deployment to production will begin

### 🔄 Deployment Pipeline Status
The main pipeline will now deploy this release to production. Monitor:
- Backend deployment to Cloud Run
- Frontend deployment to Firebase
- Health checks and verification

**Deployment tracking:** This issue will be updated when deployment completes."
          fi

      - name: 📊 Create Deployment Notification
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🎉 Production release ${{ needs.create-release.outputs.release-tag }} created successfully!"
          echo "🚀 Automatic deployment to production is now triggered"
          echo "📊 Monitor the main pipeline for deployment status"