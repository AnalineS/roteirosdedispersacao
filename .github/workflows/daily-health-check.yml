name: "🏥 Daily Health Check"

on:
  schedule:
    # Run daily at 6 AM UTC (2 AM local)
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'both'
        type: choice
        options:
          - 'staging'
          - 'production'
          - 'both'
      deep_check:
        description: 'Run deep health analysis'
        type: boolean
        default: false

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  issues: write
  actions: read

jobs:
  # ============================================================================
  # SYSTEM HEALTH VALIDATION
  # ============================================================================
  system-health:
    name: "🔍 System Health Check"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      staging-status: ${{ steps.health-check.outputs.staging-status }}
      production-status: ${{ steps.health-check.outputs.production-status }}
      health-score: ${{ steps.health-check.outputs.health-score }}
    steps:
      - uses: actions/checkout@v4

      - name: "🔑 Google Cloud Auth"
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: "⚡ Setup Cloud SDK"
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: "🏥 Comprehensive Health Check"
        id: health-check
        run: |
          echo "🔍 Starting comprehensive health check..."

          STAGING_STATUS="unknown"
          PRODUCTION_STATUS="unknown"
          HEALTH_SCORE=0
          TOTAL_CHECKS=0

          # Function to test endpoint health
          test_endpoint() {
              local url=$1
              local service_name=$2
              local timeout=${3:-10}

              echo "🔍 Testing $service_name: $url"

              # Basic connectivity
              if curl -f -s --max-time $timeout "$url" > /dev/null; then
                  echo "✅ $service_name: Basic connectivity OK"
                  return 0
              else
                  echo "❌ $service_name: Basic connectivity FAILED"
                  return 1
              fi
          }

          # Function to test API endpoint
          test_api_endpoint() {
              local url=$1
              local service_name=$2

              echo "🔍 Testing API $service_name: $url"

              # Test API health
              if curl -f -s "$url/health" | jq -e '.status == "healthy"' > /dev/null 2>&1; then
                  echo "✅ $service_name API: Health endpoint OK"
                  return 0
              else
                  echo "❌ $service_name API: Health endpoint FAILED"
                  return 1
              fi
          }

          # Test staging environment
          if [[ "${{ github.event.inputs.environment }}" == "staging" || "${{ github.event.inputs.environment }}" == "both" || -z "${{ github.event.inputs.environment }}" ]]; then
              echo "🧪 === STAGING HEALTH CHECK ==="

              # Get staging URLs
              STAGING_FRONTEND_URL=$(gcloud run services describe hml-roteiro-dispensacao-frontend --region=${{ vars.GCP_REGION }} --format='value(status.url)' 2>/dev/null || echo "")
              STAGING_BACKEND_URL=$(gcloud run services describe hml-roteiro-dispensacao-backend --region=${{ vars.GCP_REGION }} --format='value(status.url)' 2>/dev/null || echo "")

              STAGING_CHECKS_PASSED=0
              STAGING_TOTAL_CHECKS=0

              # Frontend staging test
              if [[ -n "$STAGING_FRONTEND_URL" ]]; then
                  STAGING_TOTAL_CHECKS=$((STAGING_TOTAL_CHECKS + 1))
                  if test_endpoint "$STAGING_FRONTEND_URL" "Staging Frontend"; then
                      STAGING_CHECKS_PASSED=$((STAGING_CHECKS_PASSED + 1))
                  fi
              fi

              # Backend staging test
              if [[ -n "$STAGING_BACKEND_URL" ]]; then
                  STAGING_TOTAL_CHECKS=$((STAGING_TOTAL_CHECKS + 1))
                  if test_api_endpoint "$STAGING_BACKEND_URL/api/v1" "Staging Backend"; then
                      STAGING_CHECKS_PASSED=$((STAGING_CHECKS_PASSED + 1))
                  fi
              fi

              # Calculate staging status
              if [[ $STAGING_TOTAL_CHECKS -eq 0 ]]; then
                  STAGING_STATUS="no_services"
              elif [[ $STAGING_CHECKS_PASSED -eq $STAGING_TOTAL_CHECKS ]]; then
                  STAGING_STATUS="healthy"
              elif [[ $STAGING_CHECKS_PASSED -gt 0 ]]; then
                  STAGING_STATUS="degraded"
              else
                  STAGING_STATUS="unhealthy"
              fi

              echo "📊 Staging Status: $STAGING_STATUS ($STAGING_CHECKS_PASSED/$STAGING_TOTAL_CHECKS)"
              HEALTH_SCORE=$((HEALTH_SCORE + STAGING_CHECKS_PASSED))
              TOTAL_CHECKS=$((TOTAL_CHECKS + STAGING_TOTAL_CHECKS))
          fi

          # Test production environment
          if [[ "${{ github.event.inputs.environment }}" == "production" || "${{ github.event.inputs.environment }}" == "both" || -z "${{ github.event.inputs.environment }}" ]]; then
              echo "🚀 === PRODUCTION HEALTH CHECK ==="

              # Get production URLs
              PRODUCTION_FRONTEND_URL=$(gcloud run services describe roteiro-dispensacao-frontend --region=${{ vars.GCP_REGION }} --format='value(status.url)' 2>/dev/null || echo "")
              PRODUCTION_BACKEND_URL=$(gcloud run services describe roteiro-dispensacao-backend --region=${{ vars.GCP_REGION }} --format='value(status.url)' 2>/dev/null || echo "")

              PRODUCTION_CHECKS_PASSED=0
              PRODUCTION_TOTAL_CHECKS=0

              # Frontend production test
              if [[ -n "$PRODUCTION_FRONTEND_URL" ]]; then
                  PRODUCTION_TOTAL_CHECKS=$((PRODUCTION_TOTAL_CHECKS + 1))
                  if test_endpoint "$PRODUCTION_FRONTEND_URL" "Production Frontend"; then
                      PRODUCTION_CHECKS_PASSED=$((PRODUCTION_CHECKS_PASSED + 1))
                  fi
              fi

              # Backend production test
              if [[ -n "$PRODUCTION_BACKEND_URL" ]]; then
                  PRODUCTION_TOTAL_CHECKS=$((PRODUCTION_TOTAL_CHECKS + 1))
                  if test_api_endpoint "$PRODUCTION_BACKEND_URL/api/v1" "Production Backend"; then
                      PRODUCTION_CHECKS_PASSED=$((PRODUCTION_CHECKS_PASSED + 1))
                  fi
              fi

              # Calculate production status
              if [[ $PRODUCTION_TOTAL_CHECKS -eq 0 ]]; then
                  PRODUCTION_STATUS="no_services"
              elif [[ $PRODUCTION_CHECKS_PASSED -eq $PRODUCTION_TOTAL_CHECKS ]]; then
                  PRODUCTION_STATUS="healthy"
              elif [[ $PRODUCTION_CHECKS_PASSED -gt 0 ]]; then
                  PRODUCTION_STATUS="degraded"
              else
                  PRODUCTION_STATUS="unhealthy"
              fi

              echo "📊 Production Status: $PRODUCTION_STATUS ($PRODUCTION_CHECKS_PASSED/$PRODUCTION_TOTAL_CHECKS)"
              HEALTH_SCORE=$((HEALTH_SCORE + PRODUCTION_CHECKS_PASSED))
              TOTAL_CHECKS=$((TOTAL_CHECKS + PRODUCTION_TOTAL_CHECKS))
          fi

          # Calculate overall health score
          if [[ $TOTAL_CHECKS -gt 0 ]]; then
              HEALTH_PERCENTAGE=$((HEALTH_SCORE * 100 / TOTAL_CHECKS))
          else
              HEALTH_PERCENTAGE=0
          fi

          echo "📊 Overall Health Score: $HEALTH_SCORE/$TOTAL_CHECKS ($HEALTH_PERCENTAGE%)"

          # Set outputs
          echo "staging-status=$STAGING_STATUS" >> $GITHUB_OUTPUT
          echo "production-status=$PRODUCTION_STATUS" >> $GITHUB_OUTPUT
          echo "health-score=$HEALTH_PERCENTAGE" >> $GITHUB_OUTPUT

  # ============================================================================
  # DEEP HEALTH ANALYSIS (Optional)
  # ============================================================================
  deep-health-analysis:
    name: "🔬 Deep Health Analysis"
    runs-on: ubuntu-latest
    needs: system-health
    if: github.event.inputs.deep_check == 'true'
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: "🐍 Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Install Dependencies"
        run: |
          pip install requests psutil

      - name: "🔬 Deep API Analysis"
        run: |
          echo "🔬 Running deep API analysis..."

          cat > deep_health_check.py << 'EOF'
          import requests
          import time
          import json
          from datetime import datetime

          def deep_api_test(base_url, service_name):
              print(f"🔬 Deep testing {service_name}: {base_url}")

              results = {
                  "service": service_name,
                  "base_url": base_url,
                  "timestamp": datetime.utcnow().isoformat(),
                  "tests": {}
              }

              # Test 1: Response time
              start_time = time.time()
              try:
                  response = requests.get(f"{base_url}/health", timeout=10)
                  response_time = (time.time() - start_time) * 1000
                  results["tests"]["response_time"] = {
                      "value": round(response_time, 2),
                      "unit": "ms",
                      "status": "pass" if response_time < 2000 else "warn" if response_time < 5000 else "fail"
                  }
                  print(f"⏱️ Response time: {response_time:.2f}ms")
              except Exception as e:
                  results["tests"]["response_time"] = {
                      "error": str(e),
                      "status": "fail"
                  }

              # Test 2: API endpoints availability
              endpoints = ["/health", "/personas", "/scope"]
              endpoint_results = {}

              for endpoint in endpoints:
                  try:
                      resp = requests.get(f"{base_url}{endpoint}", timeout=5)
                      endpoint_results[endpoint] = {
                          "status_code": resp.status_code,
                          "status": "pass" if resp.status_code == 200 else "fail"
                      }
                      print(f"📡 {endpoint}: HTTP {resp.status_code}")
                  except Exception as e:
                      endpoint_results[endpoint] = {
                          "error": str(e),
                          "status": "fail"
                      }

              results["tests"]["endpoints"] = endpoint_results

              # Test 3: Load test (light)
              print(f"🔄 Running light load test...")
              load_results = []
              for i in range(5):
                  start = time.time()
                  try:
                      resp = requests.get(f"{base_url}/health", timeout=10)
                      duration = (time.time() - start) * 1000
                      load_results.append({
                          "request": i + 1,
                          "duration_ms": round(duration, 2),
                          "status_code": resp.status_code
                      })
                  except Exception as e:
                      load_results.append({
                          "request": i + 1,
                          "error": str(e)
                      })
                  time.sleep(0.5)

              avg_duration = sum(r.get("duration_ms", 0) for r in load_results) / len(load_results)
              results["tests"]["load_test"] = {
                  "avg_duration_ms": round(avg_duration, 2),
                  "requests": load_results,
                  "status": "pass" if avg_duration < 3000 else "warn"
              }
              print(f"📊 Average load test duration: {avg_duration:.2f}ms")

              return results

          # Test available services
          import subprocess

          try:
              # Get service URLs from gcloud
              backend_url = subprocess.check_output([
                  "gcloud", "run", "services", "describe", "hml-roteiro-dispensacao-backend",
                  "--region", "us-central1", "--format", "value(status.url)"
              ], text=True).strip()

              if backend_url:
                  print("🔬 Starting deep analysis of backend API...")
                  results = deep_api_test(f"{backend_url}/api/v1", "Backend API")

                  # Save results
                  with open("/tmp/deep_health_results.json", "w") as f:
                      json.dump(results, f, indent=2)

                  print("📊 Deep analysis completed")
                  print(json.dumps(results, indent=2))
              else:
                  print("⚠️ No backend service found for deep analysis")

          except Exception as e:
              print(f"❌ Deep analysis failed: {e}")
          EOF

          python deep_health_check.py

      - name: "📊 Performance Metrics"
        run: |
          echo "📊 Collecting performance metrics..."

          # Memory usage analysis
          echo "🧠 System memory analysis:"
          free -h

          # Disk usage
          echo "💾 Disk usage:"
          df -h

          echo "✅ Performance metrics collected"

  # ============================================================================
  # SECURITY HEALTH CHECK
  # ============================================================================
  security-health:
    name: "🔒 Security Health Check"
    runs-on: ubuntu-latest
    needs: system-health
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: "🔒 Security Dependencies Check"
        run: |
          echo "🔒 Checking security dependencies..."

          # Frontend security audit
          cd apps/frontend-nextjs
          echo "🔍 Frontend security audit..."
          npm audit --audit-level=high --json > /tmp/frontend-audit.json || true

          if [[ -f "/tmp/frontend-audit.json" ]]; then
              HIGH_VULNS=$(cat /tmp/frontend-audit.json | jq -r '.metadata.vulnerabilities.high' 2>/dev/null || echo "0")
              CRITICAL_VULNS=$(cat /tmp/frontend-audit.json | jq -r '.metadata.vulnerabilities.critical' 2>/dev/null || echo "0")

              echo "📊 Frontend vulnerabilities: High=$HIGH_VULNS, Critical=$CRITICAL_VULNS"

              if [[ "$CRITICAL_VULNS" -gt "0" ]]; then
                  echo "🚨 CRITICAL vulnerabilities found in frontend!"
                  echo "::error::Critical security vulnerabilities detected in frontend"
              elif [[ "$HIGH_VULNS" -gt "0" ]]; then
                  echo "⚠️ HIGH vulnerabilities found in frontend"
                  echo "::warning::High security vulnerabilities detected in frontend"
              else
                  echo "✅ Frontend security check passed"
              fi
          fi

          # Backend security check
          cd ../backend
          echo "🔍 Backend security check..."
          pip install safety

          if safety check --json > /tmp/backend-safety.json; then
              echo "✅ Backend security check passed"
          else
              echo "⚠️ Backend security issues detected"
              echo "::warning::Backend security issues found"
          fi

      - name: "🛡️ SSL/TLS Certificate Check"
        run: |
          echo "🛡️ Checking SSL/TLS certificates..."

          check_ssl() {
              local domain=$1
              echo "🔍 Checking SSL for $domain..."

              if timeout 10 openssl s_client -connect "$domain:443" -servername "$domain" </dev/null 2>/dev/null | openssl x509 -noout -dates 2>/dev/null; then
                  echo "✅ SSL certificate valid for $domain"
              else
                  echo "⚠️ SSL certificate check failed for $domain"
              fi
          }

          # Check production domains if available
          if [[ -n "${{ vars.PRODUCTION_FRONTEND_DOMAIN }}" ]]; then
              check_ssl "${{ vars.PRODUCTION_FRONTEND_DOMAIN }}"
          fi

          if [[ -n "${{ vars.PRODUCTION_API_DOMAIN }}" ]]; then
              check_ssl "${{ vars.PRODUCTION_API_DOMAIN }}"
          fi

  # ============================================================================
  # COMPLIANCE CHECK
  # ============================================================================
  compliance-health:
    name: "📋 Compliance Health Check"
    runs-on: ubuntu-latest
    needs: system-health
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: "📋 LGPD Compliance Check"
        run: |
          echo "📋 Checking LGPD compliance status..."

          # Check for LGPD-related configurations
          LGPD_CHECKS_PASSED=0
          LGPD_TOTAL_CHECKS=4

          # Check 1: Privacy policy presence
          if [[ -f "apps/frontend-nextjs/src/components/privacy" ]] || find apps/frontend-nextjs -name "*privacy*" -type f | grep -q .; then
              echo "✅ Privacy policy components found"
              LGPD_CHECKS_PASSED=$((LGPD_CHECKS_PASSED + 1))
          else
              echo "⚠️ Privacy policy components not found"
          fi

          # Check 2: Data retention policies
          if grep -r "retention" apps/backend/ >/dev/null 2>&1; then
              echo "✅ Data retention policies found"
              LGPD_CHECKS_PASSED=$((LGPD_CHECKS_PASSED + 1))
          else
              echo "⚠️ Data retention policies not clearly defined"
          fi

          # Check 3: Consent management
          if grep -r "consent" apps/frontend-nextjs/src/ >/dev/null 2>&1; then
              echo "✅ Consent management found"
              LGPD_CHECKS_PASSED=$((LGPD_CHECKS_PASSED + 1))
          else
              echo "⚠️ Consent management not found"
          fi

          # Check 4: Data anonymization
          if grep -r "anonymiz" apps/backend/ >/dev/null 2>&1 || grep -r "mask" apps/backend/ >/dev/null 2>&1; then
              echo "✅ Data anonymization/masking found"
              LGPD_CHECKS_PASSED=$((LGPD_CHECKS_PASSED + 1))
          else
              echo "⚠️ Data anonymization not clearly implemented"
          fi

          LGPD_SCORE=$((LGPD_CHECKS_PASSED * 100 / LGPD_TOTAL_CHECKS))
          echo "📊 LGPD Compliance Score: $LGPD_SCORE% ($LGPD_CHECKS_PASSED/$LGPD_TOTAL_CHECKS)"

          if [[ $LGPD_SCORE -lt 75 ]]; then
              echo "⚠️ LGPD compliance below 75%"
              echo "::warning::LGPD compliance score is $LGPD_SCORE%"
          fi

  # ============================================================================
  # HEALTH REPORT GENERATION
  # ============================================================================
  health-report:
    name: "📊 Generate Health Report"
    runs-on: ubuntu-latest
    needs: [system-health, security-health, compliance-health]
    if: always()
    steps:
      - name: "📊 Generate Comprehensive Health Report"
        run: |
          echo "## 🏥 Daily Health Check Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # System Health Status
          echo "### 🔍 System Health Status" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | Score |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|-------|" >> $GITHUB_STEP_SUMMARY

          STAGING_STATUS="${{ needs.system-health.outputs.staging-status }}"
          PRODUCTION_STATUS="${{ needs.system-health.outputs.production-status }}"
          HEALTH_SCORE="${{ needs.system-health.outputs.health-score }}"

          # Staging status
          case "$STAGING_STATUS" in
              "healthy") STAGING_ICON="✅" ;;
              "degraded") STAGING_ICON="⚠️" ;;
              "unhealthy") STAGING_ICON="❌" ;;
              "no_services") STAGING_ICON="🚫" ;;
              *) STAGING_ICON="❓" ;;
          esac

          # Production status
          case "$PRODUCTION_STATUS" in
              "healthy") PRODUCTION_ICON="✅" ;;
              "degraded") PRODUCTION_ICON="⚠️" ;;
              "unhealthy") PRODUCTION_ICON="❌" ;;
              "no_services") PRODUCTION_ICON="🚫" ;;
              *) PRODUCTION_ICON="❓" ;;
          esac

          echo "| Staging | $STAGING_ICON $STAGING_STATUS | $HEALTH_SCORE% |" >> $GITHUB_STEP_SUMMARY
          echo "| Production | $PRODUCTION_ICON $PRODUCTION_STATUS | $HEALTH_SCORE% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Security Health
          echo "### 🔒 Security Health" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.security-health.result }}" == "success" ]]; then
              echo "- ✅ Security dependencies validated" >> $GITHUB_STEP_SUMMARY
              echo "- ✅ SSL/TLS certificates checked" >> $GITHUB_STEP_SUMMARY
          else
              echo "- ❌ Security health check failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Compliance Health
          echo "### 📋 Compliance Health" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.compliance-health.result }}" == "success" ]]; then
              echo "- ✅ LGPD compliance validated" >> $GITHUB_STEP_SUMMARY
          else
              echo "- ❌ Compliance health check failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall health assessment
          echo "### 🎯 Overall Assessment" >> $GITHUB_STEP_SUMMARY
          if [[ "$HEALTH_SCORE" -ge "90" ]]; then
              echo "🟢 **Excellent**: System health is optimal" >> $GITHUB_STEP_SUMMARY
          elif [[ "$HEALTH_SCORE" -ge "75" ]]; then
              echo "🟡 **Good**: System health is stable with minor issues" >> $GITHUB_STEP_SUMMARY
          elif [[ "$HEALTH_SCORE" -ge "50" ]]; then
              echo "🟠 **Warning**: System health has notable issues requiring attention" >> $GITHUB_STEP_SUMMARY
          else
              echo "🔴 **Critical**: System health is poor and requires immediate attention" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Recommendations
          echo "### 💡 Recommendations" >> $GITHUB_STEP_SUMMARY
          if [[ "$STAGING_STATUS" != "healthy" ]]; then
              echo "- 🔧 Investigate staging environment issues" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "$PRODUCTION_STATUS" != "healthy" ]]; then
              echo "- 🚨 **URGENT**: Address production environment issues" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ needs.security-health.result }}" != "success" ]]; then
              echo "- 🔒 Review and update security dependencies" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- 📊 Next health check: Tomorrow at 6 AM UTC" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # ALERTING & NOTIFICATIONS
  # ============================================================================
  health-alerts:
    name: "🚨 Health Alerts"
    runs-on: ubuntu-latest
    needs: [system-health, security-health, compliance-health]
    if: always() && (needs.system-health.outputs.health-score < '75' || needs.security-health.result == 'failure' || needs.compliance-health.result == 'failure')
    steps:
      - name: "🚨 Send Health Alert"
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          HEALTH_SCORE: ${{ needs.system-health.outputs.health-score }}
          STAGING_STATUS: ${{ needs.system-health.outputs.staging-status }}
          PRODUCTION_STATUS: ${{ needs.system-health.outputs.production-status }}
        run: |
          if [[ -n "$TELEGRAM_TOKEN" && -n "$TELEGRAM_CHAT_ID" ]]; then
              echo "🚨 Sending health alert..."

              # Determine alert severity
              if [[ "$HEALTH_SCORE" -lt "50" || "$PRODUCTION_STATUS" == "unhealthy" ]]; then
                  ALERT_LEVEL="🔴 CRÍTICO"
              elif [[ "$HEALTH_SCORE" -lt "75" || "$PRODUCTION_STATUS" == "degraded" ]]; then
                  ALERT_LEVEL="🟠 ALERTA"
              else
                  ALERT_LEVEL="🟡 AVISO"
              fi

              MESSAGE="$ALERT_LEVEL <b>Health Check Alert</b>%0A"
              MESSAGE="${MESSAGE}%0A📊 <b>Health Score:</b> ${HEALTH_SCORE}%"
              MESSAGE="${MESSAGE}%0A🧪 <b>Staging:</b> $STAGING_STATUS"
              MESSAGE="${MESSAGE}%0A🚀 <b>Production:</b> $PRODUCTION_STATUS"
              MESSAGE="${MESSAGE}%0A⏰ <b>Time:</b> $(date '+%H:%M - %d/%m/%Y')"
              MESSAGE="${MESSAGE}%0A%0A🔗 <b>Details:</b> <a href=\"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\">View Report</a>"

              curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
                -d chat_id="$TELEGRAM_CHAT_ID" \
                -d text="$MESSAGE" \
                -d parse_mode="HTML" \
                -d disable_web_page_preview="true" >/dev/null

              echo "✅ Health alert sent"
          else
              echo "⚠️ Telegram alerts not configured"
          fi

      - name: "📝 Create GitHub Issue for Critical Problems"
        if: needs.system-health.outputs.health-score < '50'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Critical Health Check Failure - ${new Date().toISOString().split('T')[0]}`;
            const body = `## 🚨 Critical System Health Issue

            **Health Score**: ${{ needs.system-health.outputs.health-score }}%
            **Staging Status**: ${{ needs.system-health.outputs.staging-status }}
            **Production Status**: ${{ needs.system-health.outputs.production-status }}

            **Timestamp**: ${new Date().toISOString()}

            ### 🔍 Details
            This issue was automatically created due to a critical health check failure.

            ### 🔗 Links
            - [Health Check Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [System Status Dashboard](https://console.cloud.google.com/monitoring)

            ### 🎯 Action Required
            - [ ] Investigate staging environment issues
            - [ ] Address production environment problems
            - [ ] Review security and compliance status
            - [ ] Update monitoring thresholds if needed

            **Labels**: critical, health-check, automated
            `;

            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'critical,health-check',
              state: 'open'
            });

            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['critical', 'health-check', 'automated']
              });

              console.log('✅ Critical health issue created');
            } else {
              console.log('⚠️ Critical health issue already exists');
            }