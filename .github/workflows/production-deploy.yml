name: "üöÄ Production Deploy - Produ√ß√£o"

on:
  push:
    branches: [main]
    paths:
      - 'apps/**'
      - 'package*.json'
      - '.github/workflows/**'
      - '.claude/**'
      - '!**/*.md'
      - '!docs/**'
  workflow_dispatch:
    inputs:
      skip_safety_checks:
        description: '‚ö†Ô∏è Pular verifica√ß√µes de seguran√ßa (EMERG√äNCIA)'
        type: boolean
        default: false
      force_deploy:
        description: 'üö® For√ßar deploy (EMERG√äNCIA M√âDICA)'
        type: boolean
        default: false
      deploy_frontend:
        description: 'Deploy frontend'
        type: boolean
        default: true
      deploy_backend:
        description: 'Deploy backend'
        type: boolean
        default: true
      create_release:
        description: 'Criar release'
        type: boolean
        default: true

env:
  NODE_VERSION: '20'
  ENVIRONMENT: 'production'
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  PRODUCTION_DOMAIN: 'roteirosdispensacao.com.br'
  BACKEND_SERVICE: 'roteiro-dispensacao-api'
  MEDICAL_MODE: 'production'
  LGPD_COMPLIANCE_REQUIRED: 'strict'
  SLA_TARGET: '99.9'
  PRODUCTION_TIMEOUT: 30

permissions:
  contents: write
  id-token: write
  actions: read
  deployments: write

jobs:
  # Gate de seguran√ßa cr√≠tica
  production-safety-gate:
    name: "üõ°Ô∏è Production Safety Gate"
    runs-on: ubuntu-latest
    outputs:
      safety-approved: ${{ steps.safety-check.outputs.approved }}
      frontend-deploy: ${{ steps.deploy-decision.outputs.frontend }}
      backend-deploy: ${{ steps.deploy-decision.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "üîí Critical Safety Checks"
        id: safety-check
        if: ${{ !inputs.skip_safety_checks }}
        run: |
          echo "üõ°Ô∏è Executando verifica√ß√µes cr√≠ticas de seguran√ßa para produ√ß√£o..."
          
          # Verificar se n√£o h√° dados de teste/desenvolvimento
          if grep -r -i "test\|dev\|staging" --include="*.env*" . 2>/dev/null; then
            echo "‚ùå Dados de desenvolvimento encontrados!"
            echo "approved=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Verificar se branch main est√° atualizada
          git fetch origin
          BEHIND=$(git rev-list --count HEAD..origin/main)
          if [ "$BEHIND" -gt 0 ]; then
            echo "‚ùå Branch main n√£o est√° atualizada! $BEHIND commits atr√°s."
            echo "approved=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ Verifica√ß√µes de seguran√ßa aprovadas"
          echo "approved=true" >> $GITHUB_OUTPUT

      - name: "‚ö†Ô∏è Emergency Override"
        if: ${{ inputs.skip_safety_checks }}
        run: |
          echo "üö® ATEN√á√ÉO: Verifica√ß√µes de seguran√ßa puladas por solicita√ß√£o manual!"
          echo "approved=true" >> $GITHUB_OUTPUT

      - name: "üìä Deploy Decision"
        id: deploy-decision
        run: |
          # Detectar mudan√ßas para decidir deploys
          if git diff --name-only HEAD~1 | grep -q "apps/frontend-nextjs/"; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=${{ inputs.deploy_frontend }}" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD~1 | grep -q "apps/backend/"; then
            echo "backend=true" >> $GITHUB_OUTPUT
          else
            echo "backend=${{ inputs.deploy_backend }}" >> $GITHUB_OUTPUT
          fi

  # Valida√ß√µes m√©dicas cr√≠ticas
  medical-compliance-validation:
    name: "üè• Medical Compliance Validation"
    runs-on: ubuntu-latest
    needs: production-safety-gate
    if: needs.production-safety-gate.outputs.safety-approved == 'true'
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: "‚ö° Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "üì¶ Install Dependencies"
        run: npm install

      - name: "üîí LGPD Strict Compliance"
        run: |
          echo "üîí Verifica√ß√£o ESTRITA de LGPD para produ√ß√£o..."
          if npm run compliance:check; then
            echo "‚úÖ LGPD compliance APROVADO para produ√ß√£o"
          else
            echo "‚ùå LGPD compliance FALHOU - Deploy bloqueado!"
            exit 1
          fi

      - name: "ü©∫ Medical Protocol Certification"
        run: |
          echo "ü©∫ Certifica√ß√£o de protocolos m√©dicos para produ√ß√£o..."
          cd apps/frontend-nextjs
          
          # Verificar compila√ß√£o TypeScript
          if npm run type-check; then
            echo "‚úÖ TypeScript medical types validated"
          else
            echo "‚ùå TypeScript compilation failed"
            exit 1
          fi
          
          # Verificar calculadoras m√©dicas
          if ls src/components/interactive/DoseCalculator/ 2>/dev/null; then
            echo "‚úÖ Calculadoras m√©dicas encontradas"
          else
            echo "‚ùå Calculadoras m√©dicas n√£o encontradas"
            exit 1
          fi
          
          # Verificar personas m√©dicas
          if grep -q "dr_gasnelio" src/data/personas.ts; then
            echo "‚úÖ Personas m√©dicas configuradas"
          else
            echo "‚ùå Personas m√©dicas n√£o encontradas"
            exit 1
          fi

      - name: "‚ôø WCAG 2.1 AA Compliance"
        run: |
          echo "‚ôø Verifica√ß√£o de acessibilidade WCAG 2.1 AA..."
          cd apps/frontend-nextjs
          if npm run test:accessibility || true; then
            echo "‚úÖ Acessibilidade verificada"
          fi

  # Deploy Frontend com Zero Downtime
  production-frontend-deploy:
    name: "üåê Production Frontend Deploy"
    runs-on: ubuntu-latest
    needs: [production-safety-gate, medical-compliance-validation]
    if: needs.production-safety-gate.outputs.frontend-deploy == 'true'
    timeout-minutes: 25
    defaults:
      run:
        working-directory: apps/frontend-nextjs
    steps:
      - uses: actions/checkout@v4

      - name: "‚ö° Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/frontend-nextjs/package-lock.json

      - name: "üì¶ Install Dependencies"
        run: npm ci

      - name: "üèóÔ∏è Production Build"
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENVIRONMENT: production
          NEXT_PUBLIC_API_URL: ${{ secrets.PROD_API_URL }}
          NEXT_PUBLIC_FIREBASE_CONFIG: ${{ secrets.PROD_FIREBASE_CONFIG }}
          NEXT_PUBLIC_DOMAIN: ${{ env.PRODUCTION_DOMAIN }}
        run: |
          echo "üî® Building for production..."
          npm run build
          
          # Verificar build de produ√ß√£o
          if [ ! -d ".next" ]; then
            echo "‚ùå Build failed!"
            exit 1
          fi
          
          echo "‚úÖ Production build completed"

      - name: "üîç Pre-deploy Medical Validation"
        run: |
          echo "ü©∫ Valida√ß√£o final antes do deploy de produ√ß√£o..."
          
          # Verificar se arquivos m√©dicos cr√≠ticos existem no build
          if find .next -name "*hanseniase*" -o -name "*calculat*" | grep -q .; then
            echo "‚úÖ Conte√∫do m√©dico encontrado no build"
          else
            echo "‚ö†Ô∏è Conte√∫do m√©dico pode estar ausente"
          fi
          
          # Verificar tamanho do build
          BUILD_SIZE=$(du -sh .next | cut -f1)
          echo "üìä Tamanho do build: $BUILD_SIZE"

      - name: "üöÄ Deploy to Production (Firebase)"
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.PROD_FIREBASE_SERVICE_ACCOUNT }}
          projectId: ${{ secrets.GCP_PROJECT_ID }}
          channelId: live
          target: production
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

  # Deploy Backend com Blue-Green
  production-backend-deploy:
    name: "üîß Production Backend Deploy"
    runs-on: ubuntu-latest
    needs: [production-safety-gate, medical-compliance-validation]
    if: needs.production-safety-gate.outputs.backend-deploy == 'true'
    timeout-minutes: 25
    defaults:
      run:
        working-directory: apps/backend
    steps:
      - uses: actions/checkout@v4

      - name: "üîë Google Cloud Auth"
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.PROD_GCP_SERVICE_ACCOUNT }}

      - name: "‚ö° Setup Cloud SDK"
        uses: google-github-actions/setup-gcloud@v1

      - name: "üê≥ Build Production Image"
        run: |
          echo "üî® Building production backend image..."
          gcloud builds submit --tag gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }}

      - name: "üîÑ Blue-Green Deploy"
        run: |
          echo "üîÑ Executando deploy blue-green..."
          
          # Deploy nova vers√£o sem tr√°fego
          gcloud run deploy ${{ env.BACKEND_SERVICE }}-green \
            --image gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --no-traffic \
            --tag green \
            --set-env-vars "ENVIRONMENT=production,LGPD_MODE=strict,SLA_TARGET=${{ env.SLA_TARGET }}"
          
          echo "‚úÖ Vers√£o green deployada"

      - name: "ü©∫ Health Check Green Version"
        run: |
          echo "üîç Verificando sa√∫de da vers√£o green..."
          GREEN_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }}-green --region=${{ env.REGION }} --format='value(status.url)')
          
          # Aguardar inicializa√ß√£o
          sleep 60
          
          # Health check
          if curl -f -s "$GREEN_URL/health" > /dev/null; then
            echo "‚úÖ Vers√£o green est√° saud√°vel"
          else
            echo "‚ùå Vers√£o green falhou no health check"
            exit 1
          fi

      - name: "üîÑ Switch Traffic"
        run: |
          echo "üîÑ Direcionando tr√°fego para vers√£o green..."
          gcloud run services update-traffic ${{ env.BACKEND_SERVICE }} \
            --to-tags green=100 \
            --region ${{ env.REGION }}
          
          echo "‚úÖ Tr√°fego direcionado para nova vers√£o"

  # Monitoramento p√≥s-deploy cr√≠tico
  production-monitoring:
    name: "üìä Production Critical Monitoring"
    runs-on: ubuntu-latest
    needs: [production-frontend-deploy, production-backend-deploy]
    if: always() && (needs.production-frontend-deploy.result == 'success' || needs.production-backend-deploy.result == 'success')
    timeout-minutes: 10
    steps:
      - name: "üåê Production Health Verification"
        run: |
          echo "üîç Verificando sa√∫de da produ√ß√£o..."
          
          # Verificar frontend
          if curl -f -s "https://${{ env.PRODUCTION_DOMAIN }}" > /dev/null; then
            echo "‚úÖ Frontend produ√ß√£o respondendo"
          else
            echo "‚ùå Frontend produ√ß√£o com problemas!"
            exit 1
          fi
          
          # Aguardar propaga√ß√£o
          sleep 30

      - name: "üè• Critical Medical Endpoints Check"
        run: |
          echo "ü©∫ Verificando endpoints m√©dicos cr√≠ticos..."
          
          DOMAIN="https://${{ env.PRODUCTION_DOMAIN }}"
          CRITICAL_ENDPOINTS=(
            "/modules/hanseniase"
            "/resources/calculator" 
            "/chat"
            "/modules/tratamento"
          )
          
          for endpoint in "${CRITICAL_ENDPOINTS[@]}"; do
            if curl -f -s "$DOMAIN$endpoint" > /dev/null; then
              echo "‚úÖ Endpoint cr√≠tico $endpoint OK"
            else
              echo "‚ùå Endpoint cr√≠tico $endpoint com problemas!"
              exit 1
            fi
          done

      - name: "üìà Setup Production Monitoring"
        run: |
          echo "üìä Configurando monitoramento de produ√ß√£o..."
          echo "üéØ SLA Target: ${{ env.SLA_TARGET }}%"
          echo "üîç Endpoints monitorados:"
          echo "  - Frontend: https://${{ env.PRODUCTION_DOMAIN }}"
          echo "  - APIs m√©dicas cr√≠ticas"
          echo "  - Calculadoras de dosagem"
          echo "  - Sistema de personas (Dr. Gasnelio, GA)"

  # Sistema de rollback autom√°tico
  production-rollback-system:
    name: "üîÑ Rollback System Setup"
    runs-on: ubuntu-latest
    needs: [production-monitoring]
    if: failure()
    steps:
      - name: "üö® Automatic Rollback Trigger"
        run: |
          echo "üö® FALHA DETECTADA - Preparando rollback autom√°tico..."
          echo "üîÑ Sistema de rollback ser√° ativado"
          # Aqui seria implementado o rollback autom√°tico real

  # Criar release se aprovado
  create-release:
    name: "üì¶ Create Release"
    runs-on: ubuntu-latest
    needs: [production-monitoring]
    if: success() && inputs.create_release == true
    steps:
      - uses: actions/checkout@v4

      - name: "üè∑Ô∏è Create Release Tag"
        run: |
          VERSION="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
          echo "Creating release $VERSION"
          
          git config --local user.email "roteirosdedispensacaounb@gmail.com"
          git config --local user.name "Production Deploy Bot"
          git tag -a "$VERSION" -m "Production release $VERSION"
          git push origin "$VERSION"

      - name: "üìù Generate Release Notes"
        run: |
          echo "## üè• Release Notes - Plataforma M√©dica" > release_notes.md
          echo "" >> release_notes.md
          echo "### üöÄ Deploy de Produ√ß√£o Realizado" >> release_notes.md
          echo "- ‚úÖ LGPD Compliance verificado" >> release_notes.md
          echo "- ‚úÖ Protocolos m√©dicos validados" >> release_notes.md
          echo "- ‚úÖ SLA ${{ env.SLA_TARGET }}% configurado" >> release_notes.md
          echo "- ‚úÖ Acessibilidade WCAG 2.1 AA" >> release_notes.md
          echo "" >> release_notes.md
          echo "### üè• Funcionalidades M√©dicas:" >> release_notes.md
          echo "- Calculadoras de dosagem para hansen√≠ase" >> release_notes.md
          echo "- Personas educacionais (Dr. Gasnelio, GA)" >> release_notes.md
          echo "- Casos cl√≠nicos interativos" >> release_notes.md
          echo "- Conformidade com protocolos do Minist√©rio da Sa√∫de" >> release_notes.md

  # Resumo final do deploy
  production-deploy-summary:
    name: "üìã Production Deploy Summary"
    runs-on: ubuntu-latest
    needs: [production-monitoring, create-release]
    if: always()
    steps:
      - name: "‚úÖ Deploy Summary"
        run: |
          echo "## üöÄ Deploy de Produ√ß√£o Conclu√≠do" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Status do Deploy:" >> $GITHUB_STEP_SUMMARY
          echo "| Componente | Status | URL |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.production-frontend-deploy.result == 'success' && '‚úÖ Sucesso' || needs.production-frontend-deploy.result == 'skipped' && '‚è≠Ô∏è Pulado' || '‚ùå Falhou' }} | https://${{ env.PRODUCTION_DOMAIN }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ${{ needs.production-backend-deploy.result == 'success' && '‚úÖ Sucesso' || needs.production-backend-deploy.result == 'skipped' && '‚è≠Ô∏è Pulado' || '‚ùå Falhou' }} | Cloud Run Prod |" >> $GITHUB_STEP_SUMMARY
          echo "| Monitoring | ${{ needs.production-monitoring.result == 'success' && '‚úÖ Ativo' || '‚ùå Problema' }} | Dashboards Ativos |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üè• Conformidade M√©dica:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ LGPD: Conformidade estrita aplicada" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ SLA: Meta de ${{ env.SLA_TARGET }}% configurada" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Acessibilidade: WCAG 2.1 AA verificada" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Seguran√ßa: Valida√ß√µes cr√≠ticas aprovadas" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéâ **Plataforma m√©dica de hansen√≠ase est√° em produ√ß√£o e operacional!**" >> $GITHUB_STEP_SUMMARY

      - name: "üì± Success Notification"
        if: success()
        run: |
          echo "üéâ Deploy de produ√ß√£o realizado com sucesso!"
          echo "üåê Site: https://${{ env.PRODUCTION_DOMAIN }}"
          echo "üè• Plataforma m√©dica operacional"