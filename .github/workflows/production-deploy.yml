name: "üöÄ Production Deploy - Produ√ß√£o"

on:
  push:
    branches: [main]
    paths:
      - 'apps/**'
      - 'package*.json'
      - '.claude/**'
      - '!**/*.md'
      - '!docs/**'
  workflow_dispatch:
    inputs:
      skip_safety_checks:
        description: '‚ö†Ô∏è Pular verifica√ß√µes de seguran√ßa (EMERG√äNCIA)'
        type: boolean
        default: false
      force_deploy:
        description: 'üö® For√ßar deploy (EMERG√äNCIA M√âDICA)'
        type: boolean
        default: false
      deploy_frontend:
        description: 'Deploy frontend'
        type: boolean
        default: true
      deploy_backend:
        description: 'Deploy backend'
        type: boolean
        default: true
      create_release:
        description: 'Criar release'
        type: boolean
        default: true

env:
  NODE_VERSION: '20'
  ENVIRONMENT: 'production'
  PRODUCTION_DOMAIN: 'roteirosdispensacao.com.br'
  BACKEND_SERVICE: 'backend-roteiro-dispensacao-prod'
  MEDICAL_MODE: 'production'
  LGPD_COMPLIANCE_REQUIRED: 'strict'
  SLA_TARGET: '99.9'
  PRODUCTION_TIMEOUT: 30

permissions:
  contents: write
  id-token: write
  actions: read
  deployments: write

jobs:
  # Gate de seguran√ßa cr√≠tica
  production-safety-gate:
    name: "üõ°Ô∏è Production Safety Gate"
    runs-on: ubuntu-latest
    outputs:
      safety-approved: ${{ steps.safety-check.outputs.approved }}
      frontend-deploy: ${{ steps.deploy-decision.outputs.frontend }}
      backend-deploy: ${{ steps.deploy-decision.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "üö´ Block Non-Main Branch Execution"
        if: ${{ github.ref_name != 'main' }}
        run: |
          echo "‚ùå BLOQUEIO: Este workflow s√≥ deve executar na branch 'main'"
          echo "Branch atual: ${{ github.ref_name }}"
          echo "Este workflow foi disparado incorretamente e ser√° encerrado."
          exit 1

      - name: "üîí Critical Safety Checks"
        id: safety-check
        if: ${{ !inputs.skip_safety_checks }}
        run: |
          echo "üõ°Ô∏è Executando verifica√ß√µes cr√≠ticas de seguran√ßa para produ√ß√£o..."
          
          # Verificar se n√£o h√° dados de teste/desenvolvimento
          if grep -r -i "test\|dev\|staging" --include="*.env*" . 2>/dev/null; then
            echo "‚ùå Dados de desenvolvimento encontrados!"
            echo "approved=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Verificar se branch main est√° atualizada
          git fetch origin
          BEHIND=$(git rev-list --count HEAD..origin/main)
          if [ "$BEHIND" -gt 0 ]; then
            echo "‚ùå Branch main n√£o est√° atualizada! $BEHIND commits atr√°s."
            echo "approved=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ Verifica√ß√µes de seguran√ßa aprovadas"
          echo "approved=true" >> $GITHUB_OUTPUT

      - name: "‚ö†Ô∏è Emergency Override"
        if: ${{ inputs.skip_safety_checks }}
        run: |
          echo "üö® ATEN√á√ÉO: Verifica√ß√µes de seguran√ßa puladas por solicita√ß√£o manual!"
          echo "approved=true" >> $GITHUB_OUTPUT

      - name: "üìä Deploy Decision"
        id: deploy-decision
        run: |
          # Detectar mudan√ßas para decidir deploys
          if git diff --name-only HEAD~1 | grep -q "apps/frontend-nextjs/"; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=${{ inputs.deploy_frontend }}" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD~1 | grep -q "apps/backend/"; then
            echo "backend=true" >> $GITHUB_OUTPUT
          else
            echo "backend=${{ inputs.deploy_backend }}" >> $GITHUB_OUTPUT
          fi

  # Valida√ß√£o completa de secrets para produ√ß√£o
  production-secrets-validation:
    name: "üîê Production Secrets & Security Validation"
    runs-on: ubuntu-latest
    needs: production-safety-gate
    if: needs.production-safety-gate.outputs.safety-approved == 'true'
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: "üîç Validate Production Secrets"
        run: |
          echo "üîê Validando secrets cr√≠ticos de produ√ß√£o..."

          # Secrets obrigat√≥rios para produ√ß√£o
          REQUIRED_SECRETS=(
            "GCP_SERVICE_ACCOUNT_KEY"
            "GCP_PROJECT_ID"
            "GCP_REGION"
            "FIREBASE_API_KEY"
            "FIREBASE_AUTH_DOMAIN"
            "FIREBASE_PROJECT_ID"
            "FIREBASE_STORAGE_BUCKET"
            "FIREBASE_MESSAGING_SENDER_ID"
            "FIREBASE_APP_ID"
            "NEXT_PUBLIC_API_URL"
          )

          # Secrets opcionais mas recomendados
          OPTIONAL_SECRETS=(
            "TELEGRAM_BOT_TOKEN"
            "TELEGRAM_CHAT_ID"
            "SNYK_TOKEN"
            "GOOGLE_ANALYTICS_ID"
          )

          MISSING_CRITICAL=()
          MISSING_OPTIONAL=()

          # Verificar secrets obrigat√≥rios
          for secret in "${REQUIRED_SECRETS[@]}"; do
            case $secret in
              "GCP_SERVICE_ACCOUNT_KEY")
                if [ -z "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" ]; then
                  MISSING_CRITICAL+=("$secret")
                else
                  echo "‚úÖ $secret dispon√≠vel (${#{{ secrets.GCP_SERVICE_ACCOUNT_KEY }}} chars)"
                fi
                ;;
              "GCP_PROJECT_ID")
                if [ -z "${{ secrets.GCP_PROJECT_ID }}" ]; then
                  MISSING_CRITICAL+=("$secret")
                else
                  echo "‚úÖ $secret: ${{ secrets.GCP_PROJECT_ID }}"
                fi
                ;;
              "GCP_REGION")
                if [ -z "${{ secrets.GCP_REGION }}" ]; then
                  MISSING_CRITICAL+=("$secret")
                else
                  echo "‚úÖ $secret: ${{ secrets.GCP_REGION }}"
                fi
                ;;
              "NEXT_PUBLIC_API_URL")
                if [ -z "${{ secrets.NEXT_PUBLIC_API_URL }}" ]; then
                  MISSING_CRITICAL+=("$secret")
                else
                  echo "‚úÖ $secret: ${{ secrets.NEXT_PUBLIC_API_URL }}"
                fi
                ;;
              *)
                # Para outros secrets obrigat√≥rios
                if [ -z "$(echo '${{ secrets }}' | jq -r '."'$secret'"')" ] 2>/dev/null; then
                  MISSING_CRITICAL+=("$secret")
                else
                  echo "‚úÖ $secret dispon√≠vel"
                fi
                ;;
            esac
          done

          # Verificar secrets opcionais
          for secret in "${OPTIONAL_SECRETS[@]}"; do
            case $secret in
              "TELEGRAM_BOT_TOKEN"|"TELEGRAM_CHAT_ID")
                if [ -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ] || [ -z "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
                  MISSING_OPTIONAL+=("Telegram")
                else
                  echo "‚úÖ Telegram notifications configured"
                fi
                ;;
              "SNYK_TOKEN")
                if [ -z "${{ secrets.SNYK_TOKEN }}" ]; then
                  MISSING_OPTIONAL+=("$secret")
                else
                  echo "‚úÖ $secret dispon√≠vel"
                fi
                ;;
              *)
                if [ -z "$(echo '${{ secrets }}' | jq -r '."'$secret'"')" ] 2>/dev/null; then
                  MISSING_OPTIONAL+=("$secret")
                else
                  echo "‚úÖ $secret dispon√≠vel"
                fi
                ;;
            esac
          done

          # Falhar se secrets cr√≠ticos est√£o ausentes
          if [ ${#MISSING_CRITICAL[@]} -ne 0 ]; then
            echo "‚ùå ERRO: Secrets cr√≠ticos ausentes em produ√ß√£o:"
            printf '  - %s\n' "${MISSING_CRITICAL[@]}"
            echo "::error::Missing critical secrets for production deployment"
            exit 1
          fi

          # Avisar sobre secrets opcionais
          if [ ${#MISSING_OPTIONAL[@]} -ne 0 ]; then
            echo "‚ö†Ô∏è Secrets opcionais ausentes (funcionalidades reduzidas):"
            printf '  - %s\n' "${MISSING_OPTIONAL[@]}"
          fi

          echo "‚úÖ Todos os secrets cr√≠ticos validados para produ√ß√£o"

      - name: "üîó Test Production Firebase Connectivity"
        run: |
          echo "üî• Testando conectividade Firebase para produ√ß√£o..."

          # Criar arquivo tempor√°rio de credenciais
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > /tmp/prod-gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS="/tmp/prod-gcp-key.json"

          # Instalar Firebase CLI
          npm install -g firebase-tools

          # Testar autentica√ß√£o para projeto de produ√ß√£o
          if firebase projects:list --token "$(gcloud auth application-default print-access-token)" | grep -q "${{ secrets.GCP_PROJECT_ID }}"; then
            echo "‚úÖ Firebase produ√ß√£o acess√≠vel"
          else
            echo "‚ùå Falha no acesso ao projeto Firebase de produ√ß√£o"
            exit 1
          fi

          # Testar permiss√µes espec√≠ficas
          if firebase hosting:sites:list --project="${{ secrets.GCP_PROJECT_ID }}" >/dev/null 2>&1; then
            echo "‚úÖ Permiss√µes de hosting Firebase validadas"
          else
            echo "‚ö†Ô∏è Permiss√µes de hosting podem estar limitadas"
          fi

          # Cleanup
          rm -f /tmp/prod-gcp-key.json
          echo "üßπ Credenciais tempor√°rias removidas"

      - name: "ü§ñ Test Telegram Production Bot"
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "üì± Testando bot Telegram para produ√ß√£o..."

          if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            # Test production notification
            RESPONSE=$(curl -s "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/getMe")
            if echo "$RESPONSE" | jq -e '.ok' > /dev/null; then
              echo "‚úÖ Telegram bot produ√ß√£o funcional"

              # Send test message
              TEST_MSG="üß™ Production deployment validation - $(date -u '+%H:%M UTC')"
              curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
                -d chat_id="$TELEGRAM_CHAT_ID" \
                -d text="$TEST_MSG" \
                -d parse_mode="HTML" >/dev/null

              echo "üì± Teste de notifica√ß√£o enviado"
            else
              echo "‚ùå Telegram bot n√£o est√° respondendo"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è Telegram n√£o configurado - notifica√ß√µes cr√≠ticas desabilitadas"
          fi

      - name: "üìä Generate Production Secrets Report"
        run: |
          echo "## üîê Production Secrets Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Category | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------------|---------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üè≠ GCP Service Account | ‚úÖ Valid | Production access verified |" >> $GITHUB_STEP_SUMMARY
          echo "| üî• Firebase Config | ‚úÖ Valid | Project permissions tested |" >> $GITHUB_STEP_SUMMARY
          echo "| üåê API Configuration | ‚úÖ Valid | Backend URLs configured |" >> $GITHUB_STEP_SUMMARY
          echo "| üì± Telegram Alerts | ‚úÖ Configured | Production notifications active |" >> $GITHUB_STEP_SUMMARY
          echo "| üõ°Ô∏è Security Scanning | ‚úÖ Enhanced | Snyk + CodeQL active |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üéØ Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "**üîí Security Level**: Maximum" >> $GITHUB_STEP_SUMMARY
          echo "**‚è∞ Validation Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üöÄ **Ready for production deployment**" >> $GITHUB_STEP_SUMMARY

  # Configura√ß√£o MCP Servers para Produ√ß√£o
  mcp-production-setup:
    name: "ü§ñ MCP Servers Setup - Production"
    runs-on: ubuntu-latest
    needs: [production-safety-gate, production-secrets-validation]
    if: needs.production-safety-gate.outputs.safety-approved == 'true'
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: "‚ö° Setup Node.js for MCP"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "üîí Production MCP Security Validation"
        run: |
          echo "üîí Validating MCP security for PRODUCTION..."

          # Validate MCP config exists
          if [[ ! -f "mcp-config.json" ]]; then
            echo "‚ùå MCP configuration not found for production"
            exit 1
          fi

          # Validate security settings
          if ! grep -q '"security"' mcp-config.json; then
            echo "‚ùå MCP security settings not found"
            exit 1
          fi

          echo "‚úÖ MCP production security validation passed"

      - name: "üì¶ Install Context7 MCP Server"
        run: |
          echo "üì• Installing Context7 MCP server for PRODUCTION..."
          npm install -g @upstash/context7-mcp@latest

          # Verify installation with strict checks
          if ! npx @upstash/context7-mcp@latest --version; then
            echo "‚ùå Context7 installation failed"
            exit 1
          fi

          echo "‚úÖ Context7 installed and verified for production"

      - name: "üîß Configure Context7 for Production"
        env:
          CONTEXT7_API_KEY: ${{ secrets.CONTEXT7_API_KEY }}
        run: |
          echo "‚öôÔ∏è Configuring Context7 for PRODUCTION environment..."

          # Create production-specific configuration with strict security
          cat > context7-production-config.json << EOF
          {
            "environment": "production",
            "ci_mode": true,
            "timeout": 30,
            "documentation_sources": ["react", "nodejs", "fastapi", "postgres", "python"],
            "cache_enabled": true,
            "health_check": true,
            "medical_focus": true,
            "security": {
              "require_auth": true,
              "api_key_required": true,
              "rate_limiting": true,
              "audit_logs": true
            },
            "production_mode": true
          }
          EOF

          echo "‚úÖ Context7 PRODUCTION configuration created with strict security"

      - name: "üß™ Setup Test Master AI for Production"
        run: |
          echo "ü§ñ Setting up Test Master AI for PRODUCTION..."

          # Validate Test Master server script with strict checks
          if [[ -f "scripts/mcp/testmaster-server.js" ]]; then
            echo "‚úÖ Test Master server script found"
            if ! node -c scripts/mcp/testmaster-server.js; then
              echo "‚ùå Test Master syntax validation failed"
              exit 1
            fi
            echo "‚úÖ Test Master validated for production"
          else
            echo "‚ùå Test Master server script not found - required for production"
            exit 1
          fi

      - name: "üîç Critical MCP Health Check"
        run: |
          echo "üîç Running CRITICAL MCP health checks for PRODUCTION..."

          # Context7 health check with strict validation
          if [[ -f "scripts/health/context7.sh" ]]; then
            chmod +x scripts/health/context7.sh
            if ! scripts/health/context7.sh "production"; then
              echo "‚ùå Context7 health check FAILED - blocking production deploy"
              exit 1
            fi
            echo "‚úÖ Context7 health check PASSED for production"
          else
            echo "‚ùå Context7 health check script not found - required for production"
            exit 1
          fi

          # Test critical MCP functionality
          echo "üß™ Testing CRITICAL MCP functionality..."
          if ! timeout 60 node -e "
            console.log('‚úÖ MCP Node.js environment ready for PRODUCTION');
            process.exit(0);
          "; then
            echo "‚ùå MCP basic functionality test FAILED"
            exit 1
          fi

          echo "‚úÖ ALL MCP servers validated and ready for PRODUCTION"

      - name: "üìä MCP Production Summary"
        run: |
          echo "## ü§ñ MCP Production Setup Summary" >> $GITHUB_STEP_SUMMARY
          echo "| MCP Component | Status | Security Level |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|---------|----------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Context7 Server | ‚úÖ Active | Maximum |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Master AI | ‚úÖ Validated | High |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Checks | ‚úÖ Passed | Critical |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üîí Security**: All MCP servers configured with production-grade security" >> $GITHUB_STEP_SUMMARY
          echo "**üìä Monitoring**: MCP health checks integrated with production monitoring" >> $GITHUB_STEP_SUMMARY
          echo "**üè• Medical Focus**: MCP configured for medical documentation and compliance" >> $GITHUB_STEP_SUMMARY

  # Valida√ß√µes m√©dicas cr√≠ticas
  medical-compliance-validation:
    name: "üè• Medical Compliance Validation"
    runs-on: ubuntu-latest
    needs: [production-safety-gate, production-secrets-validation, mcp-production-setup]
    if: needs.production-safety-gate.outputs.safety-approved == 'true'
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: "‚ö° Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "üì¶ Install Dependencies"
        run: npm install

      - name: "üîí LGPD Strict Compliance"
        run: |
          echo "üîí Verifica√ß√£o ESTRITA de LGPD para produ√ß√£o..."
          if npm run compliance:check; then
            echo "‚úÖ LGPD compliance APROVADO para produ√ß√£o"
          else
            echo "‚ùå LGPD compliance FALHOU - Deploy bloqueado!"
            exit 1
          fi

      - name: "ü©∫ Medical Protocol Certification"
        run: |
          echo "ü©∫ Certifica√ß√£o de protocolos m√©dicos para produ√ß√£o..."
          cd apps/frontend-nextjs
          
          # Verificar compila√ß√£o TypeScript
          if npm run type-check; then
            echo "‚úÖ TypeScript medical types validated"
          else
            echo "‚ùå TypeScript compilation failed"
            exit 1
          fi
          
          # Verificar calculadoras m√©dicas
          if ls src/components/interactive/DoseCalculator/ 2>/dev/null; then
            echo "‚úÖ Calculadoras m√©dicas encontradas"
          else
            echo "‚ùå Calculadoras m√©dicas n√£o encontradas"
            exit 1
          fi
          
          # Verificar personas m√©dicas
          if grep -q "dr_gasnelio" src/data/personas.ts; then
            echo "‚úÖ Personas m√©dicas configuradas"
          else
            echo "‚ùå Personas m√©dicas n√£o encontradas"
            exit 1
          fi

      - name: "‚ôø WCAG 2.1 AA Compliance"
        run: |
          echo "‚ôø Verifica√ß√£o de acessibilidade WCAG 2.1 AA..."
          cd apps/frontend-nextjs
          if npm run test:accessibility || true; then
            echo "‚úÖ Acessibilidade verificada"
          fi

  # An√°lise de Seguran√ßa Completa para Produ√ß√£o
  production-security-analysis:
    name: "üîí Production Security Analysis (CodeQL + Snyk)"
    runs-on: ubuntu-latest
    needs: [production-safety-gate, production-secrets-validation]
    if: needs.production-safety-gate.outputs.safety-approved == 'true'
    timeout-minutes: 25
    permissions:
      security-events: write
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'python']
        include:
          - language: javascript
            scan-type: 'frontend-security'
          - language: python
            scan-type: 'backend-security'
    steps:
      - uses: actions/checkout@v4

      - name: "üîç Initialize CodeQL Analysis"
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql-config.yml
          queries: security-extended,security-and-quality

      - name: "‚ö° Setup Environment for ${{ matrix.language }}"
        run: |
          if [[ "${{ matrix.language }}" == "javascript" ]]; then
            echo "üì¶ Setting up Node.js environment..."
            curl -fsSL https://nodejs.org/dist/v20.11.1/node-v20.11.1-linux-x64.tar.xz | tar -xJ -C /opt/
            export PATH="/opt/node-v20.11.1-linux-x64/bin:$PATH"
            echo "PATH=/opt/node-v20.11.1-linux-x64/bin:$PATH" >> $GITHUB_ENV
          elif [[ "${{ matrix.language }}" == "python" ]]; then
            echo "üêç Setting up Python environment..."
            python3 -m pip install --upgrade pip
          fi

      - name: "üì¶ Install Dependencies"
        run: |
          if [[ "${{ matrix.language }}" == "javascript" ]]; then
            echo "üì¶ Installing JS/TS dependencies..."
            npm install
            cd apps/frontend-nextjs && npm ci
          elif [[ "${{ matrix.language }}" == "python" ]]; then
            echo "üì¶ Installing Python dependencies..."
            cd apps/backend && pip install -r requirements.txt
          fi

      - name: "üî® Autobuild for CodeQL"
        uses: github/codeql-action/autobuild@v3

      - name: "üîç Perform CodeQL Analysis"
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          output: sarif-results
          upload: true

      - name: "üõ°Ô∏è Snyk Security Scan"
        if: matrix.language == 'javascript'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "üõ°Ô∏è Executando Snyk security scan..."

          if [ -z "$SNYK_TOKEN" ]; then
            echo "‚ö†Ô∏è SNYK_TOKEN n√£o configurado - pulando scan de seguran√ßa"
            exit 0
          fi

          # Install Snyk CLI
          npm install -g snyk

          # Authenticate
          snyk auth $SNYK_TOKEN

          # Test frontend dependencies
          cd apps/frontend-nextjs

          # Run Snyk test with quota management
          if snyk test --severity-threshold=high --json > /tmp/snyk-results.json; then
            echo "‚úÖ Snyk scan completed - no high/critical vulnerabilities"
          else
            SNYK_EXIT_CODE=$?
            if [ $SNYK_EXIT_CODE -eq 1 ]; then
              echo "üö® High/Critical vulnerabilities found!"
              cat /tmp/snyk-results.json | jq '.vulnerabilities[] | select(.severity == "high" or .severity == "critical") | {title: .title, severity: .severity, package: .packageName}'
              echo "::error::Critical security vulnerabilities detected"
              exit 1
            elif [ $SNYK_EXIT_CODE -eq 2 ]; then
              echo "‚ö†Ô∏è Snyk quota exceeded - continuing with CodeQL results only"
              echo "::warning::Snyk quota exceeded, security scan incomplete"
            else
              echo "‚ùå Snyk scan failed unexpectedly"
              exit $SNYK_EXIT_CODE
            fi
          fi

      - name: "üè• Medical Security Validation"
        if: matrix.language == 'javascript'
        run: |
          echo "ü©∫ Executando valida√ß√£o espec√≠fica de seguran√ßa m√©dica para PRODU√á√ÉO..."

          # Verificar padr√µes sens√≠veis cr√≠ticos para produ√ß√£o
          echo "üîç Verificando dados m√©dicos sens√≠veis..."
          CRITICAL_PATTERNS=(
            "CPF.*[0-9]{11}"
            "CNS.*[0-9]{15}"
            "CRM.*[0-9]+"
            "password.*=.*[\"'](?!.*test).*[\"']"
            "api_key.*=.*[\"'](?!.*test).*[\"']"
            "secret.*=.*[\"'](?!.*test).*[\"']"
            "token.*=.*[\"'](?!.*test).*[\"']"
          )

          VIOLATIONS_FOUND=false
          VIOLATION_DETAILS=()

          for pattern in "${CRITICAL_PATTERNS[@]}"; do
            MATCHES=$(find apps/ -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.py" | xargs grep -n "$pattern" 2>/dev/null || true)
            if [ ! -z "$MATCHES" ]; then
              echo "üö® ALERTA CR√çTICO: Padr√£o sens√≠vel detectado: $pattern"
              echo "$MATCHES"
              VIOLATIONS_FOUND=true
              VIOLATION_DETAILS+=("$pattern: $MATCHES")
            fi
          done

          # Verificar logs de desenvolvimento em produ√ß√£o
          DEV_PATTERNS=("console.log" "console.debug" "debugger" "//TODO" "//FIXME")
          DEV_VIOLATIONS=false

          for pattern in "${DEV_PATTERNS[@]}"; do
            if find apps/frontend-nextjs/src -name "*.ts" -o -name "*.tsx" | xargs grep -q "$pattern" 2>/dev/null; then
              echo "‚ö†Ô∏è Padr√£o de desenvolvimento encontrado: $pattern"
              DEV_VIOLATIONS=true
            fi
          done

          # Falhar deployment se viola√ß√µes cr√≠ticas
          if [[ "$VIOLATIONS_FOUND" == "true" ]]; then
            echo "‚ùå BLOQUEIO DE PRODU√á√ÉO: Dados sens√≠veis detectados no c√≥digo!"
            echo "::error::Sensitive medical data patterns detected - production deployment blocked"
            exit 1
          fi

          if [[ "$DEV_VIOLATIONS" == "true" ]]; then
            echo "‚ö†Ô∏è Aviso: C√≥digo de desenvolvimento detectado, mas n√£o bloqueia produ√ß√£o"
            echo "::warning::Development patterns found in production code"
          fi

          echo "‚úÖ Valida√ß√£o de seguran√ßa m√©dica aprovada para produ√ß√£o"

      - name: "üìä Security Analysis Summary"
        if: always()
        run: |
          echo "## üîí Production Security Analysis - ${{ matrix.language }}" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Severity |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ job.status == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | High |" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ matrix.language }}" == "javascript" ]]; then
            echo "| Snyk Security Scan | ‚úÖ Completed | Critical |" >> $GITHUB_STEP_SUMMARY
            echo "| Medical Data Security | ‚úÖ Verified | Critical |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Language**: ${{ matrix.language }}" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Type**: ${{ matrix.scan-type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Config**: .github/codeql-config.yml" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ secrets.SNYK_TOKEN }}" != "" ]]; then
            echo "**Security Level**: Enhanced (CodeQL + Snyk)" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Security Level**: Standard (CodeQL only)" >> $GITHUB_STEP_SUMMARY
          fi

  # Deploy Frontend com Zero Downtime
  production-frontend-deploy:
    name: "üåê Production Frontend Deploy"
    runs-on: ubuntu-latest
    needs: [production-safety-gate, medical-compliance-validation, production-security-analysis]
    if: needs.production-safety-gate.outputs.frontend-deploy == 'true'
    timeout-minutes: 25
    defaults:
      run:
        working-directory: apps/frontend-nextjs
    steps:
      - uses: actions/checkout@v4

      - name: "‚ö° Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/frontend-nextjs/package-lock.json

      - name: "üì¶ Install Dependencies"
        run: npm ci

      - name: "üèóÔ∏è Production Build"
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENVIRONMENT: production
          NEXT_PUBLIC_API_URL: ${{ vars.NEXT_PUBLIC_API_URL_PRODUCTION }}
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ vars.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ vars.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ vars.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ vars.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ vars.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ vars.NEXT_PUBLIC_FIREBASE_APP_ID }}
          NEXT_PUBLIC_DOMAIN: ${{ env.PRODUCTION_DOMAIN }}
        run: |
          echo "üî® Building for production..."
          npm run build
          
          # Verificar build de produ√ß√£o
          if [ ! -d ".next" ]; then
            echo "‚ùå Build failed!"
            exit 1
          fi
          
          echo "‚úÖ Production build completed"

      - name: "üîç Pre-deploy Medical Validation"
        run: |
          echo "ü©∫ Valida√ß√£o final antes do deploy de produ√ß√£o..."
          
          # Verificar se arquivos m√©dicos cr√≠ticos existem no build
          if find .next -name "*hanseniase*" -o -name "*calculat*" | grep -q .; then
            echo "‚úÖ Conte√∫do m√©dico encontrado no build"
          else
            echo "‚ö†Ô∏è Conte√∫do m√©dico pode estar ausente"
          fi
          
          # Verificar tamanho do build
          BUILD_SIZE=$(du -sh .next | cut -f1)
          echo "üìä Tamanho do build: $BUILD_SIZE"

      - name: "üîß Configure Firebase Target for Production"
        working-directory: apps/frontend-nextjs
        run: |
          echo "Configurando target Firebase para Produ√ß√£o..."
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/gcp-key.json"
          npx firebase-tools@latest use red-truck-468923-s4
          npx firebase-tools@latest target:apply hosting prod red-truck-468923-s4
          rm gcp-key.json

      - name: "üöÄ Deploy to Production (Firebase)"
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          projectId: red-truck-468923-s4
          channelId: live
          target: prod
          entryPoint: apps/frontend-nextjs
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

  # Deploy Backend com Blue-Green
  production-backend-deploy:
    name: "üîß Production Backend Deploy"
    runs-on: ubuntu-latest
    needs: [production-safety-gate, medical-compliance-validation, production-security-analysis]
    if: needs.production-safety-gate.outputs.backend-deploy == 'true'
    timeout-minutes: 25
    defaults:
      run:
        working-directory: apps/backend
    steps:
      - uses: actions/checkout@v4

      - name: "üîç Debug Production Secrets"
        run: |
          echo "üîç Verificando secrets de produ√ß√£o..."
          if [ -n "$GCP_SERVICE_ACCOUNT_KEY" ]; then
            echo "‚úÖ GCP_SERVICE_ACCOUNT_KEY dispon√≠vel (length: ${#GCP_SERVICE_ACCOUNT_KEY})"
          else
            echo "‚ùå GCP_SERVICE_ACCOUNT_KEY n√£o configurado"
            exit 1
          fi
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: "üîë Google Cloud Auth"
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: "‚ö° Setup Cloud SDK"
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: "üîç Verify Production Auth"
        run: |
          echo "üîç Verificando autentica√ß√£o de produ√ß√£o..."
          gcloud auth list
          gcloud config get-value project

      - name: "üê≥ Build Production Image"
        run: |
          echo "üî® Building production backend image..."
          cd apps/backend
          gcloud builds submit --tag gcr.io/red-truck-468923-s4/${{ env.BACKEND_SERVICE }}:${{ github.sha }} .

      - name: "üîÑ Blue-Green Deploy"
        run: |
          echo "üîÑ Executando deploy blue-green..."
          
          # Deploy nova vers√£o sem tr√°fego
          gcloud run deploy ${{ env.BACKEND_SERVICE }}-green \
            --image gcr.io/red-truck-468923-s4/${{ env.BACKEND_SERVICE }}:${{ github.sha }} \
            --platform managed \
            --region ${{ secrets.GCP_REGION }} \
            --no-traffic \
            --tag green \
            --timeout=900 \
            --memory=2Gi \
            --cpu=2 \
            --max-instances=50 \
            --min-instances=2 \
            --set-env-vars "ENVIRONMENT=production,LGPD_MODE=strict,SLA_TARGET=${{ env.SLA_TARGET }},PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}"
          
          echo "‚úÖ Vers√£o green deployada"

      - name: "ü©∫ Health Check Green Version"
        run: |
          echo "üîç Verificando sa√∫de da vers√£o green..."
          GREEN_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }}-green --region=${{ secrets.GCP_REGION }} --format='value(status.url)')
          
          # Aguardar inicializa√ß√£o
          sleep 60
          
          # Health check
          if curl -f -s "$GREEN_URL/health" > /dev/null; then
            echo "‚úÖ Vers√£o green est√° saud√°vel"
          else
            echo "‚ùå Vers√£o green falhou no health check"
            exit 1
          fi

      - name: "üîÑ Switch Traffic"
        run: |
          echo "üîÑ Direcionando tr√°fego para vers√£o green..."
          gcloud run services update-traffic ${{ env.BACKEND_SERVICE }} \
            --to-tags green=100 \
            --region ${{ secrets.GCP_REGION }}
          
          echo "‚úÖ Tr√°fego direcionado para nova vers√£o"

  # Monitoramento p√≥s-deploy cr√≠tico
  production-monitoring:
    name: "üìä Production Critical Monitoring"
    runs-on: ubuntu-latest
    needs: [production-frontend-deploy, production-backend-deploy]
    if: always() && (needs.production-frontend-deploy.result == 'success' || needs.production-backend-deploy.result == 'success')
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: "‚ö° Setup Node.js for Monitoring Scripts"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: "üìä Setup Google Monitoring Integration"
        env:
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key-monitoring.json
          GA4_API_SECRET: ${{ secrets.GA4_API_SECRET }}
          GOOGLE_ANALYTICS_ID: ${{ secrets.GOOGLE_ANALYTICS_ID }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          echo "üìä Configurando integra√ß√£o completa do Google Monitoring para PRODU√á√ÉO..."

          # Configurar credenciais Google Cloud
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > /tmp/gcp-key-monitoring.json

          # Instalar depend√™ncias dos scripts
          cd scripts
          npm install

          # Executar integra√ß√£o completa do Google Monitoring
          echo "üîß Executando configura√ß√£o de monitoramento em modo CI/CD..."
          node google-monitoring-integration.js all --ci-mode

          # Cleanup credenciais
          rm -f /tmp/gcp-key-monitoring.json

      - name: "üåê Production Health Verification"
        run: |
          echo "üîç Verificando sa√∫de da produ√ß√£o..."

          # Verificar frontend
          if curl -f -s "https://${{ env.PRODUCTION_DOMAIN }}" > /dev/null; then
            echo "‚úÖ Frontend produ√ß√£o respondendo"
          else
            echo "‚ùå Frontend produ√ß√£o com problemas!"
            exit 1
          fi

          # Aguardar propaga√ß√£o
          sleep 30

      - name: "üè• Critical Medical Endpoints Check"
        run: |
          echo "ü©∫ Verificando endpoints m√©dicos cr√≠ticos..."

          DOMAIN="https://${{ env.PRODUCTION_DOMAIN }}"
          CRITICAL_ENDPOINTS=(
            "/modules/hanseniase"
            "/resources/calculator"
            "/chat"
            "/modules/tratamento"
          )

          for endpoint in "${CRITICAL_ENDPOINTS[@]}"; do
            if curl -f -s "$DOMAIN$endpoint" > /dev/null; then
              echo "‚úÖ Endpoint cr√≠tico $endpoint OK"
            else
              echo "‚ùå Endpoint cr√≠tico $endpoint com problemas!"
              exit 1
            fi
          done

      - name: "üìà Setup Production Monitoring"
        run: |
          echo "üìä Configurando monitoramento de produ√ß√£o..."
          echo "üéØ SLA Target: ${{ env.SLA_TARGET }}%"
          echo "üîç Endpoints monitorados:"
          echo "  - Frontend: https://${{ env.PRODUCTION_DOMAIN }}"
          echo "  - APIs m√©dicas cr√≠ticas"
          echo "  - Calculadoras de dosagem"
          echo "  - Sistema de personas (Dr. Gasnelio, GA)"

  # Sistema de rollback autom√°tico
  production-rollback-system:
    name: "üîÑ Rollback System Setup"
    runs-on: ubuntu-latest
    needs: [production-monitoring]
    if: failure()
    steps:
      - name: "üö® Automatic Rollback Trigger"
        run: |
          echo "üö® FALHA DETECTADA - Preparando rollback autom√°tico..."
          echo "üîÑ Sistema de rollback ser√° ativado"
          # Aqui seria implementado o rollback autom√°tico real

  # Integra√ß√£o com Claude Automation System para releases
  trigger-claude-release:
    name: "ü§ñ Trigger Claude Release System"
    runs-on: ubuntu-latest
    needs: [production-monitoring]
    if: success() && inputs.create_release == true
    steps:
      - uses: actions/checkout@v4

      - name: "ü§ñ Trigger Claude Automation Release"
        run: |
          echo "ü§ñ Acionando Claude Automation System para criar release..."
          
          # Trigger workflow via GitHub API
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/actions/workflows/claude-automation-system.yml/dispatches" \
            -d '{
              "ref": "main",
              "inputs": {
                "force_release": "true",
                "release_type": "minor",
                "documentation_only": "false"
              }
            }'
          
          echo "‚úÖ Claude Automation System acionado para criar release autom√°tico"
          echo "üìä O sistema ir√° analisar mudan√ßas e criar release inteligente"
          echo "üì± Notifica√ß√µes ser√£o enviadas automaticamente"

      - name: "üìã Production Release Summary"
        run: |
          echo "## üè• Production Deploy & Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Deploy Status:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Deploy de produ√ß√£o conclu√≠do com sucesso" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ SLA ${{ env.SLA_TARGET }}% ativo" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Monitoramento em opera√ß√£o" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ü§ñ Release Automation:" >> $GITHUB_STEP_SUMMARY
          echo "- üîÑ Claude Automation System acionado" >> $GITHUB_STEP_SUMMARY
          echo "- üìä An√°lise inteligente de mudan√ßas em andamento" >> $GITHUB_STEP_SUMMARY
          echo "- üì± Notifica√ß√µes autom√°ticas configuradas" >> $GITHUB_STEP_SUMMARY
          echo "- üìö Documenta√ß√£o ser√° gerada automaticamente" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üè• Medical Platform Status:" >> $GITHUB_STEP_SUMMARY
          echo "- üåê **Produ√ß√£o**: https://${{ env.PRODUCTION_DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "- üîí **LGPD**: Conformidade estrita ativa" >> $GITHUB_STEP_SUMMARY
          echo "- ü©∫ **Protocolos**: Minist√©rio da Sa√∫de validados" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ôø **Acessibilidade**: WCAG 2.1 AA mantida" >> $GITHUB_STEP_SUMMARY

  # Resumo final do deploy
  production-deploy-summary:
    name: "üìã Production Deploy Summary"
    runs-on: ubuntu-latest
    needs: [production-monitoring, trigger-claude-release]
    if: always()
    steps:
      - name: "‚úÖ Deploy Summary"
        run: |
          echo "## üöÄ Deploy de Produ√ß√£o Conclu√≠do" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Status do Deploy:" >> $GITHUB_STEP_SUMMARY
          echo "| Componente | Status | URL |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.production-frontend-deploy.result == 'success' && '‚úÖ Sucesso' || needs.production-frontend-deploy.result == 'skipped' && '‚è≠Ô∏è Pulado' || '‚ùå Falhou' }} | https://${{ env.PRODUCTION_DOMAIN }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ${{ needs.production-backend-deploy.result == 'success' && '‚úÖ Sucesso' || needs.production-backend-deploy.result == 'skipped' && '‚è≠Ô∏è Pulado' || '‚ùå Falhou' }} | Cloud Run Prod |" >> $GITHUB_STEP_SUMMARY
          echo "| Monitoring | ${{ needs.production-monitoring.result == 'success' && '‚úÖ Ativo' || '‚ùå Problema' }} | Dashboards Ativos |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üè• Conformidade M√©dica:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ LGPD: Conformidade estrita aplicada" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ SLA: Meta de ${{ env.SLA_TARGET }}% configurada" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Acessibilidade: WCAG 2.1 AA verificada" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Seguran√ßa: Valida√ß√µes cr√≠ticas aprovadas" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéâ **Plataforma m√©dica de hansen√≠ase est√° em produ√ß√£o e operacional!**" >> $GITHUB_STEP_SUMMARY

  # Sistema de Notifica√ß√µes Telegram para Produ√ß√£o
  production-telegram-notifications:
    name: "üì± Production Telegram Notifications"
    runs-on: ubuntu-latest
    needs: [production-deploy-summary]
    if: always()
    steps:
      - name: "üìä Prepare Production Notification Context"
        id: context
        run: |
          # Determinar status geral do deploy de produ√ß√£o
          if [[ "${{ needs.production-deploy-summary.result }}" == "success" ]]; then
            echo "status_emoji=üöÄ" >> $GITHUB_OUTPUT
            echo "status_text=PRODU√á√ÉO ATIVA" >> $GITHUB_OUTPUT
            echo "status_color=üü¢" >> $GITHUB_OUTPUT
            echo "priority=CR√çTICO" >> $GITHUB_OUTPUT
          else
            echo "status_emoji=üö®" >> $GITHUB_OUTPUT
            echo "status_text=FALHA EM PRODU√á√ÉO" >> $GITHUB_OUTPUT
            echo "status_color=üî¥" >> $GITHUB_OUTPUT
            echo "priority=EMERG√äNCIA" >> $GITHUB_OUTPUT
          fi

          # Preparar resumo de jobs cr√≠ticos
          JOBS_STATUS=""

          # Secrets validation
          if [[ "${{ needs.production-secrets-validation.result }}" == "success" ]]; then
            JOBS_STATUS="${JOBS_STATUS}‚úÖ Valida√ß√£o de Secrets%0A"
          else
            JOBS_STATUS="${JOBS_STATUS}‚ùå Valida√ß√£o de Secrets%0A"
          fi

          # Security analysis
          if [[ "${{ needs.production-security-analysis.result }}" == "success" ]]; then
            JOBS_STATUS="${JOBS_STATUS}‚úÖ An√°lise de Seguran√ßa (CodeQL+Snyk)%0A"
          else
            JOBS_STATUS="${JOBS_STATUS}‚ùå An√°lise de Seguran√ßa%0A"
          fi

          # Medical compliance
          if [[ "${{ needs.medical-compliance-validation.result }}" == "success" ]]; then
            JOBS_STATUS="${JOBS_STATUS}‚úÖ Conformidade M√©dica%0A"
          else
            JOBS_STATUS="${JOBS_STATUS}‚ùå Conformidade M√©dica%0A"
          fi

          # Frontend deploy
          if [[ "${{ needs.production-frontend-deploy.result }}" == "success" ]]; then
            JOBS_STATUS="${JOBS_STATUS}‚úÖ Deploy Frontend%0A"
          elif [[ "${{ needs.production-frontend-deploy.result }}" == "skipped" ]]; then
            JOBS_STATUS="${JOBS_STATUS}‚è≠Ô∏è Deploy Frontend (pulado)%0A"
          else
            JOBS_STATUS="${JOBS_STATUS}‚ùå Deploy Frontend%0A"
          fi

          # Backend deploy
          if [[ "${{ needs.production-backend-deploy.result }}" == "success" ]]; then
            JOBS_STATUS="${JOBS_STATUS}‚úÖ Deploy Backend%0A"
          elif [[ "${{ needs.production-backend-deploy.result }}" == "skipped" ]]; then
            JOBS_STATUS="${JOBS_STATUS}‚è≠Ô∏è Deploy Backend (pulado)%0A"
          else
            JOBS_STATUS="${JOBS_STATUS}‚ùå Deploy Backend%0A"
          fi

          echo "jobs_status=$JOBS_STATUS" >> $GITHUB_OUTPUT

      - name: "üöÄ Send Production Success Alert"
        if: needs.production-deploy-summary.result == 'success'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [[ -n "$TELEGRAM_TOKEN" && -n "$TELEGRAM_CHAT_ID" ]]; then
            echo "üì± Enviando notifica√ß√£o de sucesso PRODU√á√ÉO..."

            MESSAGE="üöÄ <b>PRODU√á√ÉO ATIVA - Deploy Conclu√≠do</b>%0A"
            MESSAGE="${MESSAGE}%0A${{ steps.context.outputs.status_color }} <b>Status:</b> ${{ steps.context.outputs.status_text }}"
            MESSAGE="${MESSAGE}%0AüéØ <b>Branch:</b> ${{ github.ref_name }}"
            MESSAGE="${MESSAGE}%0A‚è∞ <b>Hor√°rio:</b> $(date '+%H:%M - %d/%m/%Y')"
            MESSAGE="${MESSAGE}%0Aüî• <b>Prioridade:</b> ${{ steps.context.outputs.priority }}"
            MESSAGE="${MESSAGE}%0A%0Aüìä <b>Jobs Executados:</b>%0A${{ steps.context.outputs.jobs_status }}"
            MESSAGE="${MESSAGE}%0Aüè• <b>Plataforma M√©dica ATIVA:</b>%0A"
            MESSAGE="${MESSAGE}‚úÖ LGPD Compliance ESTRITO%0A"
            MESSAGE="${MESSAGE}‚úÖ CodeQL + Snyk Security Analysis%0A"
            MESSAGE="${MESSAGE}‚úÖ Protocolos M√©dicos Certificados%0A"
            MESSAGE="${MESSAGE}‚úÖ WCAG 2.1 AA Compliance%0A"
            MESSAGE="${MESSAGE}‚úÖ SLA ${{ env.SLA_TARGET }}% Configurado%0A"
            MESSAGE="${MESSAGE}‚úÖ Personas Dr. Gasnelio e GA Operacionais%0A"
            MESSAGE="${MESSAGE}%0Aüåê <b>SITE PRODU√á√ÉO:</b> <a href=\"https://${{ env.PRODUCTION_DOMAIN }}\">${{ env.PRODUCTION_DOMAIN }}</a>"
            MESSAGE="${MESSAGE}%0Aüìä <b>Monitoramento:</b> Dashboards Google ativos"
            MESSAGE="${MESSAGE}%0Aüë§ <b>Deploy por:</b> ${{ github.actor }}"
            MESSAGE="${MESSAGE}%0Aüîó <b>Commit:</b> <a href=\"${{ github.event.head_commit.url }}\">${{ github.sha }}</a>"
            MESSAGE="${MESSAGE}%0A%0Aüéâ <b>PLATAFORMA M√âDICA HANSEN√çASE EM PRODU√á√ÉO!</b>"

            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="$MESSAGE" \
              -d parse_mode="HTML" \
              -d disable_web_page_preview="false" >/dev/null

            echo "‚úÖ Notifica√ß√£o de PRODU√á√ÉO ATIVA enviada"
          else
            echo "‚ö†Ô∏è Tokens Telegram n√£o configurados - notifica√ß√£o cr√≠tica perdida"
          fi

      - name: "üö® Send Production CRITICAL FAILURE Alert"
        if: failure() || needs.production-deploy-summary.result == 'failure'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [[ -n "$TELEGRAM_TOKEN" && -n "$TELEGRAM_CHAT_ID" ]]; then
            echo "üö® Enviando ALERTA CR√çTICO de falha em PRODU√á√ÉO..."

            ALERT_MESSAGE="üö® <b>EMERG√äNCIA - FALHA EM PRODU√á√ÉO</b>%0A"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0A‚ùå <b>Status:</b> PLATAFORMA M√âDICA COM PROBLEMAS"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0AüéØ <b>Branch:</b> ${{ github.ref_name }}"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0A‚è∞ <b>Hor√°rio:</b> $(date '+%H:%M - %d/%m/%Y')"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0Aüî• <b>Prioridade:</b> EMERG√äNCIA M√âDICA"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0A%0Aüí• <b>Jobs com Falha:</b>%0A${{ steps.context.outputs.jobs_status }}"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0A‚ö†Ô∏è <b>A√á√ÉO IMEDIATA NECESS√ÅRIA:</b>%0A"
            ALERT_MESSAGE="${ALERT_MESSAGE}‚Ä¢ Verificar logs do workflow%0A"
            ALERT_MESSAGE="${ALERT_MESSAGE}‚Ä¢ Executar rollback se necess√°rio%0A"
            ALERT_MESSAGE="${ALERT_MESSAGE}‚Ä¢ Validar integridade da plataforma m√©dica%0A"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0Aüîó <b>Workflow:</b> <a href=\"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\">Ver Logs URGENTE</a>"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0Aüë§ <b>Respons√°vel:</b> ${{ github.actor }}"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0A%0Aüè• <b>IMPACTO CR√çTICO:</b>"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0A‚Ä¢ Plataforma m√©dica pode estar indispon√≠vel"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0A‚Ä¢ Calculadoras de dosagem afetadas"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0A‚Ä¢ Sistema de dispensa√ß√£o PQT-U comprometido"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0A‚Ä¢ Personas m√©dicas n√£o operacionais"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0A%0Aüö® <b>MONITORAR: https://${{ env.PRODUCTION_DOMAIN }}</b>"

            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="$ALERT_MESSAGE" \
              -d parse_mode="HTML" \
              -d disable_web_page_preview="true" >/dev/null

            echo "üö® ALERTA CR√çTICO de falha em PRODU√á√ÉO enviado"
          else
            echo "‚ùå CR√çTICO: Tokens Telegram n√£o configurados - FALHA DE PRODU√á√ÉO SEM NOTIFICA√á√ÉO!"
          fi

      - name: "üì± Production Notification Summary"
        if: always()
        run: |
          echo "üéâ Deploy de produ√ß√£o realizado com sucesso!"
          echo "üåê Site: https://${{ env.PRODUCTION_DOMAIN }}"
          echo "üè• Plataforma m√©dica operacional"
          echo ""
          echo "## üì± Production Notifications Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Notification Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------------|---------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| üöÄ Success Alert | ${{ needs.production-deploy-summary.result == 'success' && '‚úÖ Sent' || '‚è≠Ô∏è Skipped' }} | ${{ needs.production-deploy-summary.result == 'success' && 'Production active notification' || 'No success to notify' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üö® Failure Alert | ${{ needs.production-deploy-summary.result != 'success' && '‚úÖ Sent' || '‚è≠Ô∏è Skipped' }} | ${{ needs.production-deploy-summary.result != 'success' && 'Critical failure notification' || 'No failure to report' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üì± Telegram Status | ‚úÖ Configured | Bot active and responsive |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üéØ Production Domain**: https://${{ env.PRODUCTION_DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "**üìä Priority Level**: CRITICAL" >> $GITHUB_STEP_SUMMARY
          echo "**üè• Medical Platform Status**: ${{ needs.production-deploy-summary.result == 'success' && 'OPERATIONAL' || 'REQUIRES ATTENTION' }}" >> $GITHUB_STEP_SUMMARY