name: "🚀 Production Deploy - Produção"

on:
  # Disabled - keeping only Dependabot workflows active
  # push:
  #   branches: [main]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Pular testes (apenas emergências)'
        type: boolean
        default: false
      force_deploy:
        description: 'Forçar deploy mesmo com falhas'
        type: boolean
        default: false
      deploy_frontend:
        description: 'Deploy frontend'
        type: boolean
        default: true
      deploy_backend:
        description: 'Deploy backend'
        type: boolean
        default: true

env:
  NODE_VERSION: '20'
  ENVIRONMENT: 'production'
  FRONTEND_SITE: 'roteiros-de-dispensacao'
  BACKEND_SERVICE: 'roteiro-dispensacao-api'
  GCP_PROJECT_ID: 'red-truck-468923-s4'
  GCP_REGION: 'us-central1'
  MEDICAL_MODE: 'true'
  LGPD_COMPLIANCE_REQUIRED: 'true'
  PRODUCTION_TIMEOUT: 90

permissions:
  contents: read
  id-token: write
  actions: read

jobs:
  # Preparação e validação para produção
  production-preparation:
    name: "🔧 Production Preparation"
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.filter.outputs.frontend }}
      backend-changed: ${{ steps.filter.outputs.backend }}
      claude-changed: ${{ steps.filter.outputs.claude }}
      deploy-frontend: ${{ steps.deploy-config.outputs.frontend }}
      deploy-backend: ${{ steps.deploy-config.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🚫 Block Non-Main Branch Execution"
        if: ${{ github.ref_name != 'main' }}
        run: |
          echo "❌ BLOQUEIO: Este workflow só deve executar na branch 'main'"
          echo "Branch atual: ${{ github.ref_name }}"
          echo "Este workflow foi disparado incorretamente e será encerrado."
          exit 1

      - name: "🛡️ Production Safety Check"
        run: |
          echo "🛡️ Verificações de segurança para produção..."
          echo "🎯 Branch: ${{ github.ref_name }}"
          echo "👤 Autor: ${{ github.actor }}"
          echo "📝 Commit: ${{ github.sha }}"

          # Verificar se não é um commit de emergência
          if git log -1 --pretty=%B | grep -i "emergency\|hotfix\|urgent"; then
            echo "🚨 Deploy de emergência detectado"
            echo "⚠️ Prosseguindo com validações mínimas"
          else
            echo "✅ Deploy regular - validações completas"
          fi

      - name: "📊 Detectar mudanças"
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'apps/frontend-nextjs/**'
            backend:
              - 'apps/backend/**'
            claude:
              - '.claude/**'
              - 'scripts/**'

      - name: "⚙️ Configurar deploys"
        id: deploy-config
        run: |
          # Lógica de deploy baseada em mudanças ou inputs manuais
          if [[ "${{ github.event.inputs.deploy_frontend }}" == "true" ]] || [[ "${{ steps.filter.outputs.frontend }}" == "true" ]]; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi

          if [[ "${{ github.event.inputs.deploy_backend }}" == "true" ]] || [[ "${{ steps.filter.outputs.backend }}" == "true" ]]; then
            echo "backend=true" >> $GITHUB_OUTPUT
          else
            echo "backend=false" >> $GITHUB_OUTPUT
          fi

  # Validação completa de secrets para produção
  secrets-validation:
    name: "🔐 Production Secrets & Connectivity"
    runs-on: ubuntu-latest
    needs: production-preparation
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🔍 Validate Production Secrets"
        run: |
          echo "🔐 Validando secrets obrigatórios para PRODUÇÃO..."

          # Secrets obrigatórios para produção
          REQUIRED_SECRETS=(
            "GCP_SERVICE_ACCOUNT_KEY"
            "GCP_PROJECT_ID"
            "GCP_REGION"
            "OPENROUTER_API_KEY"
            "SECRET_KEY"
          )

          MISSING_SECRETS=()

          for secret in "${REQUIRED_SECRETS[@]}"; do
            case $secret in
              "GCP_SERVICE_ACCOUNT_KEY")
                if [ -z "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" ]; then
                  MISSING_SECRETS+=("$secret")
                else
                  echo "✅ $secret disponível"
                fi
                ;;
              "GCP_PROJECT_ID")
                if [ -z "${{ vars.GCP_PROJECT_ID }}" ]; then
                  MISSING_SECRETS+=("$secret")
                else
                  echo "✅ $secret: ${{ vars.GCP_PROJECT_ID }}"
                fi
                ;;
              "GCP_REGION")
                if [ -z "${{ vars.GCP_REGION }}" ]; then
                  MISSING_SECRETS+=("$secret")
                else
                  echo "✅ $secret: ${{ vars.GCP_REGION }}"
                fi
                ;;
              "OPENROUTER_API_KEY")
                if [ -z "${{ secrets.OPENROUTER_API_KEY }}" ]; then
                  MISSING_SECRETS+=("$secret")
                else
                  echo "✅ $secret disponível"
                fi
                ;;
              "SECRET_KEY")
                if [ -z "${{ secrets.SECRET_KEY }}" ]; then
                  MISSING_SECRETS+=("$secret")
                else
                  echo "✅ $secret disponível"
                fi
                ;;
            esac
          done

          if [ ${#MISSING_SECRETS[@]} -ne 0 ]; then
            echo "❌ Secrets obrigatórios ausentes para PRODUÇÃO:"
            printf '  - %s\n' "${MISSING_SECRETS[@]}"
            exit 1
          fi

          echo "✅ Todos os secrets obrigatórios estão disponíveis para produção"

      - name: "📋 Validate Production Variables"
        run: |
          echo "📋 Validando GitHub Variables para PRODUÇÃO Cloud Run..."

          # Variables obrigatórias para Cloud Run apenas
          REQUIRED_VARS=(
            "NEXT_PUBLIC_API_URL_PRODUCTION"
            "GCP_PROJECT_ID"
            "GCP_REGION"
          )

          MISSING_VARS=()

          for var_name in "${REQUIRED_VARS[@]}"; do
            case $var_name in
              "NEXT_PUBLIC_API_URL_PRODUCTION")
                if [ -z "${{ vars.NEXT_PUBLIC_API_URL_PRODUCTION }}" ]; then
                  MISSING_VARS+=("$var_name")
                else
                  echo "✅ $var_name: ${{ vars.NEXT_PUBLIC_API_URL_PRODUCTION }}"
                fi
                ;;
              "GCP_PROJECT_ID")
                if [ -z "${{ vars.GCP_PROJECT_ID }}" ]; then
                  MISSING_VARS+=("$var_name")
                else
                  echo "✅ $var_name: ${{ vars.GCP_PROJECT_ID }}"
                fi
                ;;
              "GCP_REGION")
                if [ -z "${{ vars.GCP_REGION }}" ]; then
                  MISSING_VARS+=("$var_name")
                else
                  echo "✅ $var_name: ${{ vars.GCP_REGION }}"
                fi
                ;;
            esac
          done

          if [ ${#MISSING_VARS[@]} -ne 0 ]; then
            echo "❌ GitHub Variables obrigatórias ausentes para PRODUÇÃO:"
            printf '  - %s\n' "${MISSING_VARS[@]}"
            exit 1
          fi

          echo "✅ Todas as GitHub Variables obrigatórias estão disponíveis para produção Cloud Run"

      - name: "🔗 Test Production Cloud Run Connectivity"
        run: |
          echo "☁️ Testando conectividade Cloud Run para PRODUÇÃO..."

          # Criar arquivo temporário de credenciais
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > /tmp/gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS="/tmp/gcp-key.json"

          # Testar autenticação GCP
          if gcloud auth activate-service-account --key-file=/tmp/gcp-key.json >/dev/null 2>&1; then
            echo "✅ GCP authentication successful para produção"
          else
            echo "❌ GCP authentication failed para produção"
            exit 1
          fi

          # Testar acesso Cloud Run especificamente
          echo "🚀 Validando acesso ao Cloud Run em produção..."
          if gcloud run services list --region=${{ vars.GCP_REGION }} --project=${{ vars.GCP_PROJECT_ID }} >/dev/null 2>&1; then
            echo "✅ Cloud Run production validated - arquitetura 100% Cloud Run"
          else
            echo "❌ Cloud Run access failed"
            exit 1
          fi

          # Cleanup
          rm -f /tmp/gcp-key.json
          echo "🧹 Credenciais temporárias removidas"

  # Análise de Segurança Crítica para Produção
  production-security-analysis:
    name: "🔒 Production Security Analysis"
    runs-on: ubuntu-latest
    needs: [production-preparation, secrets-validation]
    timeout-minutes: 45
    permissions:
      security-events: write
      actions: read
      contents: read
    strategy:
      fail-fast: true
      matrix:
        language: ['javascript', 'python']
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🔍 Initialize Production CodeQL"
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql-config.yml
          queries: security-extended,security-and-quality

      - name: "⚡ Setup Environment"
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "🐍 Setup Python"
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: "📦 Install Dependencies"
        run: |
          if [[ "${{ matrix.language }}" == "javascript" ]]; then
            echo "📦 Installing JS/TS dependencies..."
            npm install
            cd apps/frontend-nextjs && npm ci
          elif [[ "${{ matrix.language }}" == "python" ]]; then
            echo "📦 Installing Python dependencies..."
            cd apps/backend && pip install -r requirements.txt
          fi

      - name: "🔨 Autobuild for CodeQL"
        uses: github/codeql-action/autobuild@v3

      - name: "🔍 Perform Production CodeQL Analysis"
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          output: sarif-results
          upload: true

      - name: "🏥 Critical Medical Security Validation"
        if: matrix.language == 'javascript'
        run: |
          echo "🩺 Executando validação CRÍTICA de segurança médica para PRODUÇÃO..."

          # Verificar padrões sensíveis em arquivos
          echo "🔍 Verificando dados sensíveis em código..."
          SENSITIVE_PATTERNS=(
            "CPF.*[0-9]{11}"
            "CNS.*[0-9]{15}"
            "CRM.*[0-9]+"
            "password.*=.*[\"'].*[\"']"
            "api_key.*=.*[\"'].*[\"']"
            "secret_key.*=.*[\"'].*[\"']"
            "console\.log.*password"
            "console\.log.*secret"
            "console\.log.*key"
          )

          VIOLATIONS_FOUND=false
          for pattern in "${SENSITIVE_PATTERNS[@]}"; do
            if find apps/ -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.py" | xargs grep -l "$pattern" 2>/dev/null; then
              echo "🚨 ALERTA CRÍTICO: Padrão sensível detectado: $pattern"
              VIOLATIONS_FOUND=true
            fi
          done

          if [[ "$VIOLATIONS_FOUND" == "true" ]]; then
            echo "❌ VIOLAÇÕES CRÍTICAS de segurança médica encontradas!"
            echo "::error::Critical security violations detected for production"
            exit 1
          else
            echo "✅ Nenhum dado médico sensível detectado no código"
          fi

  # Build e Deploy Frontend para Produção
  frontend-production-deploy:
    name: "⚛️ Frontend Production Deploy"
    runs-on: ubuntu-latest
    needs: [production-preparation, production-security-analysis, backend-production-deploy]
    if: needs.production-preparation.outputs.deploy-frontend == 'true' && (needs.backend-production-deploy.result == 'success' || needs.backend-production-deploy.result == 'skipped')
    timeout-minutes: 20
    defaults:
      run:
        working-directory: apps/frontend-nextjs
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "⚡ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/frontend-nextjs/package-lock.json

      - name: "📦 Install Dependencies"
        run: npm ci

      - name: "🏗️ Build for Production"
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENVIRONMENT: production
          NEXT_PUBLIC_BACKEND_URL: ${{ vars.NEXT_PUBLIC_API_URL_PRODUCTION }}
          NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        run: |
          echo "🔨 Building for PRODUCTION environment..."
          npm run build

      - name: "🔍 Production Build Validation"
        run: |
          echo "🔨 Validando build de produção..."

          # Verificar se o build standalone foi gerado
          if [ -d ".next/standalone" ]; then
            echo "✅ Build standalone gerado com sucesso"
            echo "📁 Conteúdo da pasta standalone:"
            ls -la .next/standalone/
          else
            echo "❌ Pasta .next/standalone não encontrada"
            echo "📁 Conteúdo atual de .next:"
            ls -la .next/ || echo "Pasta .next não existe"
            exit 1
          fi

          # Verificar se server.js existe
          if [ -f ".next/standalone/apps/frontend-nextjs/server.js" ]; then
            echo "✅ server.js encontrado"
          else
            echo "❌ server.js não encontrado na pasta correta"
            exit 1
          fi

          # Verificar estrutura de páginas
          if [ -d ".next/standalone/apps/frontend-nextjs/.next" ]; then
            echo "✅ Estrutura Next.js preservada no standalone"
          else
            echo "❌ Estrutura Next.js não encontrada no standalone"
            exit 1
          fi

          # Verificar tamanho do build
          BUILD_SIZE=$(du -sh .next/standalone | cut -f1)
          echo "📊 Tamanho do build de produção: $BUILD_SIZE"

      - name: "🔑 Google Cloud Auth"
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: "⚡ Setup Cloud SDK"
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: "🐳 Build and Deploy Frontend to Cloud Run (Production)"
        working-directory: apps/frontend-nextjs
        run: |
          echo "🔨 Building frontend para PRODUÇÃO..."
          echo "⏰ Timestamp início: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🚀 Deploy Cloud Run Frontend - standalone Next.js"

          # Verificar Dockerfile
          if [ -f "Dockerfile" ]; then
            echo "✅ Dockerfile encontrado"
            echo "📋 Tamanho do Dockerfile: $(wc -l < Dockerfile) linhas"
          else
            echo "❌ Dockerfile não encontrado"
            exit 1
          fi

          # Build para produção com cache otimizado
          BUILD_START=$(date +%s)

          gcloud builds submit --tag us-central1-docker.pkg.dev/red-truck-468923-s4/hml-roteiro-dispensacao/roteiro-dispensacao-frontend \
            --timeout=1800s \
            --machine-type=e2-highcpu-4 \
            --disk-size=50GB \
            --verbosity=info .

          BUILD_END=$(date +%s)
          BUILD_DURATION=$((BUILD_END - BUILD_START))
          echo "⏱️ Tempo de build: ${BUILD_DURATION}s ($(($BUILD_DURATION / 60))m $(($BUILD_DURATION % 60))s)"

          echo "🚀 Deploying to Production Cloud Run..."
          echo "⏰ Timestamp deploy: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          gcloud run deploy roteiro-dispensacao-frontend \
            --image us-central1-docker.pkg.dev/red-truck-468923-s4/hml-roteiro-dispensacao/roteiro-dispensacao-frontend \
            --platform managed \
            --region us-central1 \
            --port 8080 \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 10 \
            --allow-unauthenticated \
            --set-env-vars "NODE_ENV=production,NEXT_PUBLIC_BACKEND_URL=${{ vars.NEXT_PUBLIC_API_URL_PRODUCTION }}" \
            --verbosity info

          echo "✅ Frontend Cloud Run deploy concluído!"

  # Deploy Backend para Produção
  backend-production-deploy:
    name: "🔧 Backend Production Deploy"
    runs-on: ubuntu-latest
    needs: [production-preparation, production-security-analysis]
    if: needs.production-preparation.outputs.deploy-backend == 'true'
    timeout-minutes: 60
    defaults:
      run:
        working-directory: apps/backend
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: "🔍 Production Build Analysis"
        id: changes
        run: |
          echo "🔍 Analisando mudanças para build de produção..."

          # Verificar mudanças críticas
          CRITICAL_CHANGES=""
          if git diff --name-only HEAD~1 HEAD | grep -E "(requirements\.txt|Dockerfile|\.dockerignore)"; then
            CRITICAL_CHANGES="dependencies"
            echo "🔄 Mudanças críticas detectadas: dependências/Dockerfile"
          elif git diff --name-only HEAD~1 HEAD | grep -E "apps/backend/"; then
            CRITICAL_CHANGES="code"
            echo "📝 Mudanças de código Python detectadas"
          else
            echo "✅ Nenhuma mudança no backend detectada"
          fi

          # Calcular hash das dependências
          DEPS_HASH=$(sha256sum requirements.txt | cut -d' ' -f1)
          echo "📋 Hash das dependências: $DEPS_HASH"

          # Outputs
          echo "critical-changes=$CRITICAL_CHANGES" >> $GITHUB_OUTPUT
          echo "deps-hash=$DEPS_HASH" >> $GITHUB_OUTPUT

          # Skip build apenas se realmente não há mudanças
          if [ -z "$CRITICAL_CHANGES" ]; then
            echo "skip-build=true" >> $GITHUB_OUTPUT
            echo "⏭️ Build do backend será pulado - sem mudanças"
          else
            echo "skip-build=false" >> $GITHUB_OUTPUT
            echo "🔨 Build do backend necessário para produção"
          fi

      - name: "🔑 Google Cloud Auth"
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: "⚡ Setup Cloud SDK"
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: "🐳 Production Build and Deploy"
        if: steps.changes.outputs.skip-build == 'false'
        working-directory: apps/backend
        run: |
          echo "🔨 Building backend para PRODUÇÃO..."
          echo "⏰ Timestamp início: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "📊 Timeout configurado: 3600s (60 minutos)"
          echo "🐳 Build completo de produção: OpenCV + OCR + PostgreSQL + 60+ dependências"
          echo "💰 Machine type: e2-highcpu-8"
          echo "🎯 Mudanças detectadas: ${{ steps.changes.outputs.critical-changes }}"

          # Verificar Dockerfile
          if [ -f "Dockerfile" ]; then
            echo "✅ Dockerfile encontrado"
            echo "📋 Tamanho do Dockerfile: $(wc -l < Dockerfile) linhas"
          else
            echo "❌ Dockerfile não encontrado"
            exit 1
          fi

          # Build para produção com cache otimizado
          BUILD_START=$(date +%s)

          gcloud builds submit --tag us-central1-docker.pkg.dev/red-truck-468923-s4/hml-roteiro-dispensacao/${{ env.BACKEND_SERVICE }} \
            --timeout=3600s \
            --machine-type=e2-highcpu-8 \
            --disk-size=100GB \
            --verbosity=info .

          BUILD_END=$(date +%s)
          BUILD_DURATION=$((BUILD_END - BUILD_START))
          BUILD_COST=$(echo "scale=3; $BUILD_DURATION * 0.024 / 60" | bc -l)
          echo "⏱️ Tempo de build: ${BUILD_DURATION}s ($(($BUILD_DURATION / 60))m $(($BUILD_DURATION % 60))s)"
          echo "💰 Custo estimado: \$${BUILD_COST} USD"

          echo "🚀 Deploying to Production Cloud Run..."
          echo "⏰ Timestamp deploy: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          gcloud run deploy ${{ env.BACKEND_SERVICE }} \
            --image us-central1-docker.pkg.dev/red-truck-468923-s4/hml-roteiro-dispensacao/${{ env.BACKEND_SERVICE }} \
            --platform managed \
            --region ${{ vars.GCP_REGION }} \
            --allow-unauthenticated \
            --timeout=900 \
            --memory=2Gi \
            --cpu=2 \
            --set-env-vars "ENVIRONMENT=production,LGPD_MODE=strict,PROJECT_ID=red-truck-468923-s4" \
            --max-instances=20 \
            --min-instances=2

  # Testes pós-deploy em produção
  production-post-deploy-tests:
    name: "🧪 Production Post-Deploy Tests"
    runs-on: ubuntu-latest
    needs: [frontend-production-deploy, backend-production-deploy]
    if: always() && (needs.frontend-production-deploy.result == 'success' || needs.backend-production-deploy.result == 'success')
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: "🔑 Google Cloud Auth for Health Checks"
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: "⚡ Setup Cloud SDK for Health Checks"
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: "🌐 Production Frontend Health Check"
        if: needs.frontend-production-deploy.result == 'success'
        run: |
          echo "🔍 Verificando saúde do frontend PRODUÇÃO..."
          # Obter URL do Cloud Run Frontend
          FRONTEND_URL=$(gcloud run services describe roteiro-dispensacao-frontend --region=${{ vars.GCP_REGION }} --format='value(status.url)' 2>/dev/null || echo "")

          if [ -z "$FRONTEND_URL" ]; then
            echo "⚠️ Frontend Cloud Run não encontrado, usando URL de fallback"
            FRONTEND_URL="https://roteiro-dispensacao-frontend-339202208157.us-central1.run.app"
          fi

          echo "🌐 URL de produção: $FRONTEND_URL"

          # Aguardar propagação com retry
          echo "⏳ Aguardando propagação do deploy de produção..."
          for i in {1..8}; do
            echo "🔄 Tentativa $i/8..."

            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL")
            echo "📡 HTTP Code: $HTTP_CODE"

            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ Frontend produção respondendo (HTTP 200)"

              # Verificar conteúdo
              CONTENT=$(curl -s "$FRONTEND_URL")
              if echo "$CONTENT" | grep -q "Next.js\|__NEXT_DATA__\|_app\|DOCTYPE html"; then
                echo "✅ Conteúdo HTML/Next.js detectado"
                echo "✅ Frontend PRODUÇÃO confirmado como funcional"
                exit 0
              else
                echo "⚠️ Resposta sem conteúdo HTML esperado"
              fi
            else
              echo "❌ Frontend retornou HTTP $HTTP_CODE"
            fi

            if [ $i -lt 8 ]; then
              echo "⏳ Aguardando 45s antes da próxima tentativa..."
              sleep 45
            fi
          done

          echo "❌ Frontend PRODUÇÃO falhou após 8 tentativas"
          exit 1

      - name: "🔧 Production Backend Health Check"
        if: needs.backend-production-deploy.result == 'success'
        run: |
          echo "🔍 Verificando saúde do backend PRODUÇÃO..."
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region=${{ vars.GCP_REGION }} --format='value(status.url)')

          # Health check com versionamento correto
          if curl -f -s "$BACKEND_URL/api/v1/health" > /dev/null; then
            echo "✅ Backend PRODUÇÃO respondendo"
          else
            echo "❌ Backend PRODUÇÃO não está respondendo"
            exit 1
          fi

      - name: "🏥 Production Medical Endpoints Test"
        run: |
          echo "🩺 Testando endpoints médicos em PRODUÇÃO..."
          # Obter URL do Cloud Run Frontend
          FRONTEND_URL=$(gcloud run services describe roteiro-dispensacao-frontend --region=${{ vars.GCP_REGION }} --format='value(status.url)' 2>/dev/null || echo "")

          if [ -z "$FRONTEND_URL" ]; then
            echo "⚠️ Frontend Cloud Run não encontrado, usando URL de fallback"
            FRONTEND_URL="https://roteiro-dispensacao-frontend-339202208157.us-central1.run.app"
          fi

          # Testar páginas médicas críticas
          MEDICAL_PAGES=("/modules/hanseniase" "/resources/calculator" "/chat")

          for page in "${MEDICAL_PAGES[@]}"; do
            if curl -f -s "$FRONTEND_URL$page" > /dev/null; then
              echo "✅ Página médica $page acessível em produção"
            else
              echo "⚠️ Página médica $page pode ter problemas em produção"
            fi
          done

  # Monitoramento e notificações para produção
  production-monitoring:
    name: "📊 Production Monitoring"
    runs-on: ubuntu-latest
    needs: [production-post-deploy-tests]
    if: success()
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "✅ Production Deploy Summary"
        run: |
          echo "## 🚀 Deploy de Produção Concluído" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Status dos Serviços em Produção:" >> $GITHUB_STEP_SUMMARY
          echo "| Serviço | Status | URL |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ✅ | Cloud Run Production |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ${{ needs.backend-production-deploy.result == 'success' && '✅' || '⏭️' }} | Cloud Run Production |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏥 Funcionalidades Médicas em Produção:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ LGPD Compliance validado" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Segurança médica verificada" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Personas Dr. Gasnelio e GA" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Calculadoras de dosagem" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ API versionada (/api/v1/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Sistema em produção totalmente funcional!**" >> $GITHUB_STEP_SUMMARY

      - name: "📱 Production Success Notification"
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [[ -n "$TELEGRAM_TOKEN" && -n "$TELEGRAM_CHAT_ID" ]]; then
            echo "📱 Enviando notificação de sucesso para PRODUÇÃO..."

            MESSAGE="🚀 <b>PRODUÇÃO Deploy Concluído com Sucesso</b>%0A"
            MESSAGE="${MESSAGE}%0A🟢 <b>Status:</b> PRODUÇÃO ATIVA"
            MESSAGE="${MESSAGE}%0A🎯 <b>Branch:</b> ${{ github.ref_name }}"
            MESSAGE="${MESSAGE}%0A⏰ <b>Horário:</b> $(date '+%H:%M - %d/%m/%Y')"
            MESSAGE="${MESSAGE}%0A%0A🏥 <b>Funcionalidades Médicas:</b>%0A"
            MESSAGE="${MESSAGE}✅ LGPD Compliance em produção%0A"
            MESSAGE="${MESSAGE}✅ Segurança médica validada%0A"
            MESSAGE="${MESSAGE}✅ Protocolos médicos ativos%0A"
            MESSAGE="${MESSAGE}✅ Personas Dr. Gasnelio e GA%0A"
            MESSAGE="${MESSAGE}✅ API versionada funcionando%0A"
            MESSAGE="${MESSAGE}%0A🌐 <b>Produção:</b> Cloud Run Active"
            MESSAGE="${MESSAGE}%0A👤 <b>Autor:</b> ${{ github.actor }}"
            MESSAGE="${MESSAGE}%0A🔗 <b>Commit:</b> <a href=\"${{ github.event.head_commit.url }}\">${{ github.sha }}</a>"

            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="$MESSAGE" \
              -d parse_mode="HTML" \
              -d disable_web_page_preview="true" >/dev/null

            echo "✅ Notificação de produção enviada"
          else
            echo "⚠️ Tokens Telegram não configurados"
          fi

      - name: "🚨 Production Failure Alert"
        if: failure() || needs.production-post-deploy-tests.result == 'failure'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [[ -n "$TELEGRAM_TOKEN" && -n "$TELEGRAM_CHAT_ID" ]]; then
            echo "🚨 Enviando alerta CRÍTICO de falha em PRODUÇÃO..."

            ALERT_MESSAGE="🚨 <b>ALERTA CRÍTICO - PRODUÇÃO FALHOU</b>%0A"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0A❌ <b>Status:</b> FALHA CRÍTICA NO PIPELINE"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0A🎯 <b>Branch:</b> ${{ github.ref_name }}"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0A⏰ <b>Horário:</b> $(date '+%H:%M - %d/%m/%Y')"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0A%0A⚠️ <b>AÇÃO URGENTE NECESSÁRIA</b>"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0A🔗 <b>Workflow:</b> <a href=\"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\">Ver Logs</a>"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0A👤 <b>Responsável:</b> ${{ github.actor }}"
            ALERT_MESSAGE="${ALERT_MESSAGE}%0A%0A🏥 <b>Impacto:</b> Sistema de produção pode estar comprometido"

            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="$ALERT_MESSAGE" \
              -d parse_mode="HTML" \
              -d disable_web_page_preview="true" >/dev/null

            echo "🚨 Alerta CRÍTICO de produção enviado"
          else
            echo "⚠️ Tokens Telegram não configurados"
          fi