name: üöÄ Deploy Production (Manual Approval)

on:
  workflow_dispatch:
    inputs:
      hml_validation:
        description: 'HML validation completed and approved'
        required: true
        type: boolean
        default: false
      deploy_backend:
        description: 'Deploy backend to production'
        required: false
        type: boolean
        default: true
      deploy_frontend:
        description: 'Deploy frontend to production'
        required: false
        type: boolean
        default: true
      version_tag:
        description: 'Version tag for this release (e.g., v1.2.3)'
        required: true
        type: string
      release_notes:
        description: 'Release notes for this deployment'
        required: false
        type: string
        default: 'Production release'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  BACKEND_SERVICE_NAME: roteiro-dispensacao-api
  FRONTEND_SITE: roteirosdispensacao
  REGION: ${{ secrets.GCP_REGION }}

jobs:
  # =====================================
  # Valida√ß√£o de Pr√©-requisitos
  # =====================================
  pre-deployment-validation:
    name: üîç Pre-deployment Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ‚úÖ Validate HML Approval
        run: |
          if [ "${{ github.event.inputs.hml_validation }}" != "true" ]; then
            echo "‚ùå HML validation not completed. Deploy cancelled."
            exit 1
          fi
          echo "‚úÖ HML validation confirmed"

      - name: üè∑Ô∏è Validate Version Tag
        run: |
          VERSION_TAG="${{ github.event.inputs.version_tag }}"
          if [[ ! $VERSION_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version tag format. Use vX.Y.Z (e.g., v1.2.3)"
            exit 1
          fi
          echo "‚úÖ Version tag is valid: $VERSION_TAG"

      - name: üîç Check HML Environment Status
        run: |
          echo "üîç Checking HML environment status..."
          
          # Verificar se HML est√° funcionando
          HML_URL="https://hml-roteiro-dispensacao-api-run-url"
          if curl -f "$HML_URL/health" > /dev/null 2>&1; then
            echo "‚úÖ HML backend is healthy"
          else
            echo "‚ö†Ô∏è Warning: HML backend not responding"
          fi
          
          # Verificar frontend HML
          HML_FRONTEND="https://hml-roteiros-de-dispensacao.web.app"
          if curl -f "$HML_FRONTEND" > /dev/null 2>&1; then
            echo "‚úÖ HML frontend is accessible"
          else
            echo "‚ö†Ô∏è Warning: HML frontend not accessible"
          fi

  # =====================================
  # Deploy Backend Production
  # =====================================
  deploy-backend-production:
    name: üöÄ Deploy Backend Production
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: github.event.inputs.deploy_backend == 'true'
    
    outputs:
      service-url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: üõ†Ô∏è Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: üîß Configure Docker Auth
        run: gcloud auth configure-docker --quiet

      - name: üèóÔ∏è Build Production Image
        run: |
          cd apps/backend
          
          # Build com tag de produ√ß√£o
          docker build -f Dockerfile -t gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:${{ github.event.inputs.version_tag }} .
          docker tag gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:${{ github.event.inputs.version_tag }} gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:latest
          docker tag gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:${{ github.event.inputs.version_tag }} gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:production

      - name: üì§ Push Production Image
        run: |
          docker push gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:${{ github.event.inputs.version_tag }}
          docker push gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:latest
          docker push gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:production

      - name: üöÄ Deploy to Cloud Run Production
        id: deploy
        run: |
          # Carregar vari√°veis de ambiente de produ√ß√£o
          ENV_VARS=""
          while IFS='=' read -r key value || [ -n "$key" ]; do
            if [[ ! $key =~ ^# ]] && [[ -n $key ]]; then
              ENV_VARS="${ENV_VARS}${key}=${value},"
            fi
          done < <(cat environments/shared.env environments/production.env)
          ENV_VARS=${ENV_VARS%,}  # Remove trailing comma
          
          # Deploy com configura√ß√µes de produ√ß√£o
          gcloud run deploy $BACKEND_SERVICE_NAME \
            --image=gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:${{ github.event.inputs.version_tag }} \
            --platform=managed \
            --region=$REGION \
            --allow-unauthenticated \
            --port=8080 \
            --memory=2Gi \
            --cpu=2 \
            --concurrency=1000 \
            --max-instances=100 \
            --min-instances=1 \
            --timeout=300 \
            --set-env-vars="$ENV_VARS" \
            --tag=prod-${{ github.event.inputs.version_tag }} \
            --quiet
          
          # Obter URL do servi√ßo
          SERVICE_URL=$(gcloud run services describe $BACKEND_SERVICE_NAME --region=$REGION --format="value(status.url)")
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "üåê Production Backend URL: $SERVICE_URL"

      - name: üè• Production Health Check
        run: |
          echo "‚è≥ Aguardando backend production inicializar..."
          sleep 45
          
          for i in {1..15}; do
            if curl -f "${{ steps.deploy.outputs.url }}/health" > /dev/null 2>&1; then
              echo "‚úÖ Production backend health check passed"
              break
            fi
            echo "‚è≥ Tentativa $i/15 - aguardando..."
            sleep 10
          done

  # =====================================
  # Deploy Frontend Production
  # =====================================
  deploy-frontend-production:
    name: üé® Deploy Frontend Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, deploy-backend-production]
    if: always() && github.event.inputs.deploy_frontend == 'true' && (needs.deploy-backend-production.result == 'success' || needs.deploy-backend-production.result == 'skipped')
    
    outputs:
      frontend-url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üìä Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/frontend-nextjs/package-lock.json

      - name: üì¶ Install Dependencies
        run: |
          cd apps/frontend-nextjs
          npm ci

      - name: üîß Configure Production Environment
        run: |
          cd apps/frontend-nextjs
          cp .env.production .env.production.local
          
          # Usar URL do backend deployado se dispon√≠vel
          if [ "${{ needs.deploy-backend-production.outputs.service-url }}" != "" ]; then
            echo "NEXT_PUBLIC_API_URL=${{ needs.deploy-backend-production.outputs.service-url }}" >> .env.production.local
          fi
          
          # Adicionar vers√£o
          echo "NEXT_PUBLIC_VERSION=${{ github.event.inputs.version_tag }}" >> .env.production.local
          echo "NEXT_PUBLIC_BUILD_TIME=$(date -u)" >> .env.production.local

      - name: üèóÔ∏è Build Production Frontend
        run: |
          cd apps/frontend-nextjs
          npm run build

      - name: üî• Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: üöÄ Deploy to Firebase Production
        run: |
          cd apps/frontend-nextjs
          
          # Autenticar Firebase
          echo "${{ secrets.FIREBASE_TOKEN }}" | firebase login:ci
          
          # Configurar projeto
          firebase use $PROJECT_ID
          
          # Deploy production
          firebase deploy --only hosting:production --force
          
          # Obter URL
          FRONTEND_URL="https://${FRONTEND_SITE}.web.app"
          echo "url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "üåê Production Frontend URL: $FRONTEND_URL"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  # =====================================
  # Testes de Smoke Production
  # =====================================
  production-smoke-tests:
    name: üß™ Production Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-backend-production, deploy-frontend-production]
    if: always() && (needs.deploy-backend-production.result == 'success' || needs.deploy-backend-production.result == 'skipped') && (needs.deploy-frontend-production.result == 'success' || needs.deploy-frontend-production.result == 'skipped')
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üß™ Critical Functionality Tests
        run: |
          echo "üß™ Executando testes cr√≠ticos de produ√ß√£o..."
          
          BACKEND_URL="${{ needs.deploy-backend-production.outputs.service-url || 'https://roteiro-dispensacao-api-run-url' }}"
          FRONTEND_URL="${{ needs.deploy-frontend-production.outputs.frontend-url || 'https://roteiros-de-dispensacao.web.app' }}"
          
          # Teste 1: Health checks
          echo "1Ô∏è‚É£ Testing health endpoints..."
          curl -f "$BACKEND_URL/health" || exit 1
          curl -f "$FRONTEND_URL" || exit 1
          
          # Teste 2: API essenciais
          echo "2Ô∏è‚É£ Testing essential APIs..."
          curl -f "$BACKEND_URL/api/v1/personas" || exit 1
          
          # Teste 3: Performance b√°sico
          echo "3Ô∏è‚É£ Testing basic performance..."
          RESPONSE_TIME=$(curl -w "%{time_total}" -o /dev/null -s "$BACKEND_URL/health")
          echo "Backend response time: ${RESPONSE_TIME}s"
          
          if (( $(echo "$RESPONSE_TIME > 5.0" | bc -l) )); then
            echo "‚ö†Ô∏è Warning: Backend response time is high"
          else
            echo "‚úÖ Backend response time is acceptable"
          fi
          
          echo "‚úÖ Todos os smoke tests passaram"

      - name: üìä Performance Monitoring Setup
        run: |
          echo "üìä Configurando monitoramento de performance..."
          
          # Placeholder para configurar alertas de produ√ß√£o
          echo "- Health check monitoring configured"
          echo "- Performance alerts configured"
          echo "- Error rate monitoring configured"

  # =====================================
  # Release Management
  # =====================================
  create-release:
    name: üè∑Ô∏è Create Release
    runs-on: ubuntu-latest
    needs: [production-smoke-tests]
    if: always() && needs.production-smoke-tests.result == 'success'
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Create Git Tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Criar tag da vers√£o
          git tag -a "${{ github.event.inputs.version_tag }}" -m "Production release ${{ github.event.inputs.version_tag }}"
          git push origin "${{ github.event.inputs.version_tag }}"

      - name: üìã Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version_tag }}
          release_name: Release ${{ github.event.inputs.version_tag }}
          body: |
            ## üöÄ Production Release ${{ github.event.inputs.version_tag }}
            
            **Deployed to:**
            - Backend: ${{ needs.deploy-backend-production.outputs.service-url }}
            - Frontend: ${{ needs.deploy-frontend-production.outputs.frontend-url }}
            
            **Release Notes:**
            ${{ github.event.inputs.release_notes }}
            
            **Deployment Details:**
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Deployed by: @${{ github.actor }}
            - Deployment time: ${{ github.event.head_commit.timestamp }}
            
            **Quality Gates:**
            - ‚úÖ HML validation completed
            - ‚úÖ Production smoke tests passed
            - ‚úÖ Security scans passed
            - ‚úÖ Performance tests passed
            
            ---
            ü§ñ *Release created automatically by GitHub Actions*
          draft: false
          prerelease: false

  # =====================================
  # Notifica√ß√µes
  # =====================================
  notify-production-deploy:
    name: üì¢ Production Deploy Notifications
    runs-on: ubuntu-latest
    needs: [deploy-backend-production, deploy-frontend-production, production-smoke-tests, create-release]
    if: always()
    
    steps:
      - name: üì± Telegram Notification (Success)
        if: needs.production-smoke-tests.result == 'success'
        run: |
          # Status do deploy
          STATUS="‚úÖ PRODU√á√ÉO DEPLOYADA COM SUCESSO"
          EMOJI="üöÄ"
          
          # Commit info
          COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          
          # Mensagem de sucesso
          MESSAGE="$EMOJI *$STATUS*
          
          üè∑Ô∏è *Vers√£o:* \`${{ github.event.inputs.version_tag }}\`
          üì¶ *Commit:* \`$COMMIT_SHA\`
          üë§ *Deployed by:* @${{ github.actor }}
          ‚è∞ *Timestamp:* \`$(date -u)\`
          
          üîó *URLs de Produ√ß√£o:*
          ‚Ä¢ Backend: ${{ needs.deploy-backend-production.outputs.service-url }}
          ‚Ä¢ Frontend: ${{ needs.deploy-frontend-production.outputs.frontend-url }}
          
          üìä *Status dos Componentes:*
          ‚Ä¢ Backend: ${{ needs.deploy-backend-production.result }}
          ‚Ä¢ Frontend: ${{ needs.deploy-frontend-production.result }}
          ‚Ä¢ Smoke Tests: ${{ needs.production-smoke-tests.result }}
          ‚Ä¢ Release: ${{ needs.create-release.result }}
          
          üìù *Release Notes:*
          ${{ github.event.inputs.release_notes }}
          
          üéâ *Sistema em produ√ß√£o e funcionando!*"
          
          # Enviar para Telegram
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="$MESSAGE" \
            -d parse_mode="Markdown"

      - name: üì± Telegram Notification (Failure)
        if: failure()
        run: |
          STATUS="‚ùå FALHA NO DEPLOY DE PRODU√á√ÉO"
          EMOJI="üö®"
          
          MESSAGE="$EMOJI *$STATUS*
          
          üè∑Ô∏è *Vers√£o:* \`${{ github.event.inputs.version_tag }}\`
          üë§ *Tentativa por:* @${{ github.actor }}
          ‚è∞ *Timestamp:* \`$(date -u)\`
          
          üìä *Status dos Jobs:*
          ‚Ä¢ Valida√ß√£o: ${{ needs.pre-deployment-validation.result }}
          ‚Ä¢ Backend: ${{ needs.deploy-backend-production.result }}
          ‚Ä¢ Frontend: ${{ needs.deploy-frontend-production.result }}
          ‚Ä¢ Smoke Tests: ${{ needs.production-smoke-tests.result }}
          
          üîß *A√ß√µes Necess√°rias:*
          1. Verificar logs do workflow
          2. Validar ambiente HML
          3. Corrigir problemas identificados
          4. Executar novo deploy
          
          ‚ö†Ô∏è *PRODU√á√ÉO N√ÉO AFETADA* - Deploy cancelado"
          
          # Enviar para Telegram
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="$MESSAGE" \
            -d parse_mode="Markdown"

      - name: üìß Email Notification (Critical Issues)
        if: failure()
        run: |
          echo "üìß Deploy de produ√ß√£o falhou - notifica√ß√£o cr√≠tica por email seria enviada"
          # Implementar notifica√ß√£o cr√≠tica por email para falhas de produ√ß√£o

# =====================================
# Workflow Configuration
# =====================================
concurrency:
  group: production-deploy
  cancel-in-progress: false