name: 🏗️ Deploy HML (Homologação)

on:
  push:
    branches: [ hml ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy (skip some checks)'
        required: false
        default: 'false'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: hml-roteiro-dispensacao-api
  REGION: ${{ secrets.GCP_REGION }}
  FRONTEND_SITE: hml-roteiros-de-dispensacao

jobs:
  # =====================================
  # Quality Gates com Snyk
  # =====================================
  quality-gates:
    name: 🔍 Quality Gates & Security
    runs-on: ubuntu-latest
    if: github.event.inputs.force_deploy != 'true'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📊 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/frontend-nextjs/package-lock.json

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: apps/backend/requirements.txt

      # Snyk Security Scanning
      - name: 🔒 Run Snyk Security Scan
        uses: snyk/actions/setup@master
      
      - name: 🔍 Snyk Code Analysis
        uses: snyk/actions/node@master
        continue-on-error: false
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --fail-on=all
          command: code test

      - name: 📦 Snyk Open Source Scan
        uses: snyk/actions/node@master
        continue-on-error: false
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --fail-on=all
          command: test

      # Frontend Quality Gates
      - name: 📱 Install Frontend Dependencies
        run: |
          cd apps/frontend-nextjs
          npm ci

      - name: 🧪 Frontend Tests & Coverage
        run: |
          cd apps/frontend-nextjs
          npm run test:coverage
          
      - name: 📊 Check Coverage Threshold (95%)
        run: |
          cd apps/frontend-nextjs
          COVERAGE=$(npm run test:coverage:check | grep -o '[0-9]*\.[0-9]*' | tail -1)
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 95" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below 95% threshold"
            exit 1
          fi
          echo "✅ Coverage $COVERAGE% meets 95% threshold"

      - name: 🔍 Frontend Lint & TypeScript
        run: |
          cd apps/frontend-nextjs
          npm run lint
          npm run type-check

      # Backend Quality Gates
      - name: 🐍 Install Backend Dependencies
        run: |
          cd apps/backend
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 mypy

      - name: 🧪 Backend Tests & Coverage
        run: |
          cd apps/backend
          pytest --cov=. --cov-report=term-missing --cov-fail-under=95

      - name: 🔍 Backend Code Quality
        run: |
          cd apps/backend
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics
          mypy . --ignore-missing-imports

      # Build Test
      - name: 🏗️ Test Docker Build
        run: |
          cd apps/backend
          docker build -f Dockerfile.hml -t test-hml-build .

  # =====================================
  # Deploy Backend (Cloud Run)
  # =====================================
  deploy-backend:
    name: 🚀 Deploy Backend HML
    runs-on: ubuntu-latest
    needs: quality-gates
    if: always() && (needs.quality-gates.result == 'success' || github.event.inputs.force_deploy == 'true')
    
    outputs:
      service-url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🛠️ Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🔧 Configure Docker Auth
        run: gcloud auth configure-docker --quiet

      - name: 🏗️ Build Docker Image
        run: |
          cd apps/backend
          docker build -f Dockerfile.hml -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
          docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

      - name: 📤 Push Docker Image
        run: |
          docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
          docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

      - name: 🚀 Deploy to Cloud Run
        id: deploy
        run: |
          # Carregar variáveis de ambiente
          ENV_VARS=""
          while IFS='=' read -r key value || [ -n "$key" ]; do
            if [[ ! $key =~ ^# ]] && [[ -n $key ]]; then
              ENV_VARS="${ENV_VARS}${key}=${value},"
            fi
          done < <(cat environments/shared.env environments/hml.env)
          ENV_VARS=${ENV_VARS%,}  # Remove trailing comma
          
          # Deploy no Cloud Run
          gcloud run deploy $SERVICE_NAME \
            --image=gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
            --platform=managed \
            --region=$REGION \
            --allow-unauthenticated \
            --port=8080 \
            --memory=1Gi \
            --cpu=1 \
            --concurrency=100 \
            --max-instances=10 \
            --min-instances=0 \
            --timeout=300 \
            --set-env-vars="$ENV_VARS" \
            --tag=hml-$(echo $GITHUB_SHA | cut -c1-7) \
            --quiet
          
          # Obter URL do serviço
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "🌐 Backend URL: $SERVICE_URL"

      - name: 🏥 Backend Health Check
        run: |
          echo "⏳ Aguardando backend inicializar..."
          sleep 30
          
          for i in {1..10}; do
            if curl -f "${{ steps.deploy.outputs.url }}/health" > /dev/null 2>&1; then
              echo "✅ Backend health check passed"
              break
            fi
            echo "⏳ Tentativa $i/10 - aguardando..."
            sleep 10
          done

  # =====================================
  # Deploy Frontend (Firebase)
  # =====================================
  deploy-frontend:
    name: 🎨 Deploy Frontend HML
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: always() && needs.deploy-backend.result == 'success'
    
    outputs:
      frontend-url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📊 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/frontend-nextjs/package-lock.json

      - name: 📦 Install Dependencies
        run: |
          cd apps/frontend-nextjs
          npm ci

      - name: 🔧 Configure Environment
        run: |
          cd apps/frontend-nextjs
          cp .env.hml .env.production.local
          echo "NEXT_PUBLIC_API_URL=${{ needs.deploy-backend.outputs.service-url }}" >> .env.production.local

      - name: 🏗️ Build Frontend
        run: |
          cd apps/frontend-nextjs
          npm run build

      - name: 🔥 Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: 🚀 Deploy to Firebase
        run: |
          cd apps/frontend-nextjs
          
          # Autenticar Firebase
          echo "${{ secrets.FIREBASE_TOKEN }}" | firebase login:ci
          
          # Configurar projeto e target
          firebase use $PROJECT_ID
          firebase target:apply hosting hml $FRONTEND_SITE
          
          # Deploy usando configuração HML
          firebase deploy --only hosting:hml --config firebase.hml.json --force
          
          # Obter URL
          FRONTEND_URL="https://${FRONTEND_SITE}.web.app"
          echo "url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "🌐 Frontend URL: $FRONTEND_URL"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  # =====================================
  # Reset Dados HML & Smoke Tests
  # =====================================
  post-deploy:
    name: 🧪 Post-Deploy & Tests
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always() && needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔄 Reset HML Data
        run: |
          echo "🌱 Resetando dados HML..."
          bash scripts/seed-hml-data.sh
        env:
          SERVICE_URL: ${{ needs.deploy-backend.outputs.service-url }}
          SEED_TOKEN: ${{ secrets.SECRET_KEY }}

      - name: 🧪 Smoke Tests
        run: |
          echo "🧪 Executando smoke tests..."
          
          BACKEND_URL="${{ needs.deploy-backend.outputs.service-url }}"
          FRONTEND_URL="${{ needs.deploy-frontend.outputs.frontend-url }}"
          
          # Health checks
          curl -f "$BACKEND_URL/health" || exit 1
          curl -f "$BACKEND_URL/api/v1/personas" || exit 1
          curl -f "$FRONTEND_URL" || exit 1
          
          echo "✅ Todos os smoke tests passaram"

      - name: 📊 Generate Test Report
        if: always()
        run: |
          cat > test-report.md << EOF
          # 📋 HML Deploy Report
          
          **🚀 Deploy:** \`$GITHUB_SHA\`
          **🌿 Branch:** \`$GITHUB_REF_NAME\`
          **⏰ Timestamp:** \`$(date -u)\`
          
          ## 🔗 URLs
          - **Backend:** ${{ needs.deploy-backend.outputs.service-url }}
          - **Frontend:** ${{ needs.deploy-frontend.outputs.frontend-url }}
          
          ## ✅ Status
          - Quality Gates: ${{ needs.quality-gates.result }}
          - Backend Deploy: ${{ needs.deploy-backend.result }}
          - Frontend Deploy: ${{ needs.deploy-frontend.result }}
          - Smoke Tests: ${{ job.status }}
          
          ## 🧪 Next Steps
          1. **Testes Manuais:** Validar funcionalidades críticas
          2. **QA Review:** Aprovar para produção
          3. **Deploy Prod:** Executar workflow de produção
          
          ---
          🤖 *Relatório gerado automaticamente pelo GitHub Actions*
          EOF
          
          echo "📊 Relatório de deploy criado"

  # =====================================
  # Notificações
  # =====================================
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [quality-gates, deploy-backend, deploy-frontend, post-deploy]
    if: always()
    
    steps:
      - name: 📱 Telegram Notification (Admins)
        if: always()
        run: |
          # Status do deploy
          if [[ "${{ needs.post-deploy.result }}" == "success" ]]; then
            STATUS="✅ SUCESSO"
            EMOJI="🎉"
          else
            STATUS="❌ FALHOU"
            EMOJI="🚨"
          fi
          
          # Commit info
          COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          COMMIT_MSG=$(git log -1 --pretty=%B | head -1)
          
          # Mensagem
          MESSAGE="$EMOJI *Deploy HML $STATUS*
          
          📦 *Commit:* \`$COMMIT_SHA\`
          📝 *Mensagem:* $COMMIT_MSG
          🌿 *Branch:* \`$GITHUB_REF_NAME\`
          ⏰ *Timestamp:* \`$(date -u)\`
          
          🔗 *URLs:*
          • Backend: ${{ needs.deploy-backend.outputs.service-url }}
          • Frontend: ${{ needs.deploy-frontend.outputs.frontend-url }}
          
          📊 *Status:*
          • Quality Gates: ${{ needs.quality-gates.result }}
          • Backend: ${{ needs.deploy-backend.result }}
          • Frontend: ${{ needs.deploy-frontend.result }}
          • Tests: ${{ needs.post-deploy.result }}
          
          👥 *Próximos Passos:*
          1. Revisar ambiente HML
          2. Executar testes manuais
          3. Aprovar para produção se OK"
          
          # Enviar para Telegram
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="$MESSAGE" \
            -d parse_mode="Markdown"

      - name: 📧 Email Notification (On Failure)
        if: failure()
        run: |
          echo "📧 Deploy HML falhou - notificação por email seria enviada aqui"
          # Implementar notificação por email se necessário

# =====================================
# Workflow Summary
# =====================================
concurrency:
  group: hml-deploy-${{ github.ref }}
  cancel-in-progress: true