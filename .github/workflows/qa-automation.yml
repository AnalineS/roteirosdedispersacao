name: "[QA] Sistema de QA Inteligente"

on:
  schedule:
    - cron: '0 2 * * 1'  # Apenas SEGUNDA-FEIRA (economia recursos)
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, hml]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Suite de testes para executar'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'security'
          - 'performance'
          - 'integration'
          - 'regression'
      environment:
        description: 'Ambiente para testar'
        required: true
        default: 'hml'
        type: choice
        options:
          - 'hml'
          - 'prod'

permissions:
  contents: read
  pull-requests: write
  security-events: write
  actions: read

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

jobs:
  analyze-changes:
    name: "[ANALYZE] Analisar Impacto das Mudan√ßas"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      risk-level: ${{ steps.filter.outputs.risk_level || steps.analyze.outputs.risk_level }}
      test-strategy: ${{ steps.filter.outputs.test_strategy || steps.analyze.outputs.test_strategy }}
      components-affected: ${{ steps.filter.outputs.components_affected || steps.analyze.outputs.components_affected }}
      should-run-tests: ${{ steps.filter.outputs.should_run_tests }}
      
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
        with:
          fetch-depth: 10
          
      # PATH-FILTER OTIMIZADO: Detec√ß√£o inteligente de risco
      - name: "[FILTER] An√°lise R√°pida de Paths"
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36  # v3.0.2
        id: filter
        with:
          filters: |
            critical:
              - '**/auth/**'
              - '**/security/**' 
              - '**/payment/**'
              - '**/database/**'
              - '**/*secret*/**'
            high:
              - 'apps/backend/**/*.py'
              - 'apps/frontend-nextjs/**/api/**'
              - '**/requirements*.txt'
              - '**/package*.json'
            medium:
              - 'apps/frontend-nextjs/**/*.tsx'
              - 'apps/frontend-nextjs/**/*.ts'
              - '.github/workflows/**'
            docs:
              - '**/*.md'
              - '**/README*'
              - 'docs/**'
      
      - name: "[FILTER] Determinar Estrat√©gia Baseada em Paths"
        id: path-strategy
        run: |
          echo "üîç Analisando paths alterados..."
          
          # Determinar n√≠vel de risco pelos paths
          if [ '${{ steps.filter.outputs.critical }}' = 'true' ]; then
            RISK_LEVEL="critical"
            TEST_STRATEGY="comprehensive"
            COMPONENTS="security backend frontend"
            SHOULD_RUN="true"
            echo "üö® RISCO CR√çTICO: Componentes de seguran√ßa alterados!"
          elif [ '${{ steps.filter.outputs.high }}' = 'true' ]; then
            RISK_LEVEL="high" 
            TEST_STRATEGY="extended"
            COMPONENTS="backend api"
            SHOULD_RUN="true"
            echo "‚ö†Ô∏è RISCO ALTO: Backend/API alterados"
          elif [ '${{ steps.filter.outputs.medium }}' = 'true' ]; then
            RISK_LEVEL="medium"
            TEST_STRATEGY="basic"
            COMPONENTS="frontend"
            SHOULD_RUN="true"
            echo "üìã RISCO M√âDIO: Frontend alterado"
          elif [ '${{ steps.filter.outputs.docs }}' = 'true' ]; then
            RISK_LEVEL="low"
            TEST_STRATEGY="none"
            COMPONENTS="docs"
            SHOULD_RUN="false"
            echo "üìö APENAS DOCS: Pulando testes"
          else
            RISK_LEVEL="unknown"
            TEST_STRATEGY="fallback"
            COMPONENTS="unknown"
            SHOULD_RUN="true"
            echo "‚ùì RISCO DESCONHECIDO: Executando an√°lise completa"
          fi
          
          echo "risk_level=$RISK_LEVEL" >> $GITHUB_OUTPUT
          echo "test_strategy=$TEST_STRATEGY" >> $GITHUB_OUTPUT
          echo "components_affected=$COMPONENTS" >> $GITHUB_OUTPUT
          echo "should_run_tests=$SHOULD_RUN" >> $GITHUB_OUTPUT
          
      - name: "[ANALYZE] Analise Inteligente de Impacto"
        id: analyze
        run: |
          echo "Analisando impacto das mudancas..."
          
          RISK_LEVEL="low"
          TEST_STRATEGY="basic"
          COMPONENTS=""
          
          # Analise de arquivos alterados
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          
          # Classificacao de risco baseada nos arquivos
          if echo "$CHANGED_FILES" | grep -q -E "(auth|security|payment|database)"; then
            RISK_LEVEL="critical"
            TEST_STRATEGY="comprehensive"
            COMPONENTS="$COMPONENTS security"
          fi
          
          if echo "$CHANGED_FILES" | grep -q -E "(api|backend|server)"; then
            if [ "$RISK_LEVEL" != "critical" ]; then
              RISK_LEVEL="high"
            fi
            TEST_STRATEGY="extended"
            COMPONENTS="$COMPONENTS backend"
          fi
          
          if echo "$CHANGED_FILES" | grep -q -E "(frontend|ui|component)"; then
            if [ "$RISK_LEVEL" == "low" ]; then
              RISK_LEVEL="medium"
            fi
            COMPONENTS="$COMPONENTS frontend"
          fi
          
          # Analise de complexidade (numero de arquivos)
          FILE_COUNT=$(echo "$CHANGED_FILES" | wc -l)
          if [ $FILE_COUNT -gt 20 ]; then
            RISK_LEVEL="high"
            TEST_STRATEGY="comprehensive"
          fi
          
          echo "risk_level=$RISK_LEVEL" >> $GITHUB_OUTPUT
          echo "test_strategy=$TEST_STRATEGY" >> $GITHUB_OUTPUT
          echo "components_affected=$COMPONENTS" >> $GITHUB_OUTPUT
          
          echo "Nivel de risco: $RISK_LEVEL"
          echo "Estrategia de teste: $TEST_STRATEGY"
          echo "Componentes afetados: $COMPONENTS"

  security-tests:
    name: "[SECURITY] Testes de Seguran√ßa"
    runs-on: ubuntu-latest
    needs: analyze-changes
    # SCHEDULE: Testa 100% independente de mudan√ßas, PRs s√≥ componentes afetados
    if: |
      always() && (
        github.event_name == 'schedule' ||
        needs.analyze-changes.outputs.risk-level == 'critical' ||
        contains(needs.analyze-changes.outputs.components-affected, 'security') ||
        inputs.test_suite == 'all' ||
        inputs.test_suite == 'security'
      )
    
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@v4
        
      - name: "[SECURITY] OWASP Dependency Check"
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'roteiro-dispensacao'
          path: '.'
          format: 'ALL'
          # SCHEDULE: An√°lise COMPLETA, PR: B√°sico
          args: >
            --enableRetired
            --enableExperimental 
            ${{ github.event_name == 'schedule' && '--failOnCVSS 0' || '--failOnCVSS 7' }}
            --suppression .github/dependency-check-suppressions.xml
          
      - name: "[SECURITY] Scan Avan√ßado de Vulnerabilidades"
        run: |
          echo "üîç Executando scans de seguran√ßa avan√ßados..."
          
          # SCHEDULE: Testa TODO O C√ìDIGO com tools m√∫ltiplos
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "üìÖ MODO SCHEDULE: Auditoria completa de 100% do c√≥digo"
            
            # 1. Semgrep - Static Analysis completo
            if command -v semgrep >/dev/null 2>&1; then
              echo "Executando Semgrep (regras completas)..."
              semgrep --config=auto --json --output=semgrep-results.json . || true
            fi
            
            # 2. Bandit para Python - Todos os n√≠veis
            if command -v bandit >/dev/null 2>&1; then
              echo "Executando Bandit (todos os n√≠veis)..."
              bandit -r apps/backend -f json -o bandit-results.json -ll || true
            fi
            
            # 3. ESLint Security para JavaScript/TypeScript
            echo "Executando ESLint Security..."
            cd apps/frontend-nextjs
            npm install eslint-plugin-security --no-save || true
            npx eslint . --ext .js,.ts,.tsx --format json --output-file ../eslint-security.json || true
            cd ../..
            
          else
            echo "üîç MODO PR: Scan direcionado aos componentes alterados"
          fi
          
          # Verifica√ß√£o de secrets (sempre)
          echo "Procurando por secrets expostos..."
          # TruffleHog j√° √© executado no security gate principal
          
          # Verifica√ß√£o de configura√ß√µes inseguras
          echo "Verificando configura√ß√µes de seguran√ßa..."
          find . -name "*.env*" -type f -o -name "*config*" -type f | while read file; do
            if [ -f "$file" ]; then
              echo "INFO: Arquivo de configura√ß√£o encontrado: $file"
            fi
          done
          
      - name: "[SECURITY] Upload Security Results"
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('reports/dependency-check-report.sarif') != ''
        with:
          sarif_file: reports/dependency-check-report.sarif
        continue-on-error: true  # N√£o falha se upload falhar

  performance-tests:
    name: "[PERFORMANCE] Testes de Performance"
    runs-on: ubuntu-latest
    needs: analyze-changes
    # PERFORMANCE: Schedule testa TUDO, PRs s√≥ se high/critical
    if: |
      github.event_name == 'schedule' ||
      inputs.test_suite == 'performance' ||
      (inputs.test_suite == 'all' && contains(fromJSON('["high", "critical"]'), needs.analyze-changes.outputs.risk-level))
    
    strategy:
      # MATRIZ CONDICIONAL: S√≥ prod em schedule, s√≥ hml em PRs
      matrix:
        environment: ${{ github.event_name == 'schedule' && fromJSON('["hml", "prod"]') || fromJSON('["hml"]') }}
        
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@v4
        
      - name: "[SETUP] Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: "[INSTALL] Performance Tools"
        run: |
          npm install -g lighthouse artillery @web/dev-server
          
      - name: "[PERFORMANCE] Lighthouse Audit"
        run: |
          ENVIRONMENT="${{ matrix.environment }}"
          
          if [ "$ENVIRONMENT" == "hml" ]; then
            TARGET_URL="${{ secrets.HML_FRONTEND_URL }}"
          else
            TARGET_URL="${{ secrets.PROD_FRONTEND_URL }}"
          fi
          
          echo "Executando auditoria Lighthouse para $ENVIRONMENT..."
          
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "üìÖ MODO COMPLETO: Auditoria rigorosa com todas as categorias"
            lighthouse "$TARGET_URL" \
              --output=json \
              --output=html \
              --output-path=lighthouse-$ENVIRONMENT \
              --chrome-flags="--headless --no-sandbox" \
              --preset=desktop \
              --throttling-method=devtools \
              --gather-mode=navigation \
              --quiet
          else
            echo "üîç MODO PR: Auditoria b√°sica"
            lighthouse "$TARGET_URL" \
              --output=json \
              --output-path=lighthouse-$ENVIRONMENT.json \
              --chrome-flags="--headless --no-sandbox" \
              --only-categories=performance \
              --quiet
          fi
            
      - name: "[PERFORMANCE] Load Testing"
        run: |
          ENVIRONMENT="${{ matrix.environment }}"
          
          if [ "$ENVIRONMENT" == "hml" ]; then
            TARGET_URL="${{ secrets.HML_API_URL }}"
          else
            TARGET_URL="${{ secrets.PROD_API_URL }}"
          fi
          
          echo "Executando testes de carga para $ENVIRONMENT..."
          
          # Criar configuracao basica do Artillery
          cat > load-test.yml << EOF
          config:
            target: '$TARGET_URL'
            phases:
              - duration: 60
                arrivalRate: 5
          scenarios:
            - name: 'Basic API Test'
              requests:
                - get:
                    url: '/health'
          EOF
          
          artillery run load-test.yml --output performance-$ENVIRONMENT.json
          
      - name: "[UPLOAD] Performance Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: performance-results-${{ matrix.environment }}
          path: |
            lighthouse-*.json
            performance-*.json

  integration-tests:
    name: "[INTEGRATION] Testes de Integra√ß√£o"
    runs-on: ubuntu-latest
    needs: analyze-changes
    # INTEGRA√á√ÉO: S√≥ para mudan√ßas backend/API
    if: |
      always() && (
        needs.analyze-changes.outputs.should-run-tests == 'true' &&
        (contains(needs.analyze-changes.outputs.components-affected, 'backend') ||
         inputs.test_suite == 'all' ||
         inputs.test_suite == 'integration' ||
         github.event_name == 'schedule')
      )
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@v4
        
      - name: "[SETUP] Python Environment"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: "[SETUP] Node.js Environment"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: "[INSTALL] Dependencies"
        run: |
          # Backend dependencies
          cd apps/backend
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
          
          # Frontend dependencies
          cd ../frontend-nextjs
          npm ci
          
      - name: "[TEST] Backend Integration Tests"
        working-directory: apps/backend
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb
        run: |
          echo "Executando testes de integracao do backend..."
          python -m pytest tests/integration/ -v --tb=short
        continue-on-error: ${{ needs.analyze-changes.outputs.risk-level != 'critical' }}
          
      - name: "[TEST] Frontend Integration Tests"
        working-directory: apps/frontend-nextjs
        run: |
          echo "Executando testes de integracao do frontend..."
          npm run test:integration || echo "Testes de integra√ß√£o n√£o configurados"
        continue-on-error: true  # Testes de integra√ß√£o frontend opcionais
          
      - name: "[TEST] End-to-End Tests"
        run: |
          echo "Executando testes E2E..."
          # Placeholder para testes E2E com Playwright ou Cypress
          echo "E2E tests seriam executados aqui"

  regression-tests:
    name: "[REGRESSION] Testes de Regressao"
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || inputs.test_suite == 'all' || inputs.test_suite == 'regression'
    
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@v4
        
      - name: "[REGRESSION] Executar Suite de Regressao"
        run: |
          echo "Executando testes de regressao automatizados..."
          
          # Simulacao de testes de regressao
          echo "1. Testando funcionalidades criticas..."
          echo "2. Verificando compatibilidade com versoes anteriores..."
          echo "3. Validando integridade dos dados..."
          echo "4. Testando fluxos principais do usuario..."
          
          # Aqui seria executada a suite real de testes de regressao
          echo "Suite de regressao concluida com sucesso"

  generate-comprehensive-report:
    name: "[REPORT] Relat√≥rio QA Semanal Completo"
    runs-on: ubuntu-latest
    needs: [security-tests, performance-tests, integration-tests, regression-tests]
    if: always()
    
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
        
      - name: "[REPORT] Download Artifacts"
        uses: actions/download-artifact@v4
        with:
          path: qa-results/
          
      - name: "[REPORT] Processar Resultados JSON"
        run: |
          echo "üìä Processando resultados de seguran√ßa..."
          
          # Processar resultados Semgrep se existir
          if [ -f qa-results/semgrep-results.json ]; then
            echo "Processando Semgrep..."
            cat qa-results/semgrep-results.json | jq -r '.results[] | "SEMGREP-\(.check_id): \(.message) (\(.path):\(.start.line))"' > semgrep-findings.txt || true
          fi
          
          # Processar resultados Bandit
          if [ -f qa-results/bandit-results.json ]; then
            echo "Processando Bandit..."
            cat qa-results/bandit-results.json | jq -r '.results[] | "BANDIT-\(.test_id): \(.issue_text) (\(.filename):\(.line_number)) - Severidade: \(.issue_severity)"' > bandit-findings.txt || true
          fi
          
          # Processar ESLint Security
          if [ -f qa-results/eslint-security.json ]; then
            echo "Processando ESLint Security..."
            cat qa-results/eslint-security.json | jq -r '.[] | .messages[] | "ESLINT-\(.ruleId): \(.message) (\(.line):\(.column)) - \(.severity)"' > eslint-findings.txt || true
          fi
          
      - name: "[REPORT] Gerar Relat√≥rio Completo com Categoriza√ß√£o"
        run: |
          echo "üìÑ Gerando relat√≥rio consolidado e categorizado..."
          
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
          WEEK=$(date '+%Y-W%V')
          REPORT_FILE="qa-weekly-report-$WEEK.md"
          
          cat > "$REPORT_FILE" << EOF
          # üìÖ Relat√≥rio QA Semanal - $WEEK
          **Gerado em:** $TIMESTAMP  
          **Trigger:** ${{ github.event_name }}  
          **Branch:** ${{ github.ref }}  
          **Commit:** ${{ github.sha }}
          
          ## üéØ Resumo Executivo
          
          | Categoria | Status | Achados |
          |-----------|--------|----------|
          | üîí Seguran√ßa | ${{ needs.security-tests.result }} | $(cat *-findings.txt 2>/dev/null | wc -l) |
          | ‚ö° Performance | ${{ needs.performance-tests.result }} | - |
          | üîó Integra√ß√£o | ${{ needs.integration-tests.result }} | - |
          | üîÑ Regress√£o | ${{ needs.regression-tests.result }} | - |
          
          ## üö® Achados de Seguran√ßa por Severidade
          
          ### CR√çTICOS
          EOF
          
          # Categorizar achados por severidade
          if [ -f semgrep-findings.txt ]; then
            echo "#### Semgrep (Static Analysis)" >> "$REPORT_FILE"
            cat semgrep-findings.txt >> "$REPORT_FILE"
            echo "" >> "$REPORT_FILE"
          fi
          
          if [ -f bandit-findings.txt ]; then
            echo "#### Bandit (Python Security)" >> "$REPORT_FILE"
            grep -i "HIGH\|CRITICAL" bandit-findings.txt >> "$REPORT_FILE" || echo "Nenhum achado cr√≠tico" >> "$REPORT_FILE"
            echo "" >> "$REPORT_FILE"
            
            echo "### M√âDIOS" >> "$REPORT_FILE"
            grep -i "MEDIUM" bandit-findings.txt >> "$REPORT_FILE" || echo "Nenhum achado m√©dio" >> "$REPORT_FILE"
            echo "" >> "$REPORT_FILE"
            
            echo "### BAIXOS" >> "$REPORT_FILE"
            grep -i "LOW" bandit-findings.txt >> "$REPORT_FILE" || echo "Nenhum achado baixo" >> "$REPORT_FILE"
            echo "" >> "$REPORT_FILE"
          fi
          
          if [ -f eslint-findings.txt ]; then
            echo "#### ESLint Security (Frontend)" >> "$REPORT_FILE"
            cat eslint-findings.txt >> "$REPORT_FILE"
            echo "" >> "$REPORT_FILE"
          fi
          
          cat >> "$REPORT_FILE" << EOF
          
          ## üìà M√©tricas de Performance
          - Lighthouse Score: Ver artifacts
          - Load Testing: Ver artifacts  
          - Memory Usage: A ser implementado
          
          ## üêõ Achados de Regress√£o
          - Testes que falharam: A ser categorizado
          - Funcionalidades impactadas: A ser listado
          
          ## üéØ Recomenda√ß√µes
          EOF
          
          # Recomenda√ß√µes baseadas nos resultados
          if [ "${{ needs.security-tests.result }}" != "success" ]; then
            echo "- üö® **[CR√çTICO]** Revisar falhas de seguran√ßa imediatamente" >> "$REPORT_FILE"
          fi
          
          if [ "${{ needs.performance-tests.result }}" != "success" ]; then
            echo "- ‚ö†Ô∏è **[ALTO]** Analisar problemas de performance" >> "$REPORT_FILE"
          fi
          
          echo "- üîç **[INFO]** Relat√≥rio completo dispon√≠vel nos artifacts" >> "$REPORT_FILE"
          
          echo "üìÑ Relat√≥rio gerado: $REPORT_FILE"
          
      - name: "[UPLOAD] Upload Relat√≥rio Completo"
        uses: actions/upload-artifact@v4
        with:
          name: qa-weekly-report-$(date +%Y-W%V)
          path: |
            qa-weekly-report-*.md
            *-findings.txt
            qa-results/
          retention-days: 30
          
      # SCHEDULE: Criar PR com achados da semana
      - name: "[PR] Criar PR com Achados Semanais"
        if: github.event_name == 'schedule'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: "qa/weekly-findings-$(date +%Y-W%V)"
          base: main
          title: "üìÖ QA: Relat√≥rio Semanal de Achados - $(date +%Y-W%V)"
          body: |
            ## üìÖ Relat√≥rio Semanal de QA
            
            **Semana:** $(date +%Y-W%V)  
            **Auditoria Completa:** 100% do c√≥digo analisado
            
            ### üìä Resumo dos Achados:
            - **Seguran√ßa:** ${{ needs.security-tests.result }}
            - **Performance:** ${{ needs.performance-tests.result }}
            - **Integra√ß√£o:** ${{ needs.integration-tests.result }}
            - **Regress√£o:** ${{ needs.regression-tests.result }}
            
            ### üìé Achados Categorizados:
            Todos os achados foram categorizados por severidade no relat√≥rio anexo.
            
            **üîç Detalhes completos:** Ver artifacts do workflow
            
            ---
            ü§ñ *Gerado automaticamente pelo QA Automation*
          labels: |
            qa-report
            weekly-findings
            automated
          assignees: AnalineS
          commit-message: "feat(qa): weekly security and quality findings report $(date +%Y-W%V)"

  notify-results:
    name: "[NOTIFY] Notificar Resultados"
    runs-on: ubuntu-latest
    needs: [security-tests, performance-tests, integration-tests, regression-tests, generate-comprehensive-report]
    if: always()
    
    steps:
      - name: "[NOTIFY] Enviar Resultados via Telegram"
        run: |
          SECURITY_STATUS="${{ needs.security-tests.result }}"
          PERFORMANCE_STATUS="${{ needs.performance-tests.result }}"
          INTEGRATION_STATUS="${{ needs.integration-tests.result }}"
          REGRESSION_STATUS="${{ needs.regression-tests.result }}"
          
          # Determinar status geral
          OVERALL_STATUS="SUCCESS"
          if [ "$SECURITY_STATUS" == "failure" ] || [ "$INTEGRATION_STATUS" == "failure" ]; then
            OVERALL_STATUS="CRITICAL"
          elif [ "$PERFORMANCE_STATUS" == "failure" ] || [ "$REGRESSION_STATUS" == "failure" ]; then
            OVERALL_STATUS="WARNING"
          fi
          
          # Montar mensagem baseada no tipo de execu√ß√£o
          if [ "${{ github.event_name }}" = "schedule" ]; then
            WEEK=$(date +%Y-W%V)
            MESSAGE="üìÖ [QA-WEEKLY] Auditoria Semanal $WEEK Conclu√≠da!"
            MESSAGE="$MESSAGE%0Aüîç **Cobertura:** 100% do c√≥digo analisado"
          else
            if [ "$OVERALL_STATUS" == "SUCCESS" ]; then
              MESSAGE="‚úÖ [QA-SUCCESS] Testes de QA aprovados!"
            elif [ "$OVERALL_STATUS" == "WARNING" ]; then
              MESSAGE="‚ö†Ô∏è [QA-WARNING] Alguns testes falharam"
            else
              MESSAGE="üö® [QA-CRITICAL] Falhas cr√≠ticas detectadas!"
            fi
          fi
          
          MESSAGE="$MESSAGE%0A%0Aüìà **Resultados:**"
          MESSAGE="$MESSAGE%0A‚Ä¢ Seguran√ßa: $SECURITY_STATUS"
          MESSAGE="$MESSAGE%0A‚Ä¢ Performance: $PERFORMANCE_STATUS"
          MESSAGE="$MESSAGE%0A‚Ä¢ Integra√ß√£o: $INTEGRATION_STATUS"
          MESSAGE="$MESSAGE%0A‚Ä¢ Regress√£o: $REGRESSION_STATUS"
          
          if [ "${{ github.event_name }}" = "schedule" ]; then
            MESSAGE="$MESSAGE%0A%0Aüìã **PR Criado:** Relat√≥rio completo com todos os achados"
          fi
          
          MESSAGE="$MESSAGE%0A%0Aüîó Commit: ${GITHUB_SHA:0:7}"
          
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="$MESSAGE" \
            -d parse_mode="HTML"

# CONCURRENCY QA: Cancelamento inteligente
concurrency:
  group: qa-automation-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}