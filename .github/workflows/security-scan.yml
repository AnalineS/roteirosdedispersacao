# Security Scanning Pipeline - Roteiros de Dispensação
# Implementa SAST (Static Application Security Testing) com múltiplas ferramentas
# 
# Este workflow executa em:
# - Todos os pushes para main e branches de desenvolvimento
# - Pull requests para main
# - Agendamento noturno para análise contínua
# 
# Ferramentas utilizadas:
# - CodeQL (GitHub Advanced Security)
# - Bandit (Python SAST)
# - ESLint Security (JavaScript/TypeScript)
# - Safety (Python dependency scanning)
# - Semgrep (Multi-language SAST)

name: 🔒 Security Scan & SAST

on:
  push:
    branches: [ main, develop, feature/*, security/* ]
    paths:
      - 'apps/backend/**'
      - 'apps/frontend-nextjs/**' 
      - '.github/workflows/**'
      - 'requirements.txt'
      - 'package*.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/backend/**'
      - 'apps/frontend-nextjs/**'
      - 'requirements.txt' 
      - 'package*.json'
  schedule:
    # Scan diário às 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_level:
        description: 'Security scan level'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - deep
          - critical-only

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  
jobs:
  # ===== CODEQL ANALYSIS =====
  codeql-analysis:
    name: 🔍 CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read  
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
        
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔧 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql-config.yml
        
    - name: 🏗️ Setup Python for Backend Analysis
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install Python dependencies
      if: matrix.language == 'python'
      run: |
        python -m pip install --upgrade pip
        cd apps/backend
        pip install -r requirements.txt
        
    - name: 🏗️ Setup Node.js for Frontend Analysis  
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: apps/frontend-nextjs/package-lock.json
        
    - name: 📦 Install Node.js dependencies
      if: matrix.language == 'javascript'
      run: |
        cd apps/frontend-nextjs
        npm ci --only=production
        
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{ matrix.language }}"
        
  # ===== PYTHON SAST =====  
  python-sast:
    name: 🐍 Python SAST (Bandit)
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety
        
    - name: 🔒 Run Bandit SAST
      run: |
        cd apps/backend
        bandit -r . \
          -f json \
          -o ../../bandit-report.json \
          --configfile .bandit \
          -ll
        
        # Exibir resultados críticos
        bandit -r . \
          -f txt \
          --configfile .bandit \
          -ll
      continue-on-error: true
      
    - name: 🔍 Python Dependency Safety Check
      run: |
        cd apps/backend
        safety check \
          --json \
          --output ../../safety-report.json \
          --policy-file .safety-policy.yml \
          -r requirements.txt
      continue-on-error: true
      
    - name: 📊 Upload Python SAST artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-sast-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30
        
  # ===== JAVASCRIPT/TYPESCRIPT SAST =====
  js-sast:
    name: ⚡ JavaScript/TypeScript SAST
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: apps/frontend-nextjs/package-lock.json
        
    - name: 📦 Install dependencies
      run: |
        cd apps/frontend-nextjs
        npm ci
        
    - name: 🔒 ESLint Security Analysis
      run: |
        cd apps/frontend-nextjs
        npx eslint \
          --config .eslintrc.security.js \
          --ext .js,.jsx,.ts,.tsx \
          --format json \
          --output-file ../../eslint-security-report.json \
          src/ || true
        
        # Exibir problemas de segurança
        npx eslint \
          --config .eslintrc.security.js \
          --ext .js,.jsx,.ts,.tsx \
          --format table \
          src/ || true
      continue-on-error: true
      
    - name: 🔍 npm audit
      run: |
        cd apps/frontend-nextjs
        npm audit \
          --audit-level moderate \
          --json > ../../npm-audit-report.json || true
        
        # Exibir audit
        npm audit || true
      continue-on-error: true
      
    - name: 📊 Upload JS SAST artifacts
      uses: actions/upload-artifact@v4
      with:
        name: js-sast-reports
        path: |
          eslint-security-report.json
          npm-audit-report.json
        retention-days: 30

  # ===== SEMGREP MULTI-LANGUAGE SAST =====
  semgrep-scan:
    name: 🎯 Semgrep Multi-Language SAST
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    if: (github.actor != 'dependabot[bot]')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Semgrep
      run: |
        semgrep \
          --config=auto \
          --json \
          --output=semgrep-results.json \
          --exclude="node_modules" \
          --exclude="venv" \
          --exclude="*.test.*" \
          --exclude="tests/" \
          --severity=ERROR \
          --severity=WARNING \
          apps/
      continue-on-error: true
      
    - name: 📊 Upload Semgrep results
      uses: actions/upload-artifact@v4
      with:
        name: semgrep-results
        path: semgrep-results.json
        retention-days: 30

  # ===== SECRET SCANNING =====  
  secret-scan:
    name: 🔐 Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔍 TruffleHog Secret Scan
      uses: trufflesecurity/trufflehog@v3.63.2
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified --json --no-update
      continue-on-error: true

  # ===== SECURITY SUMMARY REPORT =====
  security-summary:
    name: 📋 Security Summary Report
    needs: [codeql-analysis, python-sast, js-sast, semgrep-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
      
    - name: 📊 Generate Security Summary
      run: |
        echo "# 🔒 Security Scan Summary Report" > security-summary.md
        echo "" >> security-summary.md
        echo "**Scan Date:** $(date)" >> security-summary.md
        echo "**Repository:** ${{ github.repository }}" >> security-summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
        echo "**Commit:** ${{ github.sha }}" >> security-summary.md
        echo "" >> security-summary.md
        
        # Status dos jobs
        echo "## 🎯 Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        echo "| Tool | Status |" >> security-summary.md
        echo "|------|--------|" >> security-summary.md
        echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> security-summary.md
        echo "| Python SAST (Bandit) | ${{ needs.python-sast.result }} |" >> security-summary.md
        echo "| JavaScript SAST | ${{ needs.js-sast.result }} |" >> security-summary.md
        echo "| Semgrep Analysis | ${{ needs.semgrep-scan.result }} |" >> security-summary.md
        echo "" >> security-summary.md
        
        # Verificar se há relatórios críticos
        if [ -f "bandit-report.json" ]; then
          CRITICAL_BANDIT=$(jq -r '.results[] | select(.issue_severity=="HIGH" or .issue_severity=="MEDIUM") | .issue_text' bandit-report.json 2>/dev/null | wc -l)
          echo "- **Bandit:** $CRITICAL_BANDIT issues encontradas" >> security-summary.md
        fi
        
        if [ -f "npm-audit-report.json" ]; then
          HIGH_VULN=$(jq -r '.vulnerabilities | to_entries[] | select(.value.severity=="high" or .value.severity=="critical") | .key' npm-audit-report.json 2>/dev/null | wc -l)
          echo "- **npm audit:** $HIGH_VULN vulnerabilidades críticas/altas" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## 📋 Recommendations" >> security-summary.md
        echo "" >> security-summary.md
        echo "✅ **For Medical Educational Platform:**" >> security-summary.md
        echo "- Ensure no hardcoded credentials in source code" >> security-summary.md
        echo "- Validate all user inputs for medical calculations" >> security-summary.md
        echo "- Review data handling for LGPD compliance" >> security-summary.md
        echo "- Update dependencies with security patches" >> security-summary.md
        echo "" >> security-summary.md
        echo "---" >> security-summary.md
        echo "*Generated by Roteiros de Dispensação Security Pipeline*" >> security-summary.md
        
    - name: 📊 Upload Security Summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary-report
        path: security-summary.md
        retention-days: 90
        
    - name: 💬 Comment PR with Security Summary  
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summaryPath = 'security-summary.md';
          
          if (fs.existsSync(summaryPath)) {
            const summary = fs.readFileSync(summaryPath, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${summary}\n\n> **Reminder:** This is an educational medical platform. Ensure all security recommendations are addressed before merging.`
            });
          }

  # ===== FAILURE NOTIFICATION =====
  notify-security-failure:
    name: 🚨 Security Failure Notification
    needs: [codeql-analysis, python-sast, js-sast, semgrep-scan]
    runs-on: ubuntu-latest
    if: |
      always() && (
        needs.codeql-analysis.result == 'failure' ||
        contains(needs.*.result, 'failure')
      )
      
    steps:
    - name: 🚨 Security Alert
      run: |
        echo "::error::SECURITY SCAN FAILURE DETECTED"
        echo "::error::One or more security scans have failed"
        echo "::error::Repository: ${{ github.repository }}"
        echo "::error::Branch: ${{ github.ref_name }}"
        echo "::error::Commit: ${{ github.sha }}"
        echo ""
        echo "::error::Review security scan results immediately"
        echo "::error::Medical educational platform requires enhanced security"
        
        # Se executado em production branch, falhar o pipeline
        if [[ "${{ github.ref_name }}" == "main" ]]; then
          echo "::error::CRITICAL: Security failure on main branch - blocking deployment"
          exit 1
        fi