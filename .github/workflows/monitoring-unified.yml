name: "📊 Unified Monitoring & Health System"

on:
  schedule:
    # Daily comprehensive health check at 6 AM UTC
    - cron: '0 6 * * *'
    # Performance monitoring every 4 hours during business days
    - cron: '0 */4 * * 1-5'
    # Security alert management daily at 8 AM UTC
    - cron: '0 8 * * *'
  workflow_dispatch:
    inputs:
      monitoring_type:
        description: 'Type of monitoring to run'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - 'health_only'
          - 'performance_only'
          - 'security_only'
          - 'comprehensive'
      environment:
        description: 'Environment to monitor'
        required: true
        default: 'both'
        type: choice
        options:
          - 'staging'
          - 'production'
          - 'both'
      alert_threshold:
        description: 'Alert threshold level'
        required: true
        default: 'medium'
        type: choice
        options:
          - 'low'
          - 'medium'
          - 'high'
          - 'critical'
      deep_analysis:
        description: 'Run deep analysis'
        type: boolean
        default: false

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  MEDICAL_MODE: 'true'
  LGPD_COMPLIANCE_REQUIRED: 'true'

permissions:
  contents: read
  issues: write
  actions: read
  security-events: write
  discussions: write

jobs:
  # ============================================================================
  # UNIFIED HEALTH CHECK
  # ============================================================================
  unified-health-check:
    name: "🏥 Unified System Health Check"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ contains(fromJson('["health_only", "comprehensive"]'), github.event.inputs.monitoring_type) || github.event_name == 'schedule' }}
    outputs:
      staging-status: ${{ steps.health-check.outputs.staging-status }}
      production-status: ${{ steps.health-check.outputs.production-status }}
      health-score: ${{ steps.health-check.outputs.health-score }}
      critical-issues: ${{ steps.health-check.outputs.critical-issues }}
    steps:
      - uses: actions/checkout@v4

      - name: "🔑 Google Cloud Auth"
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: "🔧 Setup Cloud SDK"
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: "🏥 Comprehensive Health Check"
        id: health-check
        env:
          STAGING_API: ${{ vars.NEXT_PUBLIC_API_URL_STAGING }}
          PRODUCTION_API: ${{ vars.NEXT_PUBLIC_API_URL_PRODUCTION }}
          STAGING_FRONTEND: ${{ vars.HML_FRONTEND_DOMAIN }}
          PRODUCTION_FRONTEND: ${{ vars.PRODUCTION_FRONTEND_DOMAIN }}
          DEEP_CHECK: ${{ github.event.inputs.deep_analysis }}
        run: |
          echo "🔍 Running comprehensive health check..."

          # Initialize scores
          STAGING_SCORE=0
          PRODUCTION_SCORE=0
          CRITICAL_ISSUES=""

          # Function to check endpoint health
          check_endpoint() {
              local url=$1
              local name=$2
              local timeout=10

              echo "🌐 Testing $name: $url"

              # Basic connectivity
              if curl -sf --max-time $timeout "$url/health" >/dev/null 2>&1; then
                  echo "✅ $name health endpoint responsive"
                  SCORE=25
              else
                  echo "❌ $name health endpoint failed"
                  CRITICAL_ISSUES="$CRITICAL_ISSUES $name-health-failed"
                  SCORE=0
              fi

              # API endpoints
              if curl -sf --max-time $timeout "$url/api/v1/personas" >/dev/null 2>&1; then
                  echo "✅ $name API endpoints responsive"
                  SCORE=$((SCORE + 25))
              else
                  echo "❌ $name API endpoints failed"
                  CRITICAL_ISSUES="$CRITICAL_ISSUES $name-api-failed"
              fi

              # Deep check if requested
              if [[ "$DEEP_CHECK" == "true" ]]; then
                  # RAG system check
                  if curl -sf --max-time 15 "$url/api/v1/rag/status" >/dev/null 2>&1; then
                      echo "✅ $name RAG system operational"
                      SCORE=$((SCORE + 25))
                  else
                      echo "⚠️ $name RAG system check failed"
                      SCORE=$((SCORE + 10))
                  fi

                  # Database connectivity
                  if curl -sf --max-time 10 "$url/api/v1/health/db" >/dev/null 2>&1; then
                      echo "✅ $name database connectivity OK"
                      SCORE=$((SCORE + 25))
                  else
                      echo "⚠️ $name database connectivity issues"
                      SCORE=$((SCORE + 10))
                  fi
              else
                  SCORE=$((SCORE + 50))  # Skip deep checks
              fi

              echo $SCORE
          }

          # Check staging environment
          if [[ "${{ github.event.inputs.environment }}" == "staging" || "${{ github.event.inputs.environment }}" == "both" || "${{ github.event_name }}" == "schedule" ]]; then
              if [[ -n "$STAGING_API" ]]; then
                  STAGING_SCORE=$(check_endpoint "$STAGING_API" "Staging")
                  echo "📊 Staging Health Score: $STAGING_SCORE/100"
              fi
          fi

          # Check production environment
          if [[ "${{ github.event.inputs.environment }}" == "production" || "${{ github.event.inputs.environment }}" == "both" || "${{ github.event_name }}" == "schedule" ]]; then
              if [[ -n "$PRODUCTION_API" ]]; then
                  PRODUCTION_SCORE=$(check_endpoint "$PRODUCTION_API" "Production")
                  echo "📊 Production Health Score: $PRODUCTION_SCORE/100"
              fi
          fi

          # Calculate overall health score
          if [[ -n "$STAGING_API" && -n "$PRODUCTION_API" ]]; then
              OVERALL_SCORE=$(( (STAGING_SCORE + PRODUCTION_SCORE) / 2 ))
          elif [[ -n "$STAGING_API" ]]; then
              OVERALL_SCORE=$STAGING_SCORE
          elif [[ -n "$PRODUCTION_API" ]]; then
              OVERALL_SCORE=$PRODUCTION_SCORE
          else
              OVERALL_SCORE=0
          fi

          echo "🎯 Overall Health Score: $OVERALL_SCORE/100"

          # Set outputs
          echo "staging-status=$STAGING_SCORE" >> $GITHUB_OUTPUT
          echo "production-status=$PRODUCTION_SCORE" >> $GITHUB_OUTPUT
          echo "health-score=$OVERALL_SCORE" >> $GITHUB_OUTPUT
          echo "critical-issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT

          # Health report
          echo "## 🏥 System Health Report" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Score | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Staging | $STAGING_SCORE/100 | $(if [[ "$STAGING_SCORE" -ge "80" ]]; then echo "🟢 Healthy"; elif [[ "$STAGING_SCORE" -ge "60" ]]; then echo "🟡 Degraded"; else echo "🔴 Critical"; fi) |" >> $GITHUB_STEP_SUMMARY
          echo "| Production | $PRODUCTION_SCORE/100 | $(if [[ "$PRODUCTION_SCORE" -ge "80" ]]; then echo "🟢 Healthy"; elif [[ "$PRODUCTION_SCORE" -ge "60" ]]; then echo "🟡 Degraded"; else echo "🔴 Critical"; fi) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Overall** | **$OVERALL_SCORE/100** | $(if [[ "$OVERALL_SCORE" -ge "80" ]]; then echo "**🟢 Healthy**"; elif [[ "$OVERALL_SCORE" -ge "60" ]]; then echo "**🟡 Degraded**"; else echo "**🔴 Critical**"; fi) |" >> $GITHUB_STEP_SUMMARY

          if [[ -n "$CRITICAL_ISSUES" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🚨 **Critical Issues Found**: $CRITICAL_ISSUES" >> $GITHUB_STEP_SUMMARY
          fi

  # ============================================================================
  # PERFORMANCE MONITORING
  # ============================================================================
  performance-monitoring:
    name: "⚡ Performance Monitoring"
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: ${{ contains(fromJson('["performance_only", "comprehensive"]'), github.event.inputs.monitoring_type) || github.event_name == 'schedule' }}
    needs: unified-health-check
    outputs:
      performance-score: ${{ steps.perf-check.outputs.performance-score }}
      alerts-needed: ${{ steps.perf-check.outputs.alerts-needed }}
    steps:
      - uses: actions/checkout@v4

      - name: "⚡ Performance Baseline Check"
        id: perf-check
        env:
          STAGING_API: ${{ vars.NEXT_PUBLIC_API_URL_STAGING }}
          PRODUCTION_API: ${{ vars.NEXT_PUBLIC_API_URL_PRODUCTION }}
        run: |
          echo "⚡ Running performance monitoring..."

          # Function to measure response time
          measure_performance() {
              local url=$1
              local name=$2

              echo "📊 Measuring $name performance..."

              # Health endpoint
              HEALTH_TIME=$(curl -o /dev/null -s -w '%{time_total}' --max-time 10 "$url/health" || echo "10.0")
              echo "🏥 $name health response: ${HEALTH_TIME}s"

              # API endpoint
              API_TIME=$(curl -o /dev/null -s -w '%{time_total}' --max-time 15 "$url/api/v1/personas" || echo "15.0")
              echo "🔌 $name API response: ${API_TIME}s"

              # Calculate performance score
              HEALTH_SCORE=100
              if (( $(echo "$HEALTH_TIME > 2.0" | bc -l) )); then
                  HEALTH_SCORE=50
              elif (( $(echo "$HEALTH_TIME > 1.0" | bc -l) )); then
                  HEALTH_SCORE=75
              fi

              API_SCORE=100
              if (( $(echo "$API_TIME > 5.0" | bc -l) )); then
                  API_SCORE=50
              elif (( $(echo "$API_TIME > 2.0" | bc -l) )); then
                  API_SCORE=75
              fi

              PERF_SCORE=$(( (HEALTH_SCORE + API_SCORE) / 2 ))
              echo "📈 $name Performance Score: $PERF_SCORE/100"
              echo $PERF_SCORE
          }

          STAGING_PERF=100
          PRODUCTION_PERF=100
          ALERTS_NEEDED=""

          # Monitor staging
          if [[ "${{ github.event.inputs.environment }}" == "staging" || "${{ github.event.inputs.environment }}" == "both" || "${{ github.event_name }}" == "schedule" ]]; then
              if [[ -n "$STAGING_API" ]]; then
                  STAGING_PERF=$(measure_performance "$STAGING_API" "Staging")
                  if [[ "$STAGING_PERF" -lt "70" ]]; then
                      ALERTS_NEEDED="$ALERTS_NEEDED staging-performance-degraded"
                  fi
              fi
          fi

          # Monitor production
          if [[ "${{ github.event.inputs.environment }}" == "production" || "${{ github.event.inputs.environment }}" == "both" || "${{ github.event_name }}" == "schedule" ]]; then
              if [[ -n "$PRODUCTION_API" ]]; then
                  PRODUCTION_PERF=$(measure_performance "$PRODUCTION_API" "Production")
                  if [[ "$PRODUCTION_PERF" -lt "70" ]]; then
                      ALERTS_NEEDED="$ALERTS_NEEDED production-performance-degraded"
                  fi
              fi
          fi

          OVERALL_PERF=$(( (STAGING_PERF + PRODUCTION_PERF) / 2 ))

          echo "performance-score=$OVERALL_PERF" >> $GITHUB_OUTPUT
          echo "alerts-needed=$ALERTS_NEEDED" >> $GITHUB_OUTPUT

          # Performance report
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ⚡ Performance Report" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Performance Score | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|-------------------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Staging | $STAGING_PERF/100 | $(if [[ "$STAGING_PERF" -ge "80" ]]; then echo "🟢 Excellent"; elif [[ "$STAGING_PERF" -ge "60" ]]; then echo "🟡 Acceptable"; else echo "🔴 Poor"; fi) |" >> $GITHUB_STEP_SUMMARY
          echo "| Production | $PRODUCTION_PERF/100 | $(if [[ "$PRODUCTION_PERF" -ge "80" ]]; then echo "🟢 Excellent"; elif [[ "$PRODUCTION_PERF" -ge "60" ]]; then echo "🟡 Acceptable"; else echo "🔴 Poor"; fi) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Overall** | **$OVERALL_PERF/100** | $(if [[ "$OVERALL_PERF" -ge "80" ]]; then echo "**🟢 Excellent**"; elif [[ "$OVERALL_PERF" -ge "60" ]]; then echo "**🟡 Acceptable**"; else echo "**🔴 Poor**"; fi) |" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # SECURITY ALERT MANAGEMENT
  # ============================================================================
  security-alert-management:
    name: "🛡️ Security Alert Management"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ contains(fromJson('["security_only", "comprehensive"]'), github.event.inputs.monitoring_type) || github.event_name == 'schedule' }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      total-alerts: ${{ steps.security-analysis.outputs.total-alerts }}
      critical-alerts: ${{ steps.security-analysis.outputs.critical-alerts }}
    steps:
      - uses: actions/checkout@v4

      - name: "🛡️ Security Alert Analysis & Management"
        id: security-analysis
        run: |
          echo "🔍 Analyzing security alerts..."

          # Get all security alerts
          TOTAL_ALERTS=$(gh api repos/${{ github.repository }}/code-scanning/alerts --paginate | jq '. | length' || echo "0")
          echo "📊 Total alerts found: $TOTAL_ALERTS"

          CRITICAL_ALERTS=0
          HIGH_ALERTS=0
          MEDIUM_ALERTS=0
          LOW_ALERTS=0

          if [[ "$TOTAL_ALERTS" -gt "0" ]]; then
              # Count by severity
              CRITICAL_ALERTS=$(gh api repos/${{ github.repository }}/code-scanning/alerts --paginate | jq '[.[] | select(.rule.security_severity_level == "critical")] | length' || echo "0")
              HIGH_ALERTS=$(gh api repos/${{ github.repository }}/code-scanning/alerts --paginate | jq '[.[] | select(.rule.security_severity_level == "high")] | length' || echo "0")
              MEDIUM_ALERTS=$(gh api repos/${{ github.repository }}/code-scanning/alerts --paginate | jq '[.[] | select(.rule.security_severity_level == "medium")] | length' || echo "0")
              LOW_ALERTS=$(gh api repos/${{ github.repository }}/code-scanning/alerts --paginate | jq '[.[] | select(.rule.security_severity_level == "low")] | length' || echo "0")

              echo "🚨 Critical: $CRITICAL_ALERTS"
              echo "⚠️ High: $HIGH_ALERTS"
              echo "🔶 Medium: $MEDIUM_ALERTS"
              echo "🔷 Low: $LOW_ALERTS"

              # Auto-dismiss low severity false positives based on threshold
              THRESHOLD="${{ github.event.inputs.severity_threshold || 'medium' }}"
              if [[ "$THRESHOLD" == "high" || "$THRESHOLD" == "critical" ]]; then
                  echo "🧹 Auto-dismissing medium and low severity alerts as per threshold: $THRESHOLD"
                  # Dismiss medium and low alerts (implement dismissal logic if needed)
              elif [[ "$THRESHOLD" == "critical" ]]; then
                  echo "🧹 Auto-dismissing high, medium and low severity alerts as per threshold: $THRESHOLD"
                  # Dismiss all except critical
              fi
          else
              echo "✅ No security alerts found"
          fi

          echo "total-alerts=$TOTAL_ALERTS" >> $GITHUB_OUTPUT
          echo "critical-alerts=$CRITICAL_ALERTS" >> $GITHUB_OUTPUT

          # Security report
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🛡️ Security Alert Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count | Action Needed |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|---------------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🚨 Critical | $CRITICAL_ALERTS | $(if [[ "$CRITICAL_ALERTS" -gt "0" ]]; then echo "**IMMEDIATE**"; else echo "None"; fi) |" >> $GITHUB_STEP_SUMMARY
          echo "| ⚠️ High | $HIGH_ALERTS | $(if [[ "$HIGH_ALERTS" -gt "0" ]]; then echo "**Priority**"; else echo "None"; fi) |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔶 Medium | $MEDIUM_ALERTS | Review |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔷 Low | $LOW_ALERTS | Monitor |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **$TOTAL_ALERTS** | - |" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # UNIFIED ALERTING & NOTIFICATIONS
  # ============================================================================
  unified-alerting:
    name: "📢 Unified Alerting System"
    runs-on: ubuntu-latest
    needs: [unified-health-check, performance-monitoring, security-alert-management]
    if: always() && (needs.unified-health-check.result != 'skipped' || needs.performance-monitoring.result != 'skipped' || needs.security-alert-management.result != 'skipped')
    steps:
      - name: "📊 Generate Comprehensive Report"
        run: |
          echo "📊 Generating comprehensive monitoring report..."

          HEALTH_SCORE="${{ needs.unified-health-check.outputs.health-score || '100' }}"
          PERF_SCORE="${{ needs.performance-monitoring.outputs.performance-score || '100' }}"
          CRITICAL_ISSUES="${{ needs.unified-health-check.outputs.critical-issues }}"
          PERF_ALERTS="${{ needs.performance-monitoring.outputs.alerts-needed }}"
          TOTAL_ALERTS="${{ needs.security-alert-management.outputs.total-alerts || '0' }}"
          CRITICAL_SEC_ALERTS="${{ needs.security-alert-management.outputs.critical-alerts || '0' }}"

          # Calculate overall system health
          OVERALL_HEALTH=$(( (HEALTH_SCORE + PERF_SCORE) / 2 ))

          # Determine alert level
          ALERT_LEVEL="INFO"
          if [[ "$CRITICAL_SEC_ALERTS" -gt "0" || "$OVERALL_HEALTH" -lt "60" ]]; then
              ALERT_LEVEL="CRITICAL"
          elif [[ -n "$CRITICAL_ISSUES" || -n "$PERF_ALERTS" || "$OVERALL_HEALTH" -lt "80" ]]; then
              ALERT_LEVEL="WARNING"
          fi

          echo "🎯 Overall System Health: $OVERALL_HEALTH/100"
          echo "🚨 Alert Level: $ALERT_LEVEL"

          # Create comprehensive summary
          echo "## 📊 Unified Monitoring Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🎯 Overall System Health**: $OVERALL_HEALTH/100" >> $GITHUB_STEP_SUMMARY
          echo "**🚨 Alert Level**: $ALERT_LEVEL" >> $GITHUB_STEP_SUMMARY
          echo "**📅 Report Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "$ALERT_LEVEL" == "CRITICAL" ]]; then
              echo "🚨 **CRITICAL ISSUES DETECTED**" >> $GITHUB_STEP_SUMMARY
              if [[ "$CRITICAL_SEC_ALERTS" -gt "0" ]]; then
                  echo "- $CRITICAL_SEC_ALERTS critical security alerts require immediate attention" >> $GITHUB_STEP_SUMMARY
              fi
              if [[ -n "$CRITICAL_ISSUES" ]]; then
                  echo "- System health issues: $CRITICAL_ISSUES" >> $GITHUB_STEP_SUMMARY
              fi
          elif [[ "$ALERT_LEVEL" == "WARNING" ]]; then
              echo "⚠️ **Issues Detected - Action Recommended**" >> $GITHUB_STEP_SUMMARY
              if [[ -n "$CRITICAL_ISSUES" ]]; then
                  echo "- Health issues: $CRITICAL_ISSUES" >> $GITHUB_STEP_SUMMARY
              fi
              if [[ -n "$PERF_ALERTS" ]]; then
                  echo "- Performance issues: $PERF_ALERTS" >> $GITHUB_STEP_SUMMARY
              fi
          else
              echo "✅ **All Systems Operating Normally**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: "📱 Send Telegram Alert"
        if: needs.unified-health-check.outputs.health-score < 80 || needs.security-alert-management.outputs.critical-alerts > 0
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [[ -n "$TELEGRAM_TOKEN" && -n "$TELEGRAM_CHAT_ID" ]]; then
              HEALTH_SCORE="${{ needs.unified-health-check.outputs.health-score || '100' }}"
              CRITICAL_ALERTS="${{ needs.security-alert-management.outputs.critical-alerts || '0' }}"

              MESSAGE="🚨 SISTEMA MÉDICO HANSENÍASE - ALERTA UNIFICADO

              🏥 Health Score: $HEALTH_SCORE/100
              🛡️ Critical Security Alerts: $CRITICAL_ALERTS
              📊 Performance Issues: ${{ needs.performance-monitoring.outputs.alerts-needed }}

              ⏰ $(date -u '+%Y-%m-%d %H:%M:%S UTC')
              🔗 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

              curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
                  -d "chat_id=$TELEGRAM_CHAT_ID" \
                  -d "text=$MESSAGE" \
                  -d "parse_mode=HTML" || echo "Telegram notification failed"
          fi

      - name: "📝 Create Issue for Critical Problems"
        if: needs.unified-health-check.outputs.health-score < 60 || needs.security-alert-management.outputs.critical-alerts > 0
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          HEALTH_SCORE="${{ needs.unified-health-check.outputs.health-score || '100' }}"
          CRITICAL_ALERTS="${{ needs.security-alert-management.outputs.critical-alerts || '0' }}"

          TITLE="🚨 Critical System Issues Detected - $(date -u '+%Y-%m-%d')"

          BODY="## 🚨 Critical System Alert

          **Health Score**: $HEALTH_SCORE/100
          **Critical Security Alerts**: $CRITICAL_ALERTS

          ### Issues Detected:
          - Health Issues: ${{ needs.unified-health-check.outputs.critical-issues }}
          - Performance Issues: ${{ needs.performance-monitoring.outputs.alerts-needed }}

          ### Action Required:
          - [ ] Investigate health endpoint failures
          - [ ] Review performance degradation
          - [ ] Address critical security alerts

          **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          **Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

          gh issue create \
              --title "$TITLE" \
              --body "$BODY" \
              --label "critical,monitoring,auto-generated" || echo "Issue creation failed"