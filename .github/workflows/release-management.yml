name: 🏷️ Release Management

on:
  push:
    branches: [main, hml]
  pull_request:
    types: [closed]
    branches: [main, hml]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      environment:
        description: 'Target environment'
        required: true
        default: 'hml'
        type: choice
        options:
          - hml
          - production

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  auto-tag:
    name: 🏷️ Auto Tag Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    outputs:
      new-tag: ${{ steps.tag.outputs.new_tag }}
      changelog: ${{ steps.tag.outputs.changelog }}
      environment: ${{ steps.env.outputs.environment }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🎯 Determine Environment
        id: env
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "tag_prefix=v" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/hml" ]; then
            echo "environment=hml" >> $GITHUB_OUTPUT
            echo "tag_prefix=hml-v" >> $GITHUB_OUTPUT
          else
            echo "environment=unknown" >> $GITHUB_OUTPUT
            echo "tag_prefix=dev-v" >> $GITHUB_OUTPUT
          fi

      - name: 🏷️ Create Tag
        id: tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ENVIRONMENT="${{ steps.env.outputs.environment }}"
          TAG_PREFIX="${{ steps.env.outputs.tag_prefix }}"
          
          # Get the latest tag for this environment
          if [ "$ENVIRONMENT" == "production" ]; then
            LATEST_TAG=$(git tag -l "v*" | grep -v "hml-v" | grep -v "dev-v" | sort -V | tail -n1)
          elif [ "$ENVIRONMENT" == "hml" ]; then
            LATEST_TAG=$(git tag -l "hml-v*" | sort -V | tail -n1)
          else
            LATEST_TAG=$(git tag -l "dev-v*" | sort -V | tail -n1)
          fi
          
          if [ -z "$LATEST_TAG" ]; then
            # First release
            NEW_VERSION="1.0.0"
          else
            # Extract version number
            VERSION=$(echo $LATEST_TAG | sed "s/${TAG_PREFIX}//")
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)
            PATCH=$(echo $VERSION | cut -d. -f3)
            
            # Determine increment based on commit messages or workflow input
            if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              INCREMENT_TYPE="${{ github.event.inputs.version_type }}"
            else
              # Analyze commit messages
              COMMITS_SINCE_LAST=$(git log ${LATEST_TAG}..HEAD --oneline)
              
              if echo "$COMMITS_SINCE_LAST" | grep -i "breaking\|major"; then
                INCREMENT_TYPE="major"
              elif echo "$COMMITS_SINCE_LAST" | grep -i "feat\|minor"; then
                INCREMENT_TYPE="minor"
              else
                INCREMENT_TYPE="patch"
              fi
            fi
            
            # Calculate new version
            case $INCREMENT_TYPE in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          NEW_TAG="${TAG_PREFIX}${NEW_VERSION}"
          
          # Generate changelog
          if [ -n "$LATEST_TAG" ]; then
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --no-merges -10)
          fi
          
          # Create tag with authentication
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Create the tag
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG for $ENVIRONMENT environment

Changelog:
$CHANGELOG

Environment: $ENVIRONMENT
Branch: ${{ github.ref_name }}
Commit: ${{ github.sha }}"
          
          # Push tag using GITHUB_TOKEN
          git push origin "$NEW_TAG"
          
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "✅ Created tag: $NEW_TAG"

  create-release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs: auto-tag
    if: needs.auto-tag.outputs.new-tag != ''
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ needs.auto-tag.outputs.new-tag }}"
          ENVIRONMENT="${{ needs.auto-tag.outputs.environment }}"
          
          # Determine release type
          if [ "$ENVIRONMENT" == "production" ]; then
            RELEASE_TITLE="🚀 Production Release $TAG"
            IS_PRERELEASE=false
          else
            RELEASE_TITLE="🧪 $ENVIRONMENT Release $TAG"
            IS_PRERELEASE=true
          fi
          
          # Create release body
          cat > release_notes.md << EOF
# Release Notes - $TAG

## 🌟 Environment
**Target:** $ENVIRONMENT

## 📝 Changes
${{ needs.auto-tag.outputs.changelog }}

## 🔄 Deployment Status
- **Backend**: Will be deployed automatically via main pipeline
- **Frontend**: Will be deployed automatically via main pipeline

## 🧪 Testing
- **Branch**: ${{ github.ref_name }}
- **Commit**: ${{ github.sha }}

## 📦 Artifacts
This release includes both backend (Python Flask) and frontend (Next.js) components.

---
*This release was created automatically by GitHub Actions*
EOF
          
          # Create the release
          gh release create "$TAG" \
            --title "$RELEASE_TITLE" \
            --notes-file release_notes.md \
            --target ${{ github.sha }} \
            $([ "$IS_PRERELEASE" = true ] && echo "--prerelease" || echo "")
          
          echo "✅ Created release: $TAG"

  notify-deployment:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [auto-tag, create-release]
    if: needs.auto-tag.outputs.new-tag != ''
    
    steps:
      - name: 📢 Post Release Notification
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ needs.auto-tag.outputs.new-tag }}"
          ENVIRONMENT="${{ needs.auto-tag.outputs.environment }}"
          
          # Create deployment issue for tracking
          gh issue create \
            --title "🚀 Deploy $TAG to $ENVIRONMENT" \
            --body "## 🚀 Deployment Tracking

**Release:** $TAG
**Environment:** $ENVIRONMENT
**Branch:** ${{ github.ref_name }}
**Commit:** ${{ github.sha }}

## 📋 Deployment Checklist
- [ ] Backend deployed to Cloud Run
- [ ] Frontend deployed to Firebase
- [ ] Health checks passing
- [ ] Monitoring active

## 🔗 Links
- Release: https://github.com/${{ github.repository }}/releases/tag/$TAG
- Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

This issue will be automatically updated by the deployment pipeline." \
            --label "deployment,$ENVIRONMENT,automated"
          
          echo "✅ Created deployment tracking issue"

  manual-tag:
    name: 🏷️ Manual Tag Creation
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Create Manual Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          
          if [ "$ENVIRONMENT" == "production" ]; then
            TAG_PREFIX="v"
            LATEST_TAG=$(git tag -l "v*" | grep -v "hml-v" | grep -v "dev-v" | sort -V | tail -n1)
          else
            TAG_PREFIX="hml-v"
            LATEST_TAG=$(git tag -l "hml-v*" | sort -V | tail -n1)
          fi
          
          if [ -z "$LATEST_TAG" ]; then
            NEW_VERSION="1.0.0"
          else
            VERSION=$(echo $LATEST_TAG | sed "s/${TAG_PREFIX}//")
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)  
            PATCH=$(echo $VERSION | cut -d. -f3)
            
            case $VERSION_TYPE in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          NEW_TAG="${TAG_PREFIX}${NEW_VERSION}"
          
          # Create tag
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$NEW_TAG" -m "Manual release $NEW_TAG for $ENVIRONMENT

Version Type: $VERSION_TYPE
Requested by: ${{ github.actor }}
Branch: ${{ github.ref_name }}
Commit: ${{ github.sha }}"
          
          git push origin "$NEW_TAG"
          
          echo "✅ Created manual tag: $NEW_TAG"