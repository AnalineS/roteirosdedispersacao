name: 🏷️ Dependabot Release Manager

on:
  push:
    branches: [dependabot-updates]
  pull_request:
    branches: [main, hml]
    types: [closed]
    # Só executar para PRs vindos da dependabot-updates branch
    head:
      ref: 'dependabot-updates'

env:
  TIMEZONE: 'America/Sao_Paulo'

jobs:
  # =====================================
  # 1. DETECTAR TIPO DE ATUALIZAÇÕES
  # =====================================
  detect-updates:
    name: 🔍 Detect Update Types
    runs-on: ubuntu-latest
    outputs:
      has-frontend: ${{ steps.changes.outputs.frontend }}
      has-backend: ${{ steps.changes.outputs.backend }}
      has-actions: ${{ steps.changes.outputs.actions }}
      release-type: ${{ steps.version.outputs.type }}
      next-version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: 🔍 Detect Changes
        id: changes
        run: |
          # Detectar mudanças nos últimos commits
          FRONTEND_CHANGED=$(git diff --name-only HEAD~1 HEAD | grep -E '^apps/frontend-nextjs/' | wc -l)
          BACKEND_CHANGED=$(git diff --name-only HEAD~1 HEAD | grep -E '^apps/backend/' | wc -l)
          ACTIONS_CHANGED=$(git diff --name-only HEAD~1 HEAD | grep -E '^\.github/workflows/' | wc -l)
          
          echo "frontend=$([ $FRONTEND_CHANGED -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "backend=$([ $BACKEND_CHANGED -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "actions=$([ $ACTIONS_CHANGED -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: 🏷️ Calculate Next Version
        id: version
        run: |
          # Obter última tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"
          
          # Extrair números da versão
          VERSION_REGEX='v([0-9]+)\.([0-9]+)\.([0-9]+)'
          if [[ $LAST_TAG =~ $VERSION_REGEX ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
          else
            MAJOR=1
            MINOR=0
            PATCH=0
          fi
          
          # Determinar tipo de release baseado nas mudanças
          if [[ "${{ steps.changes.outputs.backend }}" == "true" && "${{ steps.changes.outputs.frontend }}" == "true" ]]; then
            # Full stack update = minor version
            MINOR=$((MINOR + 1))
            PATCH=0
            RELEASE_TYPE="minor"
          elif [[ "${{ steps.changes.outputs.actions }}" == "true" ]]; then
            # CI/CD updates = patch version
            PATCH=$((PATCH + 1))
            RELEASE_TYPE="patch"
          else
            # Single component = patch version
            PATCH=$((PATCH + 1))
            RELEASE_TYPE="patch"
          fi
          
          NEXT_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next version: $NEXT_VERSION ($RELEASE_TYPE)"

  # =====================================
  # 2. CRIAR TAG E RELEASE
  # =====================================
  create-release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs: detect-updates
    if: github.event_name == 'push' && github.ref == 'refs/heads/dependabot-updates'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🏷️ Create Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          TAG="${{ needs.detect-updates.outputs.next-version }}"
          
          # Criar tag anotada
          git tag -a "$TAG" -m "🤖 Dependabot Updates Release $TAG

          📦 Updates Applied:
          - Frontend: ${{ needs.detect-updates.outputs.has-frontend }}
          - Backend: ${{ needs.detect-updates.outputs.has-backend }}
          - Actions: ${{ needs.detect-updates.outputs.has-actions }}
          
          🔧 Release Type: ${{ needs.detect-updates.outputs.release-type }}
          🗓️  Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          🤖 Generated automatically by Dependabot Release Manager"
          
          git push origin "$TAG"

      - name: 📝 Generate Release Notes
        id: notes
        run: |
          # Gerar release notes automáticas
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [[ -n "$LAST_TAG" ]]; then
            COMMITS=$(git log --oneline ${LAST_TAG}..HEAD --pretty=format:"- %s" | grep -E "(feat|fix|chore)" | head -20)
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s" | grep -E "(feat|fix|chore)" | head -10)
          fi
          
          # Criar release notes
          cat > release_notes.md << EOF
          ## 🤖 Automated Dependabot Updates
          
          ### 📊 Changes Summary:
          - **Frontend Updates**: ${{ needs.detect-updates.outputs.has-frontend == 'true' && '✅' || '❌' }}
          - **Backend Updates**: ${{ needs.detect-updates.outputs.has-backend == 'true' && '✅' || '❌' }}  
          - **GitHub Actions Updates**: ${{ needs.detect-updates.outputs.has-actions == 'true' && '✅' || '❌' }}
          
          ### 🔧 Release Details:
          - **Type**: ${{ needs.detect-updates.outputs.release-type }}
          - **Version**: ${{ needs.detect-updates.outputs.next-version }}
          - **Branch**: dependabot-updates
          
          ### 📝 Recent Changes:
          $COMMITS
          
          ### 🚀 Deployment:
          This release will be automatically deployed to HML and Production environments after testing.
          
          ---
          *🤖 This release was automatically generated by the Dependabot Release Manager*
          EOF

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.detect-updates.outputs.next-version }}
          name: "🤖 Dependencies Update ${{ needs.detect-updates.outputs.next-version }}"
          body_path: release_notes.md
          draft: false
          prerelease: ${{ needs.detect-updates.outputs.release-type == 'patch' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =====================================
  # 3. CRIAR PRS PARA MAIN E HML
  # =====================================
  create-deployment-prs:
    name: 📤 Create Deployment PRs
    runs-on: ubuntu-latest
    needs: [detect-updates, create-release]
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5

      - name: 🔀 Create PR to Main
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: "deploy/dependabot-to-main-${{ needs.detect-updates.outputs.next-version }}"
          base: main
          title: "🤖 Deploy Dependabot Updates ${{ needs.detect-updates.outputs.next-version }} to Production"
          body: |
            ## 🚀 Automated Deployment to Production
            
            **Release**: ${{ needs.detect-updates.outputs.next-version }}
            **Type**: ${{ needs.detect-updates.outputs.release-type }}
            **Source**: dependabot-updates branch
            
            ### 📦 Updates Included:
            - Frontend: ${{ needs.detect-updates.outputs.has-frontend }}
            - Backend: ${{ needs.detect-updates.outputs.has-backend }}
            - GitHub Actions: ${{ needs.detect-updates.outputs.has-actions }}
            
            ### ✅ Pre-deployment Checklist:
            - [x] Dependabot updates tested in isolation
            - [x] Release tag created automatically
            - [ ] Code review completed
            - [ ] CI/CD pipeline passing
            
            **🤖 This PR was automatically created by Dependabot Release Manager**
          labels: |
            dependencies
            auto-release
            production-deploy
          assignees: AnalineS
          reviewers: AnalineS

      - name: 🔀 Create PR to HML  
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: "deploy/dependabot-to-hml-${{ needs.detect-updates.outputs.next-version }}"
          base: hml
          title: "🤖 Deploy Dependabot Updates ${{ needs.detect-updates.outputs.next-version }} to HML"
          body: |
            ## 🧪 Automated Deployment to HML
            
            **Release**: ${{ needs.detect-updates.outputs.next-version }}
            **Type**: ${{ needs.detect-updates.outputs.release-type }}
            **Source**: dependabot-updates branch
            
            ### 📦 Updates Included:
            - Frontend: ${{ needs.detect-updates.outputs.has-frontend }}
            - Backend: ${{ needs.detect-updates.outputs.has-backend }}
            - GitHub Actions: ${{ needs.detect-updates.outputs.has-actions }}
            
            ### 🧪 Testing Pipeline:
            - [x] Dependabot updates consolidated
            - [x] Release tag created
            - [ ] HML environment testing
            - [ ] Smoke tests passing
            
            **🤖 This PR was automatically created by Dependabot Release Manager**
          labels: |
            dependencies
            auto-release
            hml-deploy
          assignees: AnalineS
          reviewers: AnalineS

# =====================================
# WORKFLOW CONFIGURATION
# =====================================
concurrency:
  group: dependabot-release-${{ github.ref }}
  cancel-in-progress: false