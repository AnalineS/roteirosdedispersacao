name: "üîí Advanced Security Scanning"

on:
  schedule:
    # Run comprehensive security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - 'quick'
          - 'comprehensive'
          - 'deep'
      target_environment:
        description: 'Environment to scan'
        required: true
        default: 'both'
        type: choice
        options:
          - 'staging'
          - 'production'
          - 'both'
      create_issues:
        description: 'Create GitHub issues for vulnerabilities'
        type: boolean
        default: true

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  security-events: write
  actions: read
  issues: write
  pull-requests: write

jobs:
  # ============================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # ============================================================================
  dependency-scan:
    name: "üì¶ Dependency Vulnerability Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      frontend-vulns: ${{ steps.frontend-scan.outputs.vulnerabilities }}
      backend-vulns: ${{ steps.backend-scan.outputs.vulnerabilities }}
      critical-count: ${{ steps.summary.outputs.critical-count }}
      high-count: ${{ steps.summary.outputs.high-count }}
    steps:
      - uses: actions/checkout@v4

      - name: "‚ö° Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/frontend-nextjs/package-lock.json

      - name: "üêç Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: "üì¶ Install Dependencies"
        run: |
          # Frontend dependencies
          cd apps/frontend-nextjs
          npm ci

          # Backend dependencies
          cd ../backend
          pip install -r requirements.txt
          pip install safety pip-audit bandit

      - name: "üîç Frontend Dependency Scan"
        id: frontend-scan
        run: |
          echo "üîç Scanning frontend dependencies..."
          cd apps/frontend-nextjs

          # NPM Audit with detailed JSON output
          npm audit --audit-level=low --json > /tmp/frontend-audit.json || true

          # Parse results
          if [[ -f "/tmp/frontend-audit.json" ]]; then
              TOTAL_VULNS=$(cat /tmp/frontend-audit.json | jq -r '.metadata.vulnerabilities | to_entries | map(.value) | add' 2>/dev/null || echo "0")
              CRITICAL_VULNS=$(cat /tmp/frontend-audit.json | jq -r '.metadata.vulnerabilities.critical' 2>/dev/null || echo "0")
              HIGH_VULNS=$(cat /tmp/frontend-audit.json | jq -r '.metadata.vulnerabilities.high' 2>/dev/null || echo "0")
              MODERATE_VULNS=$(cat /tmp/frontend-audit.json | jq -r '.metadata.vulnerabilities.moderate' 2>/dev/null || echo "0")
              LOW_VULNS=$(cat /tmp/frontend-audit.json | jq -r '.metadata.vulnerabilities.low' 2>/dev/null || echo "0")

              echo "üìä Frontend Vulnerability Summary:"
              echo "  - Critical: $CRITICAL_VULNS"
              echo "  - High: $HIGH_VULNS"
              echo "  - Moderate: $MODERATE_VULNS"
              echo "  - Low: $LOW_VULNS"
              echo "  - Total: $TOTAL_VULNS"

              # Extract specific vulnerabilities
              if [[ "$TOTAL_VULNS" -gt "0" ]]; then
                  echo "üö® Vulnerable packages:"
                  cat /tmp/frontend-audit.json | jq -r '.vulnerabilities | to_entries[] | "  - \(.key): \(.value.severity) (\(.value.via[0].title // .value.via[0]))"' 2>/dev/null || echo "  - Could not parse specific vulnerabilities"
              fi

              echo "vulnerabilities={\"total\":$TOTAL_VULNS,\"critical\":$CRITICAL_VULNS,\"high\":$HIGH_VULNS,\"moderate\":$MODERATE_VULNS,\"low\":$LOW_VULNS}" >> $GITHUB_OUTPUT
          else
              echo "‚úÖ No vulnerabilities found in frontend"
              echo "vulnerabilities={\"total\":0,\"critical\":0,\"high\":0,\"moderate\":0,\"low\":0}" >> $GITHUB_OUTPUT
          fi

      - name: "üîç Backend Dependency Scan"
        id: backend-scan
        run: |
          echo "üîç Scanning backend dependencies..."
          cd apps/backend

          # Safety check
          echo "üõ°Ô∏è Running Safety scan..."
          safety check --json > /tmp/safety-report.json || true

          # pip-audit check
          echo "üîç Running pip-audit scan..."
          pip-audit --format=json --output=/tmp/pip-audit-report.json || true

          # Parse Safety results
          SAFETY_VULNS=0
          if [[ -f "/tmp/safety-report.json" ]]; then
              SAFETY_VULNS=$(cat /tmp/safety-report.json | jq '. | length' 2>/dev/null || echo "0")
              echo "üìä Safety vulnerabilities: $SAFETY_VULNS"

              if [[ "$SAFETY_VULNS" -gt "0" ]]; then
                  echo "üö® Safety vulnerabilities found:"
                  cat /tmp/safety-report.json | jq -r '.[] | "  - \(.package_name) \(.analyzed_version): \(.vulnerability_id)"' 2>/dev/null || echo "  - Could not parse Safety vulnerabilities"
              fi
          fi

          # Parse pip-audit results
          PIP_AUDIT_VULNS=0
          if [[ -f "/tmp/pip-audit-report.json" ]]; then
              PIP_AUDIT_VULNS=$(cat /tmp/pip-audit-report.json | jq '.dependencies | length' 2>/dev/null || echo "0")
              echo "üìä Pip-audit vulnerabilities: $PIP_AUDIT_VULNS"

              if [[ "$PIP_AUDIT_VULNS" -gt "0" ]]; then
                  echo "üö® Pip-audit vulnerabilities found:"
                  cat /tmp/pip-audit-report.json | jq -r '.dependencies[] | "  - \(.name) \(.version): \(.vulns[0].id)"' 2>/dev/null || echo "  - Could not parse pip-audit vulnerabilities"
              fi
          fi

          TOTAL_BACKEND_VULNS=$((SAFETY_VULNS + PIP_AUDIT_VULNS))
          echo "üìä Total backend vulnerabilities: $TOTAL_BACKEND_VULNS"

          echo "vulnerabilities={\"total\":$TOTAL_BACKEND_VULNS,\"safety\":$SAFETY_VULNS,\"pip_audit\":$PIP_AUDIT_VULNS}" >> $GITHUB_OUTPUT

      - name: "üìä Vulnerability Summary"
        id: summary
        run: |
          echo "üìä Generating vulnerability summary..."

          # Parse frontend results
          FRONTEND_VULNS='${{ steps.frontend-scan.outputs.vulnerabilities }}'
          FRONTEND_CRITICAL=$(echo "$FRONTEND_VULNS" | jq -r '.critical' 2>/dev/null || echo "0")
          FRONTEND_HIGH=$(echo "$FRONTEND_VULNS" | jq -r '.high' 2>/dev/null || echo "0")

          # Parse backend results
          BACKEND_VULNS='${{ steps.backend-scan.outputs.vulnerabilities }}'
          BACKEND_TOTAL=$(echo "$BACKEND_VULNS" | jq -r '.total' 2>/dev/null || echo "0")

          # Assume backend vulns are high severity (conservative approach)
          TOTAL_CRITICAL=$FRONTEND_CRITICAL
          TOTAL_HIGH=$((FRONTEND_HIGH + BACKEND_TOTAL))

          echo "üìä Overall Security Summary:"
          echo "  - Critical vulnerabilities: $TOTAL_CRITICAL"
          echo "  - High vulnerabilities: $TOTAL_HIGH"

          echo "critical-count=$TOTAL_CRITICAL" >> $GITHUB_OUTPUT
          echo "high-count=$TOTAL_HIGH" >> $GITHUB_OUTPUT

          # Set workflow status based on severity
          if [[ "$TOTAL_CRITICAL" -gt "0" ]]; then
              echo "üö® CRITICAL vulnerabilities detected!"
              echo "::error::Critical security vulnerabilities found: $TOTAL_CRITICAL"
          elif [[ "$TOTAL_HIGH" -gt "5" ]]; then
              echo "‚ö†Ô∏è Multiple HIGH vulnerabilities detected!"
              echo "::warning::High security vulnerabilities found: $TOTAL_HIGH"
          fi

      - name: "üìÑ Store Vulnerability Reports"
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-reports
          path: |
            /tmp/frontend-audit.json
            /tmp/safety-report.json
            /tmp/pip-audit-report.json
          retention-days: 30

  # ============================================================================
  # STATIC APPLICATION SECURITY TESTING (SAST)
  # ============================================================================
  sast-scan:
    name: "üîç Static Application Security Testing"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: dependency-scan
    strategy:
      matrix:
        language: ['javascript', 'python']
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "üîç Initialize CodeQL"
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
          config-file: ./.github/codeql-config.yml

      - name: "‚ö° Setup Environment"
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "üêç Setup Python"
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "üì¶ Install Dependencies"
        run: |
          if [[ "${{ matrix.language }}" == "javascript" ]]; then
              cd apps/frontend-nextjs
              npm ci
          elif [[ "${{ matrix.language }}" == "python" ]]; then
              cd apps/backend
              pip install -r requirements.txt
          fi

      - name: "üî® Autobuild"
        uses: github/codeql-action/autobuild@v3

      - name: "üîç Perform CodeQL Analysis"
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          output: sarif-results
          upload: true

      - name: "üîç Additional Python Security Analysis"
        if: matrix.language == 'python'
        run: |
          echo "üîç Running additional Python security analysis..."
          cd apps/backend

          # Bandit security analysis
          echo "üõ°Ô∏è Running Bandit analysis..."
          bandit -r . -f json -o /tmp/bandit-report.json || true

          if [[ -f "/tmp/bandit-report.json" ]]; then
              BANDIT_ISSUES=$(cat /tmp/bandit-report.json | jq '.results | length' 2>/dev/null || echo "0")
              echo "üìä Bandit found $BANDIT_ISSUES security issues"

              if [[ "$BANDIT_ISSUES" -gt "0" ]]; then
                  echo "üö® Bandit security issues:"
                  cat /tmp/bandit-report.json | jq -r '.results[] | "  - \(.filename):\(.line_number) [\(.test_name)] \(.issue_text)"' 2>/dev/null || echo "  - Could not parse Bandit results"
              fi
          fi

          # Semgrep analysis
          echo "üîç Running Semgrep analysis..."
          if command -v semgrep >/dev/null 2>&1; then
              semgrep --config=auto --json --output=/tmp/semgrep-report.json . || true

              if [[ -f "/tmp/semgrep-report.json" ]]; then
                  SEMGREP_ISSUES=$(cat /tmp/semgrep-report.json | jq '.results | length' 2>/dev/null || echo "0")
                  echo "üìä Semgrep found $SEMGREP_ISSUES potential issues"

                  if [[ "$SEMGREP_ISSUES" -gt "0" ]]; then
                      echo "üö® Semgrep findings:"
                      cat /tmp/semgrep-report.json | jq -r '.results[] | "  - \(.path):\(.start.line) [\(.check_id)] \(.extra.message)"' 2>/dev/null || echo "  - Could not parse Semgrep results"
                  fi
              fi
          else
              echo "‚ö†Ô∏è Semgrep not available, skipping"
          fi

      - name: "üìÑ Store SAST Reports"
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports-${{ matrix.language }}
          path: |
            /tmp/bandit-report.json
            /tmp/semgrep-report.json
          retention-days: 30

  # ============================================================================
  # SECRETS DETECTION
  # ============================================================================
  secrets-scan:
    name: "üîê Secrets Detection"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "üîê Scan for Secrets"
        run: |
          echo "üîê Scanning for exposed secrets and sensitive data..."

          # Define patterns for medical and application secrets
          SECRET_PATTERNS=(
            # API Keys and tokens
            "api[_-]?key['\"]?\s*[:=]\s*['\"][a-zA-Z0-9_-]{16,}['\"]"
            "secret[_-]?key['\"]?\s*[:=]\s*['\"][a-zA-Z0-9_-]{16,}['\"]"
            "access[_-]?token['\"]?\s*[:=]\s*['\"][a-zA-Z0-9_-]{16,}['\"]"

            # Database credentials
            "password['\"]?\s*[:=]\s*['\"][^'\"]{8,}['\"]"
            "passwd['\"]?\s*[:=]\s*['\"][^'\"]{8,}['\"]"
            "db[_-]?password['\"]?\s*[:=]\s*['\"][^'\"]{8,}['\"]"

            # Medical sensitive data
            "cpf['\"]?\s*[:=]\s*['\"]?[0-9]{11}['\"]?"
            "cns['\"]?\s*[:=]\s*['\"]?[0-9]{15}['\"]?"
            "crm['\"]?\s*[:=]\s*['\"]?[0-9]{4,8}['\"]?"

            # Cloud and service keys
            "google[_-]?api[_-]?key"
            "aws[_-]?access[_-]?key"
            "-----BEGIN.*PRIVATE KEY-----"

            # JWT and crypto
            "jwt[_-]?secret"
            "private[_-]?key"
            "auth[_-]?token"
          )

          # Files to scan (exclude common non-sensitive files)
          SCAN_PATHS=(
            "apps/"
            "scripts/"
            ".github/"
            "docs/"
          )

          SECRETS_FOUND=false
          SECRETS_COUNT=0

          echo "üîç Scanning for secrets in code..."

          for path in "${SCAN_PATHS[@]}"; do
              if [[ -d "$path" ]]; then
                  echo "üìÅ Scanning $path..."

                  for pattern in "${SECRET_PATTERNS[@]}"; do
                      # Use grep with Perl regex for advanced patterns
                      MATCHES=$(find "$path" -type f \( -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.tsx" -o -name "*.json" -o -name "*.yml" -o -name "*.yaml" \) \
                          -not -path "*/node_modules/*" \
                          -not -path "*/.next/*" \
                          -not -path "*/dist/*" \
                          -not -path "*/__pycache__/*" \
                          -exec grep -l -P "$pattern" {} \; 2>/dev/null || true)

                      if [[ -n "$MATCHES" ]]; then
                          echo "üö® POTENTIAL SECRET DETECTED:"
                          echo "  Pattern: $pattern"
                          echo "  Files: $MATCHES"
                          SECRETS_FOUND=true
                          SECRETS_COUNT=$((SECRETS_COUNT + 1))
                      fi
                  done
              fi
          done

          # Scan git history for recently added secrets
          echo "üîç Scanning recent git history..."
          if git log --oneline -10 --grep="password\|secret\|key\|token" | head -5; then
              echo "‚ö†Ô∏è Found commits with potential secret-related keywords"
              echo "::warning::Recent commits contain secret-related keywords"
          fi

          # Summary
          echo "üìä Secrets scan summary:"
          echo "  - Patterns checked: ${#SECRET_PATTERNS[@]}"
          echo "  - Potential secrets found: $SECRETS_COUNT"

          if [[ "$SECRETS_FOUND" == "true" ]]; then
              echo "üö® SECRETS DETECTED!"
              echo "::error::Potential secrets or sensitive data found in code"
              exit 1
          else
              echo "‚úÖ No secrets detected in scan"
          fi

  # ============================================================================
  # CONTAINER SECURITY SCAN
  # ============================================================================
  container-scan:
    name: "üê≥ Container Security Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.scan_type == 'comprehensive' || github.event.inputs.scan_type == 'deep'
    steps:
      - uses: actions/checkout@v4

      - name: "üîë Google Cloud Auth"
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: "‚ö° Setup Cloud SDK"
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: "üê≥ Container Vulnerability Scan"
        run: |
          echo "üê≥ Scanning container images for vulnerabilities..."

          # Function to scan container image
          scan_container() {
              local image_name=$1
              local service_name=$2

              echo "üîç Scanning $service_name: $image_name"

              # Use gcloud to scan container image
              if gcloud container images scan "$image_name" --format=json > "/tmp/${service_name}-scan.json" 2>/dev/null; then
                  echo "‚úÖ Container scan completed for $service_name"

                  # Parse results
                  CRITICAL_VULNS=$(cat "/tmp/${service_name}-scan.json" | jq '.vulnerabilities[] | select(.severity == "CRITICAL") | length' 2>/dev/null || echo "0")
                  HIGH_VULNS=$(cat "/tmp/${service_name}-scan.json" | jq '.vulnerabilities[] | select(.severity == "HIGH") | length' 2>/dev/null || echo "0")

                  echo "üìä $service_name vulnerabilities:"
                  echo "  - Critical: $CRITICAL_VULNS"
                  echo "  - High: $HIGH_VULNS"

                  if [[ "$CRITICAL_VULNS" -gt "0" ]]; then
                      echo "üö® Critical vulnerabilities found in $service_name container!"
                      echo "::error::Critical container vulnerabilities in $service_name: $CRITICAL_VULNS"
                  fi
              else
                  echo "‚ö†Ô∏è Could not scan $service_name container (may not exist or no access)"
              fi
          }

          # Scan staging containers
          scan_container "us-central1-docker.pkg.dev/red-truck-468923-s4/hml-roteiro-dispensacao/hml-roteiro-dispensacao-frontend" "staging-frontend"
          scan_container "us-central1-docker.pkg.dev/red-truck-468923-s4/hml-roteiro-dispensacao/hml-roteiro-dispensacao-backend" "staging-backend"

          # Scan production containers
          scan_container "us-central1-docker.pkg.dev/red-truck-468923-s4/hml-roteiro-dispensacao/roteiro-dispensacao-frontend" "production-frontend"
          scan_container "us-central1-docker.pkg.dev/red-truck-468923-s4/hml-roteiro-dispensacao/roteiro-dispensacao-backend" "production-backend"

      - name: "üìÑ Store Container Scan Reports"
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-reports
          path: /tmp/*-scan.json
          retention-days: 30

  # ============================================================================
  # SECURITY REPORT GENERATION & ALERTING
  # ============================================================================
  security-report:
    name: "üìä Security Report & Alerts"
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secrets-scan]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: "üìä Generate Security Report"
        run: |
          echo "## üîí Security Scanning Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Type**: ${{ github.event.inputs.scan_type || 'scheduled' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Dependency scan results
          CRITICAL_COUNT="${{ needs.dependency-scan.outputs.critical-count }}"
          HIGH_COUNT="${{ needs.dependency-scan.outputs.high-count }}"

          echo "### üì¶ Dependency Vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Critical | $CRITICAL_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| High | $HIGH_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # SAST results
          echo "### üîç Static Analysis Security Testing" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.sast-scan.result }}" == "success" ]]; then
              echo "- ‚úÖ JavaScript/TypeScript SAST completed" >> $GITHUB_STEP_SUMMARY
              echo "- ‚úÖ Python SAST completed" >> $GITHUB_STEP_SUMMARY
          else
              echo "- ‚ùå SAST scan encountered issues" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Secrets scan results
          echo "### üîê Secrets Detection" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.secrets-scan.result }}" == "success" ]]; then
              echo "- ‚úÖ No secrets detected in codebase" >> $GITHUB_STEP_SUMMARY
          else
              echo "- üö® **CRITICAL**: Potential secrets detected in code" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Container scan results (if applicable)
          if [[ "${{ needs.container-scan.result }}" == "success" ]]; then
              echo "### üê≥ Container Security" >> $GITHUB_STEP_SUMMARY
              echo "- ‚úÖ Container vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Overall security assessment
          echo "### üéØ Security Assessment" >> $GITHUB_STEP_SUMMARY
          TOTAL_CRITICAL_ISSUES=$((CRITICAL_COUNT))
          if [[ "${{ needs.secrets-scan.result }}" != "success" ]]; then
              TOTAL_CRITICAL_ISSUES=$((TOTAL_CRITICAL_ISSUES + 1))
          fi

          if [[ "$TOTAL_CRITICAL_ISSUES" -eq "0" ]] && [[ "$HIGH_COUNT" -lt "5" ]]; then
              echo "üü¢ **Good**: Security posture is acceptable" >> $GITHUB_STEP_SUMMARY
          elif [[ "$TOTAL_CRITICAL_ISSUES" -eq "0" ]] && [[ "$HIGH_COUNT" -lt "10" ]]; then
              echo "üü° **Moderate**: Some security issues require attention" >> $GITHUB_STEP_SUMMARY
          else
              echo "üî¥ **Critical**: Immediate security action required" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Action items
          echo "### üìã Action Items" >> $GITHUB_STEP_SUMMARY
          if [[ "$CRITICAL_COUNT" -gt "0" ]]; then
              echo "- üö® **URGENT**: Address $CRITICAL_COUNT critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "$HIGH_COUNT" -gt "5" ]]; then
              echo "- ‚ö†Ô∏è Review and remediate $HIGH_COUNT high-severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ needs.secrets-scan.result }}" != "success" ]]; then
              echo "- üîê **IMMEDIATE**: Remove exposed secrets from codebase" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- üìä Detailed reports available in workflow artifacts" >> $GITHUB_STEP_SUMMARY

      - name: "üö® Send Security Alerts"
        if: needs.dependency-scan.outputs.critical-count > '0' || needs.secrets-scan.result == 'failure'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          CRITICAL_COUNT: ${{ needs.dependency-scan.outputs.critical-count }}
          HIGH_COUNT: ${{ needs.dependency-scan.outputs.high-count }}
        run: |
          if [[ -n "$TELEGRAM_TOKEN" && -n "$TELEGRAM_CHAT_ID" ]]; then
              echo "üö® Sending security alert..."

              # Determine alert severity
              if [[ "$CRITICAL_COUNT" -gt "0" || "${{ needs.secrets-scan.result }}" == "failure" ]]; then
                  ALERT_LEVEL="üî¥ CR√çTICO DE SEGURAN√áA"
              elif [[ "$HIGH_COUNT" -gt "10" ]]; then
                  ALERT_LEVEL="üü† ALERTA DE SEGURAN√áA"
              else
                  ALERT_LEVEL="üü° AVISO DE SEGURAN√áA"
              fi

              MESSAGE="$ALERT_LEVEL%0A"
              MESSAGE="${MESSAGE}%0Aüìä <b>Vulnerabilidades Cr√≠ticas:</b> $CRITICAL_COUNT"
              MESSAGE="${MESSAGE}%0Aüìä <b>Vulnerabilidades Altas:</b> $HIGH_COUNT"

              if [[ "${{ needs.secrets-scan.result }}" == "failure" ]]; then
                  MESSAGE="${MESSAGE}%0Aüîê <b>Secrets Expostos:</b> DETECTADOS"
              fi

              MESSAGE="${MESSAGE}%0A‚è∞ <b>Data:</b> $(date '+%H:%M - %d/%m/%Y')"
              MESSAGE="${MESSAGE}%0A%0Aüîó <b>Relat√≥rio:</b> <a href=\"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\">Ver Detalhes</a>"

              curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
                -d chat_id="$TELEGRAM_CHAT_ID" \
                -d text="$MESSAGE" \
                -d parse_mode="HTML" \
                -d disable_web_page_preview="true" >/dev/null

              echo "‚úÖ Security alert sent"
          else
              echo "‚ö†Ô∏è Telegram alerts not configured"
          fi

      - name: "üìù Create Security Issues"
        if: github.event.inputs.create_issues == 'true' && (needs.dependency-scan.outputs.critical-count > '0' || needs.secrets-scan.result == 'failure')
        uses: actions/github-script@v7
        with:
          script: |
            const criticalCount = '${{ needs.dependency-scan.outputs.critical-count }}';
            const highCount = '${{ needs.dependency-scan.outputs.high-count }}';
            const secretsScanFailed = '${{ needs.secrets-scan.result }}' === 'failure';

            if (criticalCount > 0 || secretsScanFailed) {
              const title = `üö® Critical Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`;
              const body = `## üö® Critical Security Issues Detected

              **Critical Vulnerabilities**: ${criticalCount}
              **High Vulnerabilities**: ${highCount}
              **Secrets Exposed**: ${secretsScanFailed ? 'YES' : 'NO'}

              ### üîç Scan Details
              - **Scan Date**: ${new Date().toISOString()}
              - **Scan Type**: ${{ github.event.inputs.scan_type || 'scheduled' }}
              - **Environment**: ${{ github.event.inputs.target_environment || 'both' }}

              ### üö® Immediate Actions Required
              ${criticalCount > 0 ? '- [ ] **URGENT**: Remediate critical dependency vulnerabilities' : ''}
              ${secretsScanFailed ? '- [ ] **IMMEDIATE**: Remove exposed secrets from codebase' : ''}
              ${highCount > 5 ? '- [ ] Review and address high-severity vulnerabilities' : ''}
              - [ ] Update dependencies to patched versions
              - [ ] Review security scanning reports in workflow artifacts

              ### üîó References
              - [Security Scan Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              - [Security Documentation](./docs/security/)

              **Priority**: ${criticalCount > 0 || secretsScanFailed ? 'CRITICAL' : 'HIGH'}
              **Labels**: security, vulnerability, critical, automated
              `;

              // Check if similar issue already exists
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'security,critical',
                state: 'open'
              });

              if (issues.data.length === 0) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['security', 'vulnerability', 'critical', 'automated']
                });

                console.log('‚úÖ Critical security issue created');
              } else {
                console.log('‚ö†Ô∏è Critical security issue already exists');
              }
            }