name: Index Knowledge Base (One-time)

on:
  workflow_dispatch:
    inputs:
      force_reindex:
        description: 'Force reindex existing documents'
        required: false
        default: 'false'
        type: boolean

jobs:
  index-knowledge-base:
    name: 📚 Index Medical Knowledge Base
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd apps/backend
          pip install -r requirements.txt

      - name: Install HuggingFace Hub
        run: |
          pip install huggingface_hub

      - name: Run knowledge base indexing
        env:
          HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_PROJECT_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_API_KEY }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_API_KEY }}
        run: |
          cd "apps/backend"
          echo "🚀 Starting knowledge base indexing..."
          echo "Environment variables configured:"
          echo "  HUGGINGFACE_TOKEN: ${HUGGINGFACE_TOKEN:0:15}..."
          echo "  SUPABASE_URL: ${SUPABASE_URL:0:30}..."
          echo "  SUPABASE_KEY: ${SUPABASE_KEY:0:20}..."

          if [ "${{ inputs.force_reindex }}" = "true" ]; then
            python ../../scripts/index_knowledge_base.py --force
          else
            python ../../scripts/index_knowledge_base.py
          fi

      - name: Verify indexing success
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_PROJECT_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_API_KEY }}
        run: |
          cd apps/backend
          python -c "
import os
import sys
sys.path.insert(0, '.')

try:
    from supabase import create_client

    url = os.getenv('SUPABASE_URL')
    key = os.getenv('SUPABASE_KEY')

    client = create_client(url, key)

    # Query to count indexed documents
    result = client.table('medical_embeddings').select('*', count='exact').execute()
    count = result.count if hasattr(result, 'count') else len(result.data)

    print(f'✅ Verification successful!')
    print(f'📊 Total indexed documents: {count}')

    if count >= 100:
        print('🎉 Knowledge base successfully indexed!')
        sys.exit(0)
    else:
        print(f'⚠️  Expected at least 100 documents, got {count}')
        sys.exit(1)

except Exception as e:
    print(f'❌ Verification failed: {e}')
    sys.exit(1)
"

      - name: Upload indexing logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: indexing-logs
          path: |
            apps/backend/logs/
          retention-days: 7

      - name: Notify success
        if: success()
        run: |
          echo "✅ Knowledge base indexing completed successfully!"
          echo "📊 RAG system is now operational with full medical context"
          echo "🎯 Next step: Run RAG accuracy tests to verify confidence scores"
