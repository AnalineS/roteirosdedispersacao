name: "🛡️ Security Alert Management - False Positive Suppression"

on:
  schedule:
    # Run daily to manage security alerts
    - cron: '0 8 * * *'
  workflow_dispatch:
    inputs:
      force_cleanup:
        description: 'Force cleanup of all false positives'
        type: boolean
        default: false
      severity_threshold:
        description: 'Minimum severity to keep (low, medium, high, critical)'
        type: choice
        options:
          - low
          - medium
          - high
          - critical
        default: medium

permissions:
  contents: read
  security-events: write
  actions: read

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  security-alert-cleanup:
    name: "🧹 Security Alert Cleanup"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: "📊 Analyze Current Security Alerts"
        id: analyze-alerts
        run: |
          echo "🔍 Analyzing security alerts..."

          # Get all security alerts
          TOTAL_ALERTS=$(gh api repos/${{ github.repository }}/code-scanning/alerts --paginate | jq '. | length' || echo "0")
          echo "Total alerts found: $TOTAL_ALERTS"
          echo "total_alerts=$TOTAL_ALERTS" >> $GITHUB_OUTPUT

          # Count by severity
          if [ "$TOTAL_ALERTS" -gt 0 ]; then
            CRITICAL=$(gh api repos/${{ github.repository }}/code-scanning/alerts --paginate | jq '[.[] | select(.rule.severity == "error")] | length' || echo "0")
            HIGH=$(gh api repos/${{ github.repository }}/code-scanning/alerts --paginate | jq '[.[] | select(.rule.severity == "warning")] | length' || echo "0")
            MEDIUM=$(gh api repos/${{ github.repository }}/code-scanning/alerts --paginate | jq '[.[] | select(.rule.severity == "note")] | length' || echo "0")

            echo "Critical: $CRITICAL, High: $HIGH, Medium: $MEDIUM"
            echo "critical_alerts=$CRITICAL" >> $GITHUB_OUTPUT
            echo "high_alerts=$HIGH" >> $GITHUB_OUTPUT
            echo "medium_alerts=$MEDIUM" >> $GITHUB_OUTPUT
          fi

      - name: "🎯 Dismiss False Positive Patterns"
        if: steps.analyze-alerts.outputs.total_alerts != '0'
        run: |
          echo "🎯 Dismissing known false positive patterns..."

          # Define false positive patterns
          FALSE_POSITIVE_PATTERNS=(
            "js/unused-local-variable"
            "js/unreachable-statement"
            "py/unused-import"
            "py/unused-local-variable"
            "js/inconsistent-use-of-new"
            "py/redundant-assignment"
            "js/duplicate-property"
            "py/similar-function"
            "js/missing-token"
            "py/missing-call-to-init"
            "js/useless-assignment-to-local"
            "py/unused-name-in-except"
          )

          # Get alerts and dismiss false positives
          gh api repos/${{ github.repository }}/code-scanning/alerts --paginate | \
          jq -r '.[] | select(.state == "open") | "\(.number)|\(.rule.id)|\(.rule.severity)"' | \
          while IFS='|' read -r alert_number rule_id severity; do
            DISMISS=false
            REASON=""

            # Check if it's a false positive pattern
            for pattern in "${FALSE_POSITIVE_PATTERNS[@]}"; do
              if [[ "$rule_id" == *"$pattern"* ]]; then
                DISMISS=true
                REASON="False positive: $pattern pattern in non-critical code"
                break
              fi
            done

            # Check if it's in test files (additional check)
            LOCATION=$(gh api repos/${{ github.repository }}/code-scanning/alerts/$alert_number | jq -r '.most_recent_instance.location.path // "unknown"')
            if [[ "$LOCATION" == *"test"* ]] || [[ "$LOCATION" == *"spec"* ]] || [[ "$LOCATION" == *"__tests__"* ]]; then
              DISMISS=true
              REASON="False positive: Alert in test file ($LOCATION)"
            fi

            # Check if it's in node_modules or similar
            if [[ "$LOCATION" == *"node_modules"* ]] || [[ "$LOCATION" == *"venv"* ]] || [[ "$LOCATION" == *"vendor"* ]]; then
              DISMISS=true
              REASON="False positive: Alert in third-party dependency ($LOCATION)"
            fi

            # Dismiss if flagged
            if [ "$DISMISS" = true ]; then
              echo "🗑️ Dismissing alert #$alert_number: $rule_id ($REASON)"
              gh api repos/${{ github.repository }}/code-scanning/alerts/$alert_number \
                -X PATCH \
                -f state='dismissed' \
                -f dismissed_reason='false positive' \
                -f dismissed_comment="$REASON - Auto-dismissed by security management workflow" \
                || echo "Failed to dismiss alert #$alert_number"
            else
              echo "✅ Keeping alert #$alert_number: $rule_id (severity: $severity)"
            fi
          done

      - name: "📈 Generate Security Report"
        run: |
          echo "📈 Generating security report..."

          # Get updated counts
          REMAINING_ALERTS=$(gh api repos/${{ github.repository }}/code-scanning/alerts --paginate | jq '[.[] | select(.state == "open")] | length' || echo "0")
          DISMISSED_ALERTS=$(gh api repos/${{ github.repository }}/code-scanning/alerts --paginate | jq '[.[] | select(.state == "dismissed")] | length' || echo "0")

          # Create summary
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🛡️ Security Alert Management Report

          ### 📊 Alert Statistics
          - **Original Alerts**: ${{ steps.analyze-alerts.outputs.total_alerts }}
          - **Remaining Open**: $REMAINING_ALERTS
          - **Dismissed as False Positives**: $DISMISSED_ALERTS
          - **Reduction**: $(( ${{ steps.analyze-alerts.outputs.total_alerts }} - $REMAINING_ALERTS )) alerts

          ### 🎯 Alert Categories (Remaining)
          EOF

          if [ "$REMAINING_ALERTS" -gt 0 ]; then
            echo "#### 🚨 Open Alerts by Severity" >> $GITHUB_STEP_SUMMARY
            gh api repos/${{ github.repository }}/code-scanning/alerts --paginate | \
            jq -r '.[] | select(.state == "open") | "- **\(.rule.severity | ascii_upcase)**: \(.rule.id) in \(.most_recent_instance.location.path)"' | \
            head -10 >> $GITHUB_STEP_SUMMARY || true

            if [ "$REMAINING_ALERTS" -gt 10 ]; then
              echo "- ... and $(( $REMAINING_ALERTS - 10 )) more alerts" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✅ **No remaining security alerts!**" >> $GITHUB_STEP_SUMMARY
          fi

          cat >> $GITHUB_STEP_SUMMARY << EOF

          ### 🔧 Next Steps
          - Review remaining alerts for legitimate security issues
          - Update suppression patterns if new false positives are identified
          - Consider raising minimum severity threshold if too many low-priority alerts remain

          ---
          🤖 *Automated by Security Alert Management Workflow*
          EOF

  dependabot-alert-cleanup:
    name: "🔄 Dependabot Alert Cleanup"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: "🔍 Analyze Dependabot Alerts"
        run: |
          echo "🔍 Analyzing Dependabot alerts..."

          # Try to get Dependabot alerts (may fail if not enabled)
          DEPENDABOT_ALERTS=$(gh api repos/${{ github.repository }}/dependabot/alerts --paginate 2>/dev/null | jq '. | length' || echo "0")
          echo "Dependabot alerts found: $DEPENDABOT_ALERTS"

          if [ "$DEPENDABOT_ALERTS" -gt 0 ]; then
            echo "📋 Dependabot Alert Summary:" >> $GITHUB_STEP_SUMMARY
            gh api repos/${{ github.repository }}/dependabot/alerts --paginate | \
            jq -r '.[] | "- **\(.security_advisory.severity | ascii_upcase)**: \(.security_advisory.summary) (\(.dependency.package.name))"' | \
            head -10 >> $GITHUB_STEP_SUMMARY || true
          else
            echo "✅ No Dependabot alerts found or Dependabot not enabled" >> $GITHUB_STEP_SUMMARY
          fi

concurrency:
  group: security-alert-management-${{ github.ref }}
  cancel-in-progress: false