name: "[HML] Pipeline de Homologacao"

on:
  push:
    branches: [hml]
    paths:
      - 'apps/backend/**'
      - 'apps/frontend-nextjs/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'
      - '!**/*.md'
      - '!**/README*'
      - '!docs/**'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Pular testes (apenas emergencias)'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Forcar deploy mesmo com falhas'
        required: false
        default: false
        type: boolean
      deploy_backend:
        description: 'Deploy backend (auto-detectado se nao especificado)'
        required: false
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend (auto-detectado se nao especificado)'
        required: false
        type: boolean

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  BACKEND_SERVICE_NAME: hml-roteiro-dispensacao-api
  FRONTEND_SITE: hml-roteiros-de-dispensacao
  REGION: ${{ secrets.GCP_REGION }}
  ENVIRONMENT: homologacao
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  # HML com timeout menor para feedback r√°pido
  GLOBAL_TIMEOUT: 20

permissions:
  contents: write
  pull-requests: read
  security-events: write
  actions: read
  id-token: write

jobs:
  detect-changes:
    name: "[HML-DETECT] Detectar Mudancas"
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.filter.outputs.backend }}
      frontend-changed: ${{ steps.filter.outputs.frontend }}
      dependencies-changed: ${{ steps.filter.outputs.dependencies }}
      workflow-changed: ${{ steps.filter.outputs.workflows }}
      deploy-backend: ${{ steps.decide.outputs.deploy-backend }}
      deploy-frontend: ${{ steps.decide.outputs.deploy-frontend }}
      should-deploy: ${{ steps.decide.outputs.should-deploy }}
    
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
        with:
          fetch-depth: 2
          
      # PATHS-FILTER: Detec√ß√£o otimizada para HML
      - name: "[FILTER] Detectar paths alterados"
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36  # v3.0.2
        id: filter
        with:
          filters: |
            backend:
              - 'apps/backend/**'
            frontend:
              - 'apps/frontend-nextjs/**'
            dependencies:
              - 'package*.json'
              - '**/requirements*.txt'
            workflows:
              - '.github/workflows/**'
          
      # FALLBACK: L√≥gica tradicional se paths-filter falhar
      - name: "[DETECT] Analise de Mudancas (Fallback)"
        id: changes
        if: steps.filter.outcome == 'failure'
        run: |
          echo "[WARNING] paths-filter falhou, usando detec√ß√£o tradicional..."
          
          BACKEND_CHANGED=false
          FRONTEND_CHANGED=false
          DEPS_CHANGED=false
          WORKFLOW_CHANGED=false
          
          if git diff --name-only HEAD~1 HEAD | grep -q "^apps/backend/"; then
            BACKEND_CHANGED=true
            echo "Backend alterado detectado"
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -q "^apps/frontend-nextjs/"; then
            FRONTEND_CHANGED=true
            echo "Frontend alterado detectado"
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -q -E "package\.json|package-lock\.json"; then
            DEPS_CHANGED=true
            echo "Dependencias alteradas detectadas"
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -q "^\.github/workflows/"; then
            WORKFLOW_CHANGED=true
            echo "Workflows alterados detectados"
          fi
          
          echo "backend=$BACKEND_CHANGED" >> $GITHUB_OUTPUT
          echo "frontend=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT
          echo "dependencies=$DEPS_CHANGED" >> $GITHUB_OUTPUT
          echo "workflow=$WORKFLOW_CHANGED" >> $GITHUB_OUTPUT
          
      - name: "[STRATEGY] Estrategia de Deploy"
        id: decide
        run: |
          # Usar paths-filter como priorit√°rio, fallback para git diff
          BACKEND_CHANGED="${{ steps.filter.outputs.backend || steps.changes.outputs.backend }}"
          FRONTEND_CHANGED="${{ steps.filter.outputs.frontend || steps.changes.outputs.frontend }}"
          WORKFLOW_CHANGED="${{ steps.filter.outputs.workflows || steps.changes.outputs.workflow }}"
          
          DEPLOY_BACKEND="${{ github.event.inputs.deploy_backend }}"
          DEPLOY_FRONTEND="${{ github.event.inputs.deploy_frontend }}"
          
          if [ "$DEPLOY_BACKEND" = "" ]; then
            DEPLOY_BACKEND="$BACKEND_CHANGED"
          fi
          
          if [ "$DEPLOY_FRONTEND" = "" ]; then
            DEPLOY_FRONTEND="$FRONTEND_CHANGED"
          fi
          
          # Force security validation if workflows changed
          if [ "$WORKFLOW_CHANGED" = "true" ]; then
            echo "Workflows alterados - for√ßando valida√ß√£o de seguran√ßa"
          fi
          
          SHOULD_DEPLOY="false"
          if [ "$DEPLOY_BACKEND" = "true" ] || [ "$DEPLOY_FRONTEND" = "true" ]; then
            SHOULD_DEPLOY="true"
          fi
          
          echo "deploy-backend=$DEPLOY_BACKEND" >> $GITHUB_OUTPUT
          echo "deploy-frontend=$DEPLOY_FRONTEND" >> $GITHUB_OUTPUT
          echo "should-deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          
          echo "üìä PLANO DE DEPLOY HML:"
          echo "  Backend: $DEPLOY_BACKEND (detectado: $BACKEND_CHANGED)"
          echo "  Frontend: $DEPLOY_FRONTEND (detectado: $FRONTEND_CHANGED)"
          echo "  Workflows: $WORKFLOW_CHANGED"
          echo "  Executar deploy: $SHOULD_DEPLOY"

  security-quality-gates:
    name: "[HML-SECURITY] Gates de Qualidade e Seguranca"
    runs-on: ubuntu-latest
    needs: detect-changes
    if: always() && (needs.detect-changes.outputs.should-deploy == 'true' || needs.detect-changes.outputs.workflow-changed == 'true') && github.event.inputs.force_deploy != 'true'
    
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@v4
        
      # SECRET SCANNING HML: TruffleHog para detec√ß√£o r√°pida
      - name: "[SECURITY] TruffleHog Secret Scanning HML (FREE)"
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: origin/main
          head: HEAD  
          extra_args: --only-verified --fail --json
        continue-on-error: false  # HML tamb√©m deve falhar por secrets!
        
      - name: "[SECURITY] GitHub Security Scanning"
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,python
          
      # SNYK HML: Apenas para workflow changes cr√≠ticos (economia budget)
      - name: "[SECURITY] Snyk Security Scan (HML Budget Friendly)"
        if: needs.detect-changes.outputs.workflow-changed == 'true' || contains(github.event.head_commit.message, 'security')
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: >
            --severity-threshold=critical
            --policy-path=.snyk 
            --sarif-file-output=snyk.sarif
            --fail-on=all
            --prune-repeated-subdependencies
          
      # FREE ALTERNATIVE para HML: Sempre usa npm audit
      - name: "[SECURITY] NPM Audit HML (Sempre Gratuito)"  
        working-directory: apps/frontend-nextjs
        run: |
          echo "üîç Executando npm audit em HML (gratuito)..."
          npm audit --audit-level=moderate --json | tee npm-audit-hml.json || true
        continue-on-error: true
          
      - name: "[SECURITY] Upload Snyk Results"
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('snyk.sarif') != ''
        with:
          sarif_file: snyk.sarif
          
      - name: "[SECURITY] CodeQL Analysis"
        uses: github/codeql-action/analyze@v3
        
      - name: "[NOTIFY] Security Status"
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="[HML-SECURITY] Gates de seguranca aprovados para HOMOLOGACAO"
          else
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="[HML-SECURITY] ALERTA: Falhas de seguranca detectadas em HOMOLOGACAO!"
          fi

  test-backend:
    name: "[HML-TEST] Backend Tests"
    runs-on: ubuntu-latest
    needs: [detect-changes, security-quality-gates]
    if: needs.detect-changes.outputs.deploy-backend == 'true' && inputs.skip_tests != true
    
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@v4
        
      - name: "[SETUP] Python Environment"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      # CACHE OTIMIZADO HML: Economia de 40% no build time
      - name: "[CACHE] Python Dependencies (HML Otimizado)"
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9  # v4.0.2
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
            apps/backend/.venv
            /opt/hostedtoolcache/Python
          key: hml-backend-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('apps/backend/requirements*.txt') }}
          restore-keys: |
            hml-backend-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-
            hml-backend-${{ runner.os }}-
            # Fallback para cache de prod se n√£o houver HML
            prod-backend-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-
          
      - name: "[INSTALL] Backend Dependencies"
        working-directory: apps/backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: "[TEST] Run Backend Tests (HML Flexible)"
        working-directory: apps/backend
        run: |
          echo "Executando testes do backend para HML..."
          python -m pytest tests/ -v --cov=. --cov-report=xml
        continue-on-error: true  # HML permite falhas para diagn√≥stico
          
      - name: "[COVERAGE] Upload Coverage"
        uses: codecov/codecov-action@v3
        with:
          file: apps/backend/coverage.xml
          flags: backend-hml

  test-frontend:
    name: "[HML-TEST] Frontend Tests"
    runs-on: ubuntu-latest
    needs: [detect-changes, security-quality-gates]
    if: needs.detect-changes.outputs.deploy-frontend == 'true' && inputs.skip_tests != true
    
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@v4
        
      - name: "[SETUP] Node.js Environment"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/frontend-nextjs/package-lock.json
          
      - name: "[INSTALL] Frontend Dependencies"
        working-directory: apps/frontend-nextjs
        run: |
          npm ci --production=false
          
      - name: "[BUILD] Frontend Build Test"
        working-directory: apps/frontend-nextjs
        run: |
          echo "Testando build do frontend para HML..."
          npm run build
          
      - name: "[TEST] Frontend Tests"
        working-directory: apps/frontend-nextjs
        run: |
          echo "Executando testes do frontend para HML..."
          npm test -- --coverage --watchAll=false

  deploy-backend-hml:
    name: "[HML-DEPLOY] Backend to Homologacao"
    runs-on: ubuntu-latest
    needs: [detect-changes, security-quality-gates, test-backend]
    if: always() && (needs.detect-changes.outputs.deploy-backend == 'true' && (needs.test-backend.result == 'success' || inputs.force_deploy == true))
    
    outputs:
      backend-url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        
      - name: "Auth Google Cloud"
        uses: google-github-actions/auth@v3
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: "Setup Cloud SDK"
        uses: google-github-actions/setup-gcloud@v3
        
      - name: "Configurar Docker"
        run: |
          gcloud auth configure-docker --quiet
          
      - name: "Build e Push Docker"
        run: |
          cd apps/backend
          
          docker pull gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:latest || echo "Sem cache anterior"
          
          docker build \
            --cache-from gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:latest \
            -t gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:$GITHUB_SHA \
            -t gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:latest \
            .
            
          docker push gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:$GITHUB_SHA
          docker push gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:latest
          
      - name: "Deploy Cloud Run"
        id: deploy
        run: |
          gcloud run deploy $BACKEND_SERVICE_NAME \
            --image=gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:$GITHUB_SHA \
            --platform=managed \
            --region=$REGION \
            --allow-unauthenticated \
            --port=8080 \
            --memory=1Gi \
            --cpu=1 \
            --concurrency=100 \
            --max-instances=10 \
            --min-instances=0 \
            --timeout=300 \
            --set-env-vars="ENVIRONMENT=$ENVIRONMENT,FLASK_ENV=production,DEBUG=false,SECRET_KEY=${{ secrets.SECRET_KEY }},OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" \
            --tag=hml-$(echo $GITHUB_SHA | cut -c1-7) \
            --quiet
            
          SERVICE_URL=$(gcloud run services describe $BACKEND_SERVICE_NAME --region=$REGION --format="value(status.url)")
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Backend HML: $SERVICE_URL"
          
      - name: "Health Check"
        run: |
          echo "Aguardando backend inicializar..."
          sleep 30
          
          for i in {1..10}; do
            if curl -f "${{ steps.deploy.outputs.url }}/health" > /dev/null 2>&1; then
              echo "Backend HML saudavel"
              break
            fi
            echo "Tentativa $i/10..."
            sleep 10
          done

  deploy-frontend-hml:
    name: "[HML-DEPLOY] Frontend to Homologacao"
    runs-on: ubuntu-latest
    needs: [detect-changes, security-quality-gates, test-frontend, deploy-backend-hml]
    if: always() && (needs.detect-changes.outputs.deploy-frontend == 'true' && (needs.test-frontend.result == 'success' || inputs.force_deploy == true))
    
    outputs:
      frontend-url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        
      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/frontend-nextjs/package-lock.json
          
      # CACHE MULTI-LAYER para Frontend HML
      - name: "[CACHE] Frontend Dependencies (HML Otimizado)"
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9  # v4.0.2
        with:
          path: |
            apps/frontend-nextjs/node_modules
            apps/frontend-nextjs/.next/cache
            ~/.npm
            ~/.cache/Cypress  # Se usar Cypress
          key: hml-frontend-${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('apps/frontend-nextjs/package-lock.json') }}
          restore-keys: |
            hml-frontend-${{ runner.os }}-node${{ env.NODE_VERSION }}-
            hml-frontend-${{ runner.os }}-
            # Fallback para cache de prod
            prod-frontend-${{ runner.os }}-node${{ env.NODE_VERSION }}-
          
      - name: "Instalar Dependencias"
        run: |
          cd apps/frontend-nextjs
          npm ci
          
      - name: "Configurar Ambiente"
        run: |
          cd apps/frontend-nextjs
          
          if [ -f ".env.hml" ]; then
            cp .env.hml .env.production.local
          fi
          
          BACKEND_URL="${{ needs.deploy-backend-hml.outputs.backend-url || 'https://hml-roteiro-dispensacao-api-4f2gjf6cua-uc.a.run.app' }}"
          echo "NEXT_PUBLIC_API_URL=$BACKEND_URL" >> .env.production.local
          echo "NEXT_PUBLIC_ENVIRONMENT=homologacao" >> .env.production.local
          
      - name: "Build"
        run: |
          cd apps/frontend-nextjs
          export NODE_OPTIONS="--max-old-space-size=4096"
          npm run build
          
      - name: "Deploy Firebase"
        id: deploy
        run: |
          cd apps/frontend-nextjs
          npm install -g firebase-tools
          
          cat > .firebaserc << EOF
          {
            "projects": {
              "default": "$PROJECT_ID"
            },
            "targets": {
              "$PROJECT_ID": {
                "hosting": {
                  "hml": ["$FRONTEND_SITE"]
                }
              }
            }
          }
          EOF
          
          firebase deploy \
            --only hosting:hml \
            --project $PROJECT_ID \
            --token "${{ secrets.FIREBASE_TOKEN }}" \
            --non-interactive
            
          FRONTEND_URL="https://${FRONTEND_SITE}.web.app"
          echo "url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "Frontend HML: $FRONTEND_URL"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  post-deploy-validation:
    name: "[HML-VALIDATION] Validacao Pos-Deploy"
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-backend-hml, deploy-frontend-hml]
    if: always() && needs.detect-changes.outputs.should-deploy == 'true'
    
    outputs:
      validation-status: ${{ steps.validation.outputs.status }}
    
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@v4
        
      - name: "[VALIDATION] Smoke Tests"
        id: validation
        run: |
          echo "Executando testes de smoke em HML..."
          echo "Aguardando servi√ßos estabilizarem..."
          sleep 30
          
          BACKEND_URL="${{ needs.deploy-backend-hml.outputs.backend-url }}"
          FRONTEND_URL="${{ needs.deploy-frontend-hml.outputs.frontend-url }}"
          
          retry_test() {
            local url=$1
            local name=$2
            for i in {1..5}; do
              echo "Testando $name (tentativa $i/5)..."
              if curl -f -s --max-time 60 "$url" > /dev/null 2>&1; then
                echo "$name OK"
                return 0
              fi
              sleep 10
            done
            echo "$name FALHOU"
            return 1
          }
          
          TESTS_PASSED=true
          
          if [ -n "$BACKEND_URL" ]; then
            retry_test "$BACKEND_URL/health" "Backend Health" || TESTS_PASSED=false
            sleep 5
            retry_test "$BACKEND_URL/api/v1/personas" "Backend API" || TESTS_PASSED=false
          fi
          
          if [ -n "$FRONTEND_URL" ]; then
            sleep 5
            retry_test "$FRONTEND_URL" "Frontend" || TESTS_PASSED=false
          fi
          
          if [ "$TESTS_PASSED" = "true" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "Todos os testes passaram"
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="[HML-VALIDATION] Valida√ß√£o p√≥s-deploy APROVADA em HML"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "Alguns testes falharam"
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="[HML-VALIDATION] ALERTA: Valida√ß√£o p√≥s-deploy FALHOU em HML!"
          fi

  create-release:
    name: "[HML-RELEASE] Criar Release de Homologacao"
    runs-on: ubuntu-latest
    needs: [deploy-backend-hml, deploy-frontend-hml]
    if: always() && (needs.deploy-backend-hml.result == 'success' || needs.deploy-frontend-hml.result == 'success')
    
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: "[RELEASE] Generate Version"
        id: version
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          COMMIT_SHORT=${GITHUB_SHA:0:7}
          VERSION="hml-v${TIMESTAMP}-${COMMIT_SHORT}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: "[RELEASE] Create GitHub Release"
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: "Homologacao ${{ steps.version.outputs.version }}"
          body: |
            ## Release de Homologacao ${{ steps.version.outputs.version }}
            
            **Commit:** ${{ github.sha }}
            **Branch:** hml
            **Ambiente:** Homologacao
            **Timestamp:** $(date)
            
            ### Mudancas Deployadas:
            - Backend: ${{ needs.deploy-backend-hml.result == 'success' && 'Sucesso' || 'N/A' }}
            - Frontend: ${{ needs.deploy-frontend-hml.result == 'success' && 'Sucesso' || 'N/A' }}
            
            ### Links:
            - Backend API: ${{ needs.deploy-backend-hml.outputs.backend-url }}
            - Frontend: ${{ needs.deploy-frontend-hml.outputs.frontend-url }}
            
            ### Proximos Passos:
            1. Testar funcionalidades em HML
            2. Validar com stakeholders  
            3. Promover para producao se aprovado
          draft: false
          prerelease: true

  notify-completion:
    name: "[HML-NOTIFY] Notificacao Final"
    runs-on: ubuntu-latest
    needs: [deploy-backend-hml, deploy-frontend-hml, create-release]
    if: always()
    
    steps:
      - name: "[NOTIFY] Status Final"
        run: |
          if [[ "${{ needs.post-deploy-validation.outputs.validation-status }}" == "success" ]]; then
            STATUS="SUCESSO"
            EMOJI="[OK]"
          else
            STATUS="FALHOU"
            EMOJI="[ERROR]"
          fi
          
          COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          
          if [ "$STATUS" == "SUCESSO" ]; then
            MESSAGE="[HML-SUCCESS] Deploy de HOMOLOGACAO concluido com sucesso!"
            MESSAGE="$MESSAGE%0A- Backend: ${{ needs.deploy-backend-hml.result }}"
            MESSAGE="$MESSAGE%0A- Frontend: ${{ needs.deploy-frontend-hml.result }}" 
            MESSAGE="$MESSAGE%0A- Release: ${{ needs.create-release.result }}"
            MESSAGE="$MESSAGE%0A%0ACommit: ${{ github.sha }}"
            MESSAGE="$MESSAGE%0A%0AURLs HML:"
            MESSAGE="$MESSAGE%0A- Backend: ${{ needs.deploy-backend-hml.outputs.backend-url || 'N/A' }}"
            MESSAGE="$MESSAGE%0A- Frontend: ${{ needs.deploy-frontend-hml.outputs.frontend-url || 'N/A' }}"
            MESSAGE="$MESSAGE%0A%0AProximos Passos: Validar em HML e promover para producao"
          else
            MESSAGE="[HML-ERROR] FALHA no deploy de HOMOLOGACAO!"
            MESSAGE="$MESSAGE%0A- Backend: ${{ needs.deploy-backend-hml.result }}"
            MESSAGE="$MESSAGE%0A- Frontend: ${{ needs.deploy-frontend-hml.result }}"
            MESSAGE="$MESSAGE%0A%0AVerificar logs imediatamente!"
          fi
          
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="$MESSAGE" \
            -d parse_mode="HTML"

# CONCURRENCY HML: Permite cancelamento para itera√ß√£o r√°pida
concurrency:
  group: hml-pipeline-${{ github.ref }}
  cancel-in-progress: true  # HML sempre cancela builds antigos