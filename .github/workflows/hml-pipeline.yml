name: "HML Pipeline de Homologacao"

on:
  push:
    branches: [hml]
    paths:
      - 'apps/backend/**'
      - 'apps/frontend-nextjs/**'
      - '.github/workflows/hml-pipeline.yml'
      - '!**/*.md'
      - '!**/README*'
      - '!docs/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Forcar deploy (pular algumas validacoes)'
        required: false
        default: false
        type: boolean
      deploy_backend:
        description: 'Deploy backend (auto-detectado se nao especificado)'
        required: false
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend (auto-detectado se nao especificado)'
        required: false
        type: boolean

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  BACKEND_SERVICE_NAME: hml-roteiro-dispensacao-api
  FRONTEND_SITE: hml-roteiros-de-dispensacao
  REGION: ${{ secrets.GCP_REGION }}
  ENVIRONMENT: homologacao

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

jobs:
  detect-changes:
    name: "Detectar Mudancas"
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      deploy-backend: ${{ steps.decide.outputs.deploy-backend }}
      deploy-frontend: ${{ steps.decide.outputs.deploy-frontend }}
      should-deploy: ${{ steps.decide.outputs.should-deploy }}
    
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: "Analise de Mudancas"
        id: changes
        run: |
          echo "Analisando mudancas para HML..."
          
          if git diff --name-only HEAD~1 HEAD | grep -q '^apps/backend/'; then
            echo "backend=true" >> $GITHUB_OUTPUT
            echo "Backend: mudancas detectadas"
          else
            echo "backend=false" >> $GITHUB_OUTPUT
            echo "Backend: sem mudancas"
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -q '^apps/frontend-nextjs/'; then
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "Frontend: mudancas detectadas"
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
            echo "Frontend: sem mudancas"
          fi
          
      - name: "Estrategia de Deploy"
        id: decide
        run: |
          DEPLOY_BACKEND="${{ github.event.inputs.deploy_backend }}"
          DEPLOY_FRONTEND="${{ github.event.inputs.deploy_frontend }}"
          
          if [ "$DEPLOY_BACKEND" = "" ]; then
            DEPLOY_BACKEND="${{ steps.changes.outputs.backend }}"
          fi
          
          if [ "$DEPLOY_FRONTEND" = "" ]; then
            DEPLOY_FRONTEND="${{ steps.changes.outputs.frontend }}"
          fi
          
          SHOULD_DEPLOY="false"
          if [ "$DEPLOY_BACKEND" = "true" ] || [ "$DEPLOY_FRONTEND" = "true" ]; then
            SHOULD_DEPLOY="true"
          fi
          
          echo "deploy-backend=$DEPLOY_BACKEND" >> $GITHUB_OUTPUT
          echo "deploy-frontend=$DEPLOY_FRONTEND" >> $GITHUB_OUTPUT
          echo "should-deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          
          echo "PLANO DE DEPLOY HML:"
          echo "  Backend: $DEPLOY_BACKEND"
          echo "  Frontend: $DEPLOY_FRONTEND"
          echo "  Executar deploy: $SHOULD_DEPLOY"

  quality-security-gates:
    name: "Qualidade e Seguranca"
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should-deploy == 'true' && github.event.inputs.force_deploy != 'true'
    
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: apps/backend/requirements.txt
          
      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/frontend-nextjs/package-lock.json

      - name: "Cache Python Dependencies"
        uses: actions/cache@v4
        if: needs.detect-changes.outputs.deploy-backend == 'true'
        with:
          path: ~/.cache/pip
          key: hml-python-deps-${{ runner.os }}-${{ hashFiles('apps/backend/requirements.txt') }}
          restore-keys: hml-python-deps-${{ runner.os }}-
          
      - name: "Cache Node Dependencies"
        uses: actions/cache@v4
        if: needs.detect-changes.outputs.deploy-frontend == 'true'
        with:
          path: |
            apps/frontend-nextjs/node_modules
            ~/.npm
          key: hml-node-deps-${{ runner.os }}-${{ hashFiles('apps/frontend-nextjs/package-lock.json') }}
          restore-keys: hml-node-deps-${{ runner.os }}-

      - name: "Instalar Dependencias Backend"
        if: needs.detect-changes.outputs.deploy-backend == 'true'
        run: |
          cd apps/backend
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 mypy safety
          
      - name: "Instalar Dependencias Frontend"
        if: needs.detect-changes.outputs.deploy-frontend == 'true'
        run: |
          cd apps/frontend-nextjs
          npm ci

      - name: "Scan Seguranca Backend"
        if: needs.detect-changes.outputs.deploy-backend == 'true'
        run: |
          echo "Executando scan de seguranca no backend..."
          cd apps/backend
          
          safety check --json || echo "Vulnerabilidades encontradas - verificar Security tab"
          
          if [ -f "package.json" ]; then
            npm audit --audit-level=high || echo "Vulnerabilidades npm encontradas"
          fi
          
      - name: "Scan Seguranca Frontend"
        if: needs.detect-changes.outputs.deploy-frontend == 'true'
        run: |
          echo "Executando scan de seguranca no frontend..."
          cd apps/frontend-nextjs
          npm audit --audit-level=high || echo "Vulnerabilidades encontradas - verificar Dependabot"

      - name: "Testes e Qualidade Backend"
        if: needs.detect-changes.outputs.deploy-backend == 'true'
        run: |
          cd apps/backend
          echo "Analise de codigo..."
          flake8 . --count --max-complexity=12 --max-line-length=127 --statistics || echo "Warnings de linting"
          
          echo "Executando testes..."
          python -m pytest --tb=short || echo "Alguns testes falharam"
          
      - name: "Testes e Qualidade Frontend"
        if: needs.detect-changes.outputs.deploy-frontend == 'true'
        run: |
          cd apps/frontend-nextjs
          echo "Linting..."
          npm run lint || echo "Warnings de linting"
          
          echo "TypeScript check..."
          npm run type-check || echo "Warnings de tipos"
          
          echo "Testes..."
          npm run test -- --passWithNoTests || echo "Alguns testes falharam"

  deploy-backend-hml:
    name: "Deploy Backend HML"
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-security-gates]
    if: always() && needs.detect-changes.outputs.deploy-backend == 'true' && (needs.quality-security-gates.result == 'success' || github.event.inputs.force_deploy == 'true')
    
    outputs:
      backend-url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        
      - name: "Auth Google Cloud"
        uses: google-github-actions/auth@v3
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: "Setup Cloud SDK"
        uses: google-github-actions/setup-gcloud@v3
        
      - name: "Configurar Docker"
        run: |
          gcloud auth configure-docker --quiet
          
      - name: "Build e Push Docker"
        run: |
          cd apps/backend
          
          docker pull gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:latest || echo "Sem cache anterior"
          
          docker build \
            --cache-from gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:latest \
            -t gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:$GITHUB_SHA \
            -t gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:latest \
            .
            
          docker push gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:$GITHUB_SHA
          docker push gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:latest
          
      - name: "Deploy Cloud Run"
        id: deploy
        run: |
          gcloud run deploy $BACKEND_SERVICE_NAME \
            --image=gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:$GITHUB_SHA \
            --platform=managed \
            --region=$REGION \
            --allow-unauthenticated \
            --port=8080 \
            --memory=1Gi \
            --cpu=1 \
            --concurrency=100 \
            --max-instances=10 \
            --min-instances=0 \
            --timeout=300 \
            --set-env-vars="ENVIRONMENT=$ENVIRONMENT,FLASK_ENV=production,DEBUG=false,SECRET_KEY=${{ secrets.SECRET_KEY }},OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" \
            --tag=hml-$(echo $GITHUB_SHA | cut -c1-7) \
            --quiet
            
          SERVICE_URL=$(gcloud run services describe $BACKEND_SERVICE_NAME --region=$REGION --format="value(status.url)")
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Backend HML: $SERVICE_URL"
          
      - name: "Health Check"
        run: |
          echo "Aguardando backend inicializar..."
          sleep 30
          
          for i in {1..10}; do
            if curl -f "${{ steps.deploy.outputs.url }}/health" > /dev/null 2>&1; then
              echo "Backend HML saudavel"
              break
            fi
            echo "Tentativa $i/10..."
            sleep 10
          done

  deploy-frontend-hml:
    name: "Deploy Frontend HML"
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-security-gates, deploy-backend-hml]
    if: always() && needs.detect-changes.outputs.deploy-frontend == 'true' && (needs.quality-security-gates.result == 'success' || github.event.inputs.force_deploy == 'true')
    
    outputs:
      frontend-url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        
      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/frontend-nextjs/package-lock.json
          
      - name: "Restaurar Cache"
        uses: actions/cache@v4
        with:
          path: |
            apps/frontend-nextjs/node_modules
            ~/.npm
          key: hml-node-deps-${{ runner.os }}-${{ hashFiles('apps/frontend-nextjs/package-lock.json') }}
          
      - name: "Instalar Dependencias"
        run: |
          cd apps/frontend-nextjs
          npm ci
          
      - name: "Configurar Ambiente"
        run: |
          cd apps/frontend-nextjs
          
          if [ -f ".env.hml" ]; then
            cp .env.hml .env.production.local
          fi
          
          BACKEND_URL="${{ needs.deploy-backend-hml.outputs.backend-url || 'https://hml-roteiro-dispensacao-api-4f2gjf6cua-uc.a.run.app' }}"
          echo "NEXT_PUBLIC_API_URL=$BACKEND_URL" >> .env.production.local
          echo "NEXT_PUBLIC_ENVIRONMENT=homologacao" >> .env.production.local
          
      - name: "Build"
        run: |
          cd apps/frontend-nextjs
          export NODE_OPTIONS="--max-old-space-size=4096"
          npm run build
          
      - name: "Deploy Firebase"
        id: deploy
        run: |
          cd apps/frontend-nextjs
          npm install -g firebase-tools
          
          cat > .firebaserc << EOF
          {
            "projects": {
              "default": "$PROJECT_ID"
            },
            "targets": {
              "$PROJECT_ID": {
                "hosting": {
                  "hml": ["$FRONTEND_SITE"]
                }
              }
            }
          }
          EOF
          
          firebase deploy \
            --only hosting:hml \
            --project $PROJECT_ID \
            --token "${{ secrets.FIREBASE_TOKEN }}" \
            --non-interactive
            
          FRONTEND_URL="https://${FRONTEND_SITE}.web.app"
          echo "url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "Frontend HML: $FRONTEND_URL"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  post-deploy-validation:
    name: "Validacao Pos-Deploy"
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-backend-hml, deploy-frontend-hml]
    if: always() && needs.detect-changes.outputs.should-deploy == 'true'
    
    outputs:
      validation-status: ${{ steps.validation.outputs.status }}
    
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        
      - name: "Smoke Tests"
        id: validation
        run: |
          echo "Executando testes de smoke em HML..."
          
          BACKEND_URL="${{ needs.deploy-backend-hml.outputs.backend-url }}"
          FRONTEND_URL="${{ needs.deploy-frontend-hml.outputs.frontend-url }}"
          
          retry_test() {
            local url=$1
            local name=$2
            for i in {1..3}; do
              echo "Testando $name (tentativa $i/3)..."
              if curl -f -s --max-time 30 "$url" > /dev/null 2>&1; then
                echo "$name OK"
                return 0
              fi
              sleep 5
            done
            echo "$name FALHOU"
            return 1
          }
          
          TESTS_PASSED=true
          
          if [ -n "$BACKEND_URL" ]; then
            retry_test "$BACKEND_URL/health" "Backend Health" || TESTS_PASSED=false
            sleep 3
            retry_test "$BACKEND_URL/api/v1/personas" "Backend API" || TESTS_PASSED=false
          fi
          
          if [ -n "$FRONTEND_URL" ]; then
            sleep 3
            retry_test "$FRONTEND_URL" "Frontend" || TESTS_PASSED=false
          fi
          
          if [ "$TESTS_PASSED" = "true" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "Todos os testes passaram"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "Alguns testes falharam"
          fi

  create-hml-release:
    name: "Criar Release HML"
    runs-on: ubuntu-latest
    needs: [post-deploy-validation]
    if: always() && needs.post-deploy-validation.outputs.validation-status == 'success'
    
    outputs:
      release-tag: ${{ steps.release.outputs.tag }}
    
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: "Criar Tag HML"
        id: release
        run: |
          HML_TAG="v$(date +%Y.%m.%d)-hml.$(date +%H%M)"
          COMMIT_SHORT=$(echo $GITHUB_SHA | cut -c1-7)
          
          echo "Criando release HML: $HML_TAG"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$HML_TAG" -m "HML Release $HML_TAG - Commit $COMMIT_SHORT"
          git push origin "$HML_TAG"
          
          gh release create "$HML_TAG" \
            --title "HML Release $HML_TAG" \
            --notes "Deploy de Homologacao - Data: $(date '+%d/%m/%Y %H:%M:%S') - Commit: $COMMIT_SHORT - Por: ${{ github.actor }} - Branch: hml - Validacao: Testes pos-deploy aprovados - Proximo: Validar em HML antes de promover para producao - Release criado automaticamente pelo pipeline HML" \
            --prerelease
            
          echo "tag=$HML_TAG" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-hml-deploy:
    name: "Notificacoes HML"
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-backend-hml, deploy-frontend-hml, post-deploy-validation, create-hml-release]
    if: always() && needs.detect-changes.outputs.should-deploy == 'true'
    
    steps:
      - name: "Telegram - Deploy HML"
        run: |
          if [[ "${{ needs.post-deploy-validation.outputs.validation-status }}" == "success" ]]; then
            STATUS="SUCESSO"
            EMOJI="[OK]"
          else
            STATUS="FALHOU"
            EMOJI="[ERROR]"
          fi
          
          COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          
          MESSAGE="$EMOJI Deploy HML $STATUS%0A%0AData: $(date '+%d/%m/%Y %H:%M:%S')%0ACommit: $COMMIT_SHA%0APor: ${{ github.actor }}%0ARelease: ${{ needs.create-hml-release.outputs.release-tag || 'N/A' }}%0A%0ADeploy Inteligente:%0A- Backend: ${{ needs.detect-changes.outputs.deploy-backend == 'true' && 'Deployado' || 'Pulado' }}%0A- Frontend: ${{ needs.detect-changes.outputs.deploy-frontend == 'true' && 'Deployado' || 'Pulado' }}%0A%0AURLs HML:%0A- Backend: ${{ needs.deploy-backend-hml.outputs.backend-url || 'Sem mudancas' }}%0A- Frontend: ${{ needs.deploy-frontend-hml.outputs.frontend-url || 'Sem mudancas' }}%0A%0AStatus:%0A- Qualidade: ${{ needs.quality-security-gates.result }}%0A- Backend: ${{ needs.deploy-backend-hml.result }}%0A- Frontend: ${{ needs.deploy-frontend-hml.result }}%0A- Testes: ${{ needs.post-deploy-validation.result }}%0A- Release: ${{ needs.create-hml-release.result }}%0A%0AProximos Passos: 1. Testar funcionalidades em HML 2. Validar com stakeholders 3. Promover para producao se aprovado"
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="$MESSAGE" \
            -d parse_mode="HTML"

concurrency:
  group: hml-deploy-${{ github.ref }}
  cancel-in-progress: true