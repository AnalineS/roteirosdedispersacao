name: "[HML] Pipeline de Homologacao"

on:
  push:
    branches: [hml]
    paths:
      - 'apps/backend/**'
      - 'apps/frontend-nextjs/**'
      - '.github/workflows/hml-pipeline.yml'
      - '!**/*.md'
      - '!**/README*'
      - '!docs/**'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Pular testes (apenas emergencias)'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Forcar deploy mesmo com falhas'
        required: false
        default: false
        type: boolean
      deploy_backend:
        description: 'Deploy backend (auto-detectado se nao especificado)'
        required: false
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend (auto-detectado se nao especificado)'
        required: false
        type: boolean

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  BACKEND_SERVICE_NAME: hml-roteiro-dispensacao-api
  FRONTEND_SITE: hml-roteiros-de-dispensacao
  REGION: ${{ secrets.GCP_REGION }}
  ENVIRONMENT: homologacao
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

permissions:
  contents: write
  pull-requests: read
  security-events: write
  actions: read
  id-token: write

jobs:
  detect-changes:
    name: "Detectar Mudancas"
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      deploy-backend: ${{ steps.decide.outputs.deploy-backend }}
      deploy-frontend: ${{ steps.decide.outputs.deploy-frontend }}
      should-deploy: ${{ steps.decide.outputs.should-deploy }}
    
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: "Analise de Mudancas"
        id: changes
        run: |
          echo "Analisando mudancas para HML..."
          
          if git diff --name-only HEAD~1 HEAD | grep -q '^apps/backend/'; then
            echo "backend=true" >> $GITHUB_OUTPUT
            echo "Backend: mudancas detectadas"
          else
            echo "backend=false" >> $GITHUB_OUTPUT
            echo "Backend: sem mudancas"
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -q '^apps/frontend-nextjs/'; then
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "Frontend: mudancas detectadas"
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
            echo "Frontend: sem mudancas"
          fi
          
      - name: "Estrategia de Deploy"
        id: decide
        run: |
          DEPLOY_BACKEND="${{ github.event.inputs.deploy_backend }}"
          DEPLOY_FRONTEND="${{ github.event.inputs.deploy_frontend }}"
          
          if [ "$DEPLOY_BACKEND" = "" ]; then
            DEPLOY_BACKEND="${{ steps.changes.outputs.backend }}"
          fi
          
          if [ "$DEPLOY_FRONTEND" = "" ]; then
            DEPLOY_FRONTEND="${{ steps.changes.outputs.frontend }}"
          fi
          
          SHOULD_DEPLOY="false"
          if [ "$DEPLOY_BACKEND" = "true" ] || [ "$DEPLOY_FRONTEND" = "true" ]; then
            SHOULD_DEPLOY="true"
          fi
          
          echo "deploy-backend=$DEPLOY_BACKEND" >> $GITHUB_OUTPUT
          echo "deploy-frontend=$DEPLOY_FRONTEND" >> $GITHUB_OUTPUT
          echo "should-deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          
          echo "PLANO DE DEPLOY HML:"
          echo "  Backend: $DEPLOY_BACKEND"
          echo "  Frontend: $DEPLOY_FRONTEND"
          echo "  Executar deploy: $SHOULD_DEPLOY"

  security-quality-gates:
    name: "[HML-SECURITY] Gates de Qualidade e Seguranca"
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should-deploy == 'true' && github.event.inputs.force_deploy != 'true'
    
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@v4
        
      - name: "[SECURITY] GitHub Security Scanning"
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,python
          
      - name: "[SECURITY] Snyk Security Scan"
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --policy-path=.snyk
          
      - name: "[SECURITY] Upload Snyk Results"
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif
          
      - name: "[SECURITY] CodeQL Analysis"
        uses: github/codeql-action/analyze@v3
        
      - name: "[NOTIFY] Security Status"
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="[HML-SECURITY] Gates de seguranca aprovados para HOMOLOGACAO"
          else
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="[HML-SECURITY] ALERTA: Falhas de seguranca detectadas em HOMOLOGACAO!"
          fi

  test-backend:
    name: "[HML-TEST] Backend Tests"
    runs-on: ubuntu-latest
    needs: [detect-changes, security-quality-gates]
    if: needs.detect-changes.outputs.deploy-backend == 'true' && inputs.skip_tests != true
    
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@v4
        
      - name: "[SETUP] Python Environment"
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: "[CACHE] Dependencies Cache"
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            apps/backend/.venv
          key: hml-backend-deps-${{ hashFiles('apps/backend/requirements.txt') }}
          
      - name: "[INSTALL] Backend Dependencies"
        working-directory: apps/backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: "[TEST] Run Backend Tests"
        working-directory: apps/backend
        run: |
          echo "Executando testes do backend para HML..."
          python -m pytest tests/ -v --cov=. --cov-report=xml
          
      - name: "[COVERAGE] Upload Coverage"
        uses: codecov/codecov-action@v5
        with:
          file: apps/backend/coverage.xml
          flags: backend-hml

  test-frontend:
    name: "[HML-TEST] Frontend Tests"
    runs-on: ubuntu-latest
    needs: [detect-changes, security-quality-gates]
    if: needs.detect-changes.outputs.deploy-frontend == 'true' && inputs.skip_tests != true
    
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@v4
        
      - name: "[SETUP] Node.js Environment"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/frontend-nextjs/package-lock.json
          
      - name: "[INSTALL] Frontend Dependencies"
        working-directory: apps/frontend-nextjs
        run: |
          npm ci --production=false
          
      - name: "[BUILD] Frontend Build Test"
        working-directory: apps/frontend-nextjs
        run: |
          echo "Testando build do frontend para HML..."
          npm run build
          
      - name: "[TEST] Frontend Tests"
        working-directory: apps/frontend-nextjs
        run: |
          echo "Executando testes do frontend para HML..."
          npm test -- --coverage --watchAll=false

  deploy-backend-hml:
    name: "[HML-DEPLOY] Backend to Homologacao"
    runs-on: ubuntu-latest
    needs: [detect-changes, security-quality-gates, test-backend]
    if: always() && (needs.detect-changes.outputs.deploy-backend == 'true' && (needs.test-backend.result == 'success' || inputs.force_deploy == true))
    
    outputs:
      backend-url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        
      - name: "Auth Google Cloud"
        uses: google-github-actions/auth@v3
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: "Setup Cloud SDK"
        uses: google-github-actions/setup-gcloud@v3
        
      - name: "Configurar Docker"
        run: |
          gcloud auth configure-docker --quiet
          
      - name: "Build e Push Docker"
        run: |
          cd apps/backend
          
          docker pull gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:latest || echo "Sem cache anterior"
          
          docker build \
            --cache-from gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:latest \
            -t gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:$GITHUB_SHA \
            -t gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:latest \
            .
            
          docker push gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:$GITHUB_SHA
          docker push gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:latest
          
      - name: "Deploy Cloud Run"
        id: deploy
        run: |
          gcloud run deploy $BACKEND_SERVICE_NAME \
            --image=gcr.io/$PROJECT_ID/$BACKEND_SERVICE_NAME:$GITHUB_SHA \
            --platform=managed \
            --region=$REGION \
            --allow-unauthenticated \
            --port=8080 \
            --memory=1Gi \
            --cpu=1 \
            --concurrency=100 \
            --max-instances=10 \
            --min-instances=0 \
            --timeout=300 \
            --set-env-vars="ENVIRONMENT=$ENVIRONMENT,FLASK_ENV=production,DEBUG=false,SECRET_KEY=${{ secrets.SECRET_KEY }},OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" \
            --tag=hml-$(echo $GITHUB_SHA | cut -c1-7) \
            --quiet
            
          SERVICE_URL=$(gcloud run services describe $BACKEND_SERVICE_NAME --region=$REGION --format="value(status.url)")
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Backend HML: $SERVICE_URL"
          
      - name: "Health Check"
        run: |
          echo "Aguardando backend inicializar..."
          sleep 30
          
          for i in {1..10}; do
            if curl -f "${{ steps.deploy.outputs.url }}/health" > /dev/null 2>&1; then
              echo "Backend HML saudavel"
              break
            fi
            echo "Tentativa $i/10..."
            sleep 10
          done

  deploy-frontend-hml:
    name: "[HML-DEPLOY] Frontend to Homologacao"
    runs-on: ubuntu-latest
    needs: [detect-changes, security-quality-gates, test-frontend, deploy-backend-hml]
    if: always() && (needs.detect-changes.outputs.deploy-frontend == 'true' && (needs.test-frontend.result == 'success' || inputs.force_deploy == true))
    
    outputs:
      frontend-url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        
      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/frontend-nextjs/package-lock.json
          
      - name: "Restaurar Cache"
        uses: actions/cache@v4
        with:
          path: |
            apps/frontend-nextjs/node_modules
            ~/.npm
          key: hml-node-deps-${{ runner.os }}-${{ hashFiles('apps/frontend-nextjs/package-lock.json') }}
          
      - name: "Instalar Dependencias"
        run: |
          cd apps/frontend-nextjs
          npm ci
          
      - name: "Configurar Ambiente"
        run: |
          cd apps/frontend-nextjs
          
          if [ -f ".env.hml" ]; then
            cp .env.hml .env.production.local
          fi
          
          BACKEND_URL="${{ needs.deploy-backend-hml.outputs.backend-url || 'https://hml-roteiro-dispensacao-api-4f2gjf6cua-uc.a.run.app' }}"
          echo "NEXT_PUBLIC_API_URL=$BACKEND_URL" >> .env.production.local
          echo "NEXT_PUBLIC_ENVIRONMENT=homologacao" >> .env.production.local
          
      - name: "Build"
        run: |
          cd apps/frontend-nextjs
          export NODE_OPTIONS="--max-old-space-size=4096"
          npm run build
          
      - name: "Deploy Firebase"
        id: deploy
        run: |
          cd apps/frontend-nextjs
          npm install -g firebase-tools
          
          cat > .firebaserc << EOF
          {
            "projects": {
              "default": "$PROJECT_ID"
            },
            "targets": {
              "$PROJECT_ID": {
                "hosting": {
                  "hml": ["$FRONTEND_SITE"]
                }
              }
            }
          }
          EOF
          
          firebase deploy \
            --only hosting:hml \
            --project $PROJECT_ID \
            --token "${{ secrets.FIREBASE_TOKEN }}" \
            --non-interactive
            
          FRONTEND_URL="https://${FRONTEND_SITE}.web.app"
          echo "url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "Frontend HML: $FRONTEND_URL"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  post-deploy-validation:
    name: "[HML-VALIDATION] Validacao Pos-Deploy"
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-backend-hml, deploy-frontend-hml]
    if: always() && needs.detect-changes.outputs.should-deploy == 'true'
    
    outputs:
      validation-status: ${{ steps.validation.outputs.status }}
    
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@v4
        
      - name: "[VALIDATION] Smoke Tests"
        id: validation
        run: |
          echo "Executando testes de smoke em HML..."
          echo "Aguardando serviços estabilizarem..."
          sleep 30
          
          BACKEND_URL="${{ needs.deploy-backend-hml.outputs.backend-url }}"
          FRONTEND_URL="${{ needs.deploy-frontend-hml.outputs.frontend-url }}"
          
          retry_test() {
            local url=$1
            local name=$2
            for i in {1..5}; do
              echo "Testando $name (tentativa $i/5)..."
              if curl -f -s --max-time 60 "$url" > /dev/null 2>&1; then
                echo "$name OK"
                return 0
              fi
              sleep 10
            done
            echo "$name FALHOU"
            return 1
          }
          
          TESTS_PASSED=true
          
          if [ -n "$BACKEND_URL" ]; then
            retry_test "$BACKEND_URL/health" "Backend Health" || TESTS_PASSED=false
            sleep 5
            retry_test "$BACKEND_URL/api/v1/personas" "Backend API" || TESTS_PASSED=false
          fi
          
          if [ -n "$FRONTEND_URL" ]; then
            sleep 5
            retry_test "$FRONTEND_URL" "Frontend" || TESTS_PASSED=false
          fi
          
          if [ "$TESTS_PASSED" = "true" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "Todos os testes passaram"
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="[HML-VALIDATION] Validação pós-deploy APROVADA em HML"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "Alguns testes falharam"
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="[HML-VALIDATION] ALERTA: Validação pós-deploy FALHOU em HML!"
          fi

  create-release:
    name: "[HML-RELEASE] Criar Release de Homologacao"
    runs-on: ubuntu-latest
    needs: [deploy-backend-hml, deploy-frontend-hml]
    if: always() && (needs.deploy-backend-hml.result == 'success' || needs.deploy-frontend-hml.result == 'success')
    
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: "[RELEASE] Generate Version"
        id: version
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          COMMIT_SHORT=${GITHUB_SHA:0:7}
          VERSION="hml-v${TIMESTAMP}-${COMMIT_SHORT}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: "[RELEASE] Create GitHub Release"
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: "Homologacao ${{ steps.version.outputs.version }}"
          body: |
            ## Release de Homologacao ${{ steps.version.outputs.version }}
            
            **Commit:** ${{ github.sha }}
            **Branch:** hml
            **Ambiente:** Homologacao
            **Timestamp:** $(date)
            
            ### Mudancas Deployadas:
            - Backend: ${{ needs.deploy-backend-hml.result == 'success' && 'Sucesso' || 'N/A' }}
            - Frontend: ${{ needs.deploy-frontend-hml.result == 'success' && 'Sucesso' || 'N/A' }}
            
            ### Links:
            - Backend API: ${{ needs.deploy-backend-hml.outputs.backend-url }}
            - Frontend: ${{ needs.deploy-frontend-hml.outputs.frontend-url }}
            
            ### Proximos Passos:
            1. Testar funcionalidades em HML
            2. Validar com stakeholders  
            3. Promover para producao se aprovado
          draft: false
          prerelease: true

  notify-completion:
    name: "[HML-NOTIFY] Notificacao Final"
    runs-on: ubuntu-latest
    needs: [deploy-backend-hml, deploy-frontend-hml, create-release]
    if: always()
    
    steps:
      - name: "[NOTIFY] Status Final"
        run: |
          if [[ "${{ needs.post-deploy-validation.outputs.validation-status }}" == "success" ]]; then
            STATUS="SUCESSO"
            EMOJI="[OK]"
          else
            STATUS="FALHOU"
            EMOJI="[ERROR]"
          fi
          
          COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          
          if [ "$STATUS" == "SUCESSO" ]; then
            MESSAGE="[HML-SUCCESS] Deploy de HOMOLOGACAO concluido com sucesso!"
            MESSAGE="$MESSAGE%0A- Backend: ${{ needs.deploy-backend-hml.result }}"
            MESSAGE="$MESSAGE%0A- Frontend: ${{ needs.deploy-frontend-hml.result }}" 
            MESSAGE="$MESSAGE%0A- Release: ${{ needs.create-release.result }}"
            MESSAGE="$MESSAGE%0A%0ACommit: ${{ github.sha }}"
            MESSAGE="$MESSAGE%0A%0AURLs HML:"
            MESSAGE="$MESSAGE%0A- Backend: ${{ needs.deploy-backend-hml.outputs.backend-url || 'N/A' }}"
            MESSAGE="$MESSAGE%0A- Frontend: ${{ needs.deploy-frontend-hml.outputs.frontend-url || 'N/A' }}"
            MESSAGE="$MESSAGE%0A%0AProximos Passos: Validar em HML e promover para producao"
          else
            MESSAGE="[HML-ERROR] FALHA no deploy de HOMOLOGACAO!"
            MESSAGE="$MESSAGE%0A- Backend: ${{ needs.deploy-backend-hml.result }}"
            MESSAGE="$MESSAGE%0A- Frontend: ${{ needs.deploy-frontend-hml.result }}"
            MESSAGE="$MESSAGE%0A%0AVerificar logs imediatamente!"
          fi
          
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="$MESSAGE" \
            -d parse_mode="HTML"

concurrency:
  group: hml-pipeline-${{ github.sha }}
  cancel-in-progress: false