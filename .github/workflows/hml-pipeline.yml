name: 🧪 Pipeline de Homologação (HML)

on:
  push:
    branches: [hml]
    paths:
      - 'apps/backend/**'
      - 'apps/frontend-nextjs/**'
      - '.github/workflows/hml-pipeline.yml'
      # MANTER documentação - nunca ignorar
      - '**/*.md'
      - '**/README*'
      - '**/*.json'  # package.json, etc
  pull_request:
    branches: [hml]
    # PRs para HML devem ser testados
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Forçar deploy mesmo com falhas nos testes'
        required: false
        default: false
        type: boolean
      run_extended_tests:
        description: 'Executar testes estendidos (demorado)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # =====================================
  # 1. DETECÇÃO DE MUDANÇAS HML
  # =====================================
  hml-validation:
    name: 🧪 Validação para HML (Pré-Produção)
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      should-deploy: ${{ steps.decision.outputs.deploy }}
      is-promotion: ${{ steps.decision.outputs.promotion }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Detectar Mudanças HML
        id: changes
        run: |
          echo "🧪 Detectando mudanças para ambiente de HML..."
          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "📋 Analisando PR para HML: comparando com branch base ${{ github.base_ref }}"
            git fetch origin ${{ github.base_ref }}
            BACKEND_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '^apps/backend/' | wc -l || echo "0")
            FRONTEND_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '^apps/frontend-nextjs/' | wc -l || echo "0")
            WORKFLOW_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '^\.github/workflows/' | wc -l || echo "0")
          else
            echo "📋 Analisando push para HML: comparando commits"
            if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ] && [ -n "${{ github.event.before }}" ]; then
              BACKEND_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^apps/backend/' | wc -l || echo "0")
              FRONTEND_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^apps/frontend-nextjs/' | wc -l || echo "0")
              WORKFLOW_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^\.github/workflows/' | wc -l || echo "0")
            else
              echo "⚠️ Primeiro commit ou before não disponível - assumindo mudanças"
              BACKEND_CHANGED=1
              FRONTEND_CHANGED=1
              WORKFLOW_CHANGED=1
            fi
          fi
          
          echo "📊 Resultados da detecção HML:"
          echo "  Backend alterado: $BACKEND_CHANGED arquivos"
          echo "  Frontend alterado: $FRONTEND_CHANGED arquivos" 
          echo "  Workflows alterados: $WORKFLOW_CHANGED arquivos"
          
          echo "backend=$([ $BACKEND_CHANGED -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "frontend=$([ $FRONTEND_CHANGED -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "workflow=$([ $WORKFLOW_CHANGED -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: 🎯 Decisão de Deploy HML
        id: decision
        run: |
          echo "🎯 Determinando estratégia de deploy para HML..."
          
          SHOULD_DEPLOY="false"
          IS_PROMOTION="false"
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            SHOULD_DEPLOY="true"
            echo "🔧 Deploy manual solicitado para HML"
          elif [ "${{ github.event_name }}" == "push" ]; then
            if [ "${{ steps.changes.outputs.backend }}" == "true" ] || [ "${{ steps.changes.outputs.frontend }}" == "true" ]; then
              SHOULD_DEPLOY="true"
              echo "✅ Push em HML com mudanças - deploy automático"
              
              # Verificar se é um merge/promote da main
              RECENT_COMMITS=$(git log --oneline -5)
              if echo "$RECENT_COMMITS" | grep -qi "merge.*main\|promote.*production"; then
                IS_PROMOTION="true"
                echo "🚀 Detectado promote/merge da produção para HML"
              fi
            else
              echo "ℹ️ Push em HML sem mudanças relevantes"
            fi
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "🧪 Pull Request - executar apenas testes (sem deploy)"
          fi
          
          echo "deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "promotion=$IS_PROMOTION" >> $GITHUB_OUTPUT
          
          echo "📋 DECISÃO DE DEPLOY HML:"
          echo "  Deploy: $SHOULD_DEPLOY"
          echo "  Promoção: $IS_PROMOTION"
          echo "  Evento: ${{ github.event_name }}"

  # =====================================
  # 2. TESTES E QUALIDADE HML
  # =====================================
  hml-quality-gates:
    name: 🛡️ Testes e Qualidade HML
    runs-on: ubuntu-latest
    needs: hml-validation
    if: needs.hml-validation.outputs.backend == 'true' || needs.hml-validation.outputs.frontend == 'true' || github.event.inputs.force_deploy == 'true'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        if: needs.hml-validation.outputs.backend == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Setup Node.js
        if: needs.hml-validation.outputs.frontend == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/frontend-nextjs/package-lock.json

      - name: 🧪 Testes Backend HML
        if: needs.hml-validation.outputs.backend == 'true'
        run: |
          echo "🧪 Executando testes backend para HML..."
          cd apps/backend
          pip install -r requirements.txt
          pip install pytest flake8 mypy
          
          # Linting mais permissivo para HML
          echo "🔍 Verificando qualidade de código..."
          flake8 . --count --max-complexity=12 --max-line-length=140 --statistics || echo "⚠️ Avisos de linting encontrados (não bloqueante para HML)"
          
          # Testes
          echo "🧪 Executando testes..."
          python -m pytest --tb=short -v || echo "⚠️ Alguns testes falharam (verificar se são críticos)"
          
          # Testes estendidos se solicitado
          if [ "${{ github.event.inputs.run_extended_tests }}" == "true" ]; then
            echo "🔬 Executando testes estendidos..."
            python -m pytest --tb=short -v --cov=. --cov-report=html || true
          fi

      - name: 🧪 Testes Frontend HML  
        if: needs.hml-validation.outputs.frontend == 'true'
        run: |
          echo "🧪 Executando testes frontend para HML..."
          cd apps/frontend-nextjs
          npm ci
          
          # Linting mais permissivo para HML
          echo "🔍 Verificando qualidade de código..."
          npm run lint || echo "⚠️ Avisos de linting encontrados (não bloqueante para HML)"
          
          echo "🔍 Verificando tipos..."
          npm run type-check || echo "⚠️ Avisos de TypeScript encontrados (não bloqueante para HML)"
          
          echo "🧪 Executando testes..."
          npm run test -- --passWithNoTests || echo "⚠️ Alguns testes falharam (verificar se são críticos)"
          
          echo "🏗️ Testando build..."
          npm run build || echo "❌ Build falhou - pode afetar deploy"

      - name: 🔒 Verificação de Segurança Básica
        continue-on-error: true
        run: |
          echo "🔒 Verificação básica de segurança para HML..."
          echo "💡 Análise completa de segurança executada pelo workflow security-unified"
          echo "✅ Verificação delegada para pipeline de segurança"

  # =====================================
  # 3. DEPLOY HML (PRÉ-PRODUÇÃO)
  # =====================================
  hml-deploy:
    name: 🚀 Deploy HML (Pré-Produção)
    runs-on: ubuntu-latest
    needs: [hml-validation, hml-quality-gates]
    if: needs.hml-validation.outputs.should-deploy == 'true' && (needs.hml-quality-gates.result == 'success' || github.event.inputs.force_deploy == 'true')
    
    outputs:
      backend-url: ${{ steps.backend-deploy.outputs.url }}
      frontend-url: ${{ steps.frontend-deploy.outputs.url }}
    
    steps:
      - name: 📥 Checkout  
        uses: actions/checkout@v4

      - name: 🔐 Autenticar no Google Cloud
        uses: google-github-actions/auth@v3
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_environment_variables: true
          create_credentials_file: true

      - name: 🛠️ Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: 🚀 Deploy Backend HML
        id: backend-deploy
        if: needs.hml-validation.outputs.backend == 'true'
        run: |
          cd apps/backend
          
          # Configuração específica de HML
          SERVICE_NAME="roteiro-dispensacao-api-hml"
          ENV_VARS="ENVIRONMENT=homologacao,FLASK_ENV=production"
          
          echo "🧪 DEPLOY EM HML - BACKEND"
          echo "  Serviço: $SERVICE_NAME"
          echo "  Environment: homologacao"
          
          if [ "${{ needs.hml-validation.outputs.is-promotion }}" == "true" ]; then
            echo "🚀 PROMOÇÃO: Deploy de versão testada da produção"
          fi
          
          # Deploy com configurações mais flexíveis para HML
          echo "🚀 Iniciando deploy do backend HML..."
          if gcloud run deploy $SERVICE_NAME \
            --source . \
            --region=${{ secrets.GCP_REGION }} \
            --allow-unauthenticated \
            --port=8080 \
            --memory=512Mi \
            --cpu=0.5 \
            --set-env-vars="$ENV_VARS,SECRET_KEY=${{ secrets.SECRET_KEY }},OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" \
            --max-instances=5 \
            --timeout=300 \
            --quiet; then
            echo "✅ Deploy do backend HML concluído com sucesso"
          else
            echo "❌ Falha no deploy do backend HML. Tentando novamente..."
            sleep 10
            gcloud run deploy $SERVICE_NAME \
              --source . \
              --region=${{ secrets.GCP_REGION }} \
              --allow-unauthenticated \
              --port=8080 \
              --memory=512Mi \
              --cpu=0.5 \
              --set-env-vars="$ENV_VARS,SECRET_KEY=${{ secrets.SECRET_KEY }},OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" \
              --max-instances=5 \
              --timeout=300
          fi
          
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=${{ secrets.GCP_REGION }} --format="value(status.url)")
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "🌐 Backend HML deployed: $SERVICE_URL"

      - name: 🎨 Deploy Frontend HML
        id: frontend-deploy
        if: needs.hml-validation.outputs.frontend == 'true'
        run: |
          cd apps/frontend-nextjs
          echo "🔧 Instalando dependências do frontend para HML..."
          npm ci
          
          echo "🏗️ Construindo aplicação frontend para HML..."
          npm run build
          
          # Firebase deploy para HML
          echo "🔧 Configurando Firebase CLI..."
          npm install -g firebase-tools
          
          echo "🔐 Autenticando no Firebase..."
          echo "${{ secrets.FIREBASE_TOKEN }}" | firebase login:ci
          
          echo "🧪 DEPLOY EM HML - FRONTEND"
          if [ "${{ needs.hml-validation.outputs.is-promotion }}" == "true" ]; then
            echo "🚀 PROMOÇÃO: Deploy de versão testada da produção"
          fi
          
          firebase deploy --project ${{ secrets.FIREBASE_PROJECT_ID }} --only hosting:hml --non-interactive
          echo "url=https://hml-${{ secrets.FIREBASE_PROJECT_ID }}.web.app" >> $GITHUB_OUTPUT  
          echo "✅ Frontend implantado em HML: https://hml-${{ secrets.FIREBASE_PROJECT_ID }}.web.app"

  # =====================================
  # 4. TESTES DE INTEGRAÇÃO HML
  # =====================================
  hml-integration-tests:
    name: 🧪 Testes de Integração HML
    runs-on: ubuntu-latest
    needs: [hml-validation, hml-deploy]
    if: needs.hml-validation.outputs.should-deploy == 'true' && needs.hml-deploy.result == 'success'
    
    steps:
      - name: 🏥 Health Checks HML
        run: |
          echo "🏥 Verificando saúde dos serviços HML..."
          
          if [ -n "${{ needs.hml-deploy.outputs.backend-url }}" ]; then
            echo "🔍 Testando saúde do backend HML..."
            for i in {1..3}; do
              if curl -f "${{ needs.hml-deploy.outputs.backend-url }}/health" --max-time 30; then
                echo "✅ Backend HML está saudável (tentativa $i)"
                break
              else
                echo "⚠️ Backend HML não responde (tentativa $i/3)"
                sleep 10
              fi
            done
          fi
          
          if [ -n "${{ needs.hml-deploy.outputs.frontend-url }}" ]; then
            echo "🔍 Testando frontend HML..."
            for i in {1..3}; do
              if curl -f "${{ needs.hml-deploy.outputs.frontend-url }}" --max-time 30; then
                echo "✅ Frontend HML está acessível (tentativa $i)"
                break
              else
                echo "⚠️ Frontend HML não está acessível (tentativa $i/3)"
                sleep 10
              fi
            done
          fi

      - name: 🧪 Testes de Smoke HML
        run: |
          echo "🧪 Executando testes de smoke em HML..."
          
          if [ -n "${{ needs.hml-deploy.outputs.backend-url }}" ]; then
            echo "🔍 Testando endpoints básicos do backend..."
            
            # Test health endpoint
            curl -f "${{ needs.hml-deploy.outputs.backend-url }}/health" || echo "❌ Health endpoint falhou"
            
            # Test API root (if exists)
            curl -f "${{ needs.hml-deploy.outputs.backend-url }}/api" --max-time 10 || echo "ℹ️ API root endpoint não disponível"
          fi
          
          echo "✅ Testes de smoke HML concluídos"

      - name: 📊 Relatório de Deploy HML
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📊 Gerando relatório de deploy HML..."
          
          # Criar issue de tracking do deploy HML
          cat > hml_deploy_report.md << 'EOF'
          # 🧪 Deploy HML (Pré-Produção) Concluído
          
          ## 📋 Informações do Deploy
          EOF
          
          echo "- **Data**: $(date '+%d/%m/%Y %H:%M:%S')" >> hml_deploy_report.md
          echo "- **Commit**: ${{ github.sha }}" >> hml_deploy_report.md
          echo "- **Executado por**: ${{ github.actor }}" >> hml_deploy_report.md
          echo "- **Evento**: ${{ github.event_name }}" >> hml_deploy_report.md
          
          if [ "${{ needs.hml-validation.outputs.is-promotion }}" == "true" ]; then
            echo "- **Tipo**: 🚀 Promoção da Produção" >> hml_deploy_report.md
          else
            echo "- **Tipo**: 🧪 Deploy de desenvolvimento" >> hml_deploy_report.md
          fi
          
          echo "" >> hml_deploy_report.md
          echo "## 🌐 URLs de HML" >> hml_deploy_report.md
          echo "- **Backend**: ${{ needs.hml-deploy.outputs.backend-url || 'Sem mudanças' }}" >> hml_deploy_report.md
          echo "- **Frontend**: ${{ needs.hml-deploy.outputs.frontend-url || 'Sem mudanças' }}" >> hml_deploy_report.md
          echo "" >> hml_deploy_report.md
          echo "## ✅ Status dos Testes" >> hml_deploy_report.md
          echo "- Health checks: ${{ job.status == 'success' && '✅ Aprovado' || '❌ Falhou' }}" >> hml_deploy_report.md
          echo "- Testes de smoke: ${{ job.status == 'success' && '✅ Aprovado' || '❌ Falhou' }}" >> hml_deploy_report.md
          echo "- Ambiente: 🧪 HML Operacional" >> hml_deploy_report.md
          echo "" >> hml_deploy_report.md
          echo "## 🔄 Próximos Passos" >> hml_deploy_report.md
          echo "- Executar testes manuais em HML" >> hml_deploy_report.md
          echo "- Validar funcionalidades principais" >> hml_deploy_report.md
          echo "- Após validação, considerar promote para produção" >> hml_deploy_report.md
          echo "" >> hml_deploy_report.md
          echo "## 🚀 Para Promover para Produção" >> hml_deploy_report.md
          echo "1. Validar completamente em HML" >> hml_deploy_report.md
          echo "2. Fazer merge/promote de HML para main" >> hml_deploy_report.md
          echo "3. Pipeline de produção será executado automaticamente" >> hml_deploy_report.md
          echo "" >> hml_deploy_report.md
          echo "---" >> hml_deploy_report.md
          echo "*Deploy realizado automaticamente pelo pipeline HML*" >> hml_deploy_report.md
          
          gh issue create \
            --title "🧪 Deploy HML - $(date '+%d/%m/%Y %H:%M')" \
            --body-file hml_deploy_report.md \
            --label "deployment,hml,pre-production"
          
          echo "✅ Relatório de deploy HML criado"

      - name: 🎯 Resumo Final HML
        run: |
          echo "🎯 RESUMO DO DEPLOY HML:"
          echo "  Backend: ${{ needs.hml-deploy.outputs.backend-url || 'Sem mudanças' }}"
          echo "  Frontend: ${{ needs.hml-deploy.outputs.frontend-url || 'Sem mudanças' }}"
          echo "  Status: ✅ Ambiente HML operacional"

      - name: 📱 Alerta Telegram - Deploy HML Sucesso
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d parse_mode=HTML \
            -d text="🧪 <b>Deploy HML Concluído</b>%0A%0A📅 <b>Data:</b> $(date '+%d/%m/%Y %H:%M:%S')%0A🔄 <b>Commit:</b> ${{ github.sha }}%0A👤 <b>Por:</b> ${{ github.actor }}%0A%0A🌐 <b>URLs:</b>%0A• Backend: ${{ needs.hml-deploy.outputs.backend-url || 'Sem mudanças' }}%0A• Frontend: ${{ needs.hml-deploy.outputs.frontend-url || 'Sem mudanças' }}%0A%0A✅ Sistema HML operacional"

      - name: 📱 Alerta Telegram - Deploy HML Falhou  
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d parse_mode=HTML \
            -d text="❌ <b>FALHA no Deploy HML</b>%0A%0A📅 <b>Data:</b> $(date '+%d/%m/%Y %H:%M:%S')%0A🔄 <b>Commit:</b> ${{ github.sha }}%0A👤 <b>Por:</b> ${{ github.actor }}%0A%0A🔗 <b>Ver logs:</b> https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}%0A%0A🚨 Intervenção necessária"
          echo ""
          echo "🧪 AMBIENTE DE PRÉ-PRODUÇÃO ATUALIZADO"
          echo "💡 Execute testes manuais antes de promover para produção"

# =====================================
# CONFIGURAÇÃO DO WORKFLOW
# =====================================
concurrency:
  group: hml-deploy-${{ github.ref }}
  cancel-in-progress: true  # Pode cancelar deploys HML duplicados