name: "[LABELS] Sistema de Labels Automaticos"

on:
  pull_request:
    types: [opened, reopened, synchronize, edited]
    branches: [main, hml]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Numero do PR para re-aplicar labels'
        required: true
        type: number

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

jobs:
  apply-labels:
    name: "[APPLY] Aplicar Labels Automaticos"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    
    outputs:
      labels-applied: ${{ steps.labeler.outputs.labels-applied }}
      priority: ${{ steps.analysis.outputs.priority }}
      type: ${{ steps.analysis.outputs.type }}
      areas: ${{ steps.analysis.outputs.areas }}
      environment: ${{ steps.analysis.outputs.environment }}
      all_labels: ${{ steps.analysis.outputs.all_labels }}
      
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@v4
        
      - name: "[LABELS] Aplicar Labels v5"
        id: labeler
        uses: actions/labeler@v5
        with:
          configuration-path: '.github/labeler.yml'
          sync-labels: true
          dot: true
          
      - name: "[ANALYSIS] Analisar Labels Aplicados"
        id: analysis
        env:
          PR_NUMBER: ${{ github.event.inputs.pr_number || github.event.pull_request.number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Analisando labels aplicados ao PR #$PR_NUMBER..."
          
          # Buscar labels do PR via API
          LABELS=$(gh pr view $PR_NUMBER --json labels --jq '.labels[].name' | tr '\n' ',' | sed 's/,$//')
          
          # Analise de prioridade
          PRIORITY="baixa"
          if echo "$LABELS" | grep -q "prioridade: critica"; then
            PRIORITY="critica" 
          elif echo "$LABELS" | grep -q "prioridade: alta"; then
            PRIORITY="alta"
          elif echo "$LABELS" | grep -q "prioridade: media"; then
            PRIORITY="media"
          fi
          
          # Analise de tipo
          TYPE="geral"
          if echo "$LABELS" | grep -q "tipo: hotfix"; then
            TYPE="hotfix"
          elif echo "$LABELS" | grep -q "tipo: bugfix"; then
            TYPE="correcao"
          elif echo "$LABELS" | grep -q "tipo: feature"; then
            TYPE="funcionalidade"
          elif echo "$LABELS" | grep -q "breaking-change"; then
            TYPE="breaking-change"
          fi
          
          # Analise de area
          AREAS=""
          if echo "$LABELS" | grep -q "area: backend"; then
            AREAS="$AREAS Backend"
          fi
          if echo "$LABELS" | grep -q "area: frontend"; then
            AREAS="$AREAS Frontend"
          fi
          if echo "$LABELS" | grep -q "area: ci-cd"; then
            AREAS="$AREAS CI/CD"
          fi
          
          # Analise de ambiente
          ENVIRONMENT="indefinido"
          if echo "$LABELS" | grep -q "ambiente: producao"; then
            ENVIRONMENT="producao"
          elif echo "$LABELS" | grep -q "ambiente: homologacao"; then
            ENVIRONMENT="homologacao"
          fi
          
          echo "priority=$PRIORITY" >> $GITHUB_OUTPUT
          echo "type=$TYPE" >> $GITHUB_OUTPUT
          echo "areas=$AREAS" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "all_labels=$LABELS" >> $GITHUB_OUTPUT
          
          echo "Analise concluida:"
          echo "- Prioridade: $PRIORITY"
          echo "- Tipo: $TYPE" 
          echo "- Areas: $AREAS"
          echo "- Ambiente: $ENVIRONMENT"

  validate-critical-prs:
    name: "[VALIDATE] Validar PRs Criticos"
    runs-on: ubuntu-latest
    needs: apply-labels
    if: >
      contains(needs.apply-labels.outputs.all_labels, 'prioridade: critica') ||
      contains(needs.apply-labels.outputs.all_labels, 'breaking-change')
    
    steps:
      - name: "[CHECKOUT] Checkout"
        uses: actions/checkout@v4
        
      - name: "[VALIDATE] Validacao Adicional para PRs Criticos"
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PRIORITY: ${{ needs.apply-labels.outputs.priority }}
          TYPE: ${{ needs.apply-labels.outputs.type }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Executando validacoes adicionais para PR critico #$PR_NUMBER..."
          
          # Verificar se PR tem descricao adequada
          DESCRIPTION=$(gh pr view $PR_NUMBER --json body --jq '.body')
          if [ ${#DESCRIPTION} -lt 50 ]; then
            echo "AVISO: PR critico com descricao muito curta"
            
            # Criar comentario
            gh pr comment $PR_NUMBER --body "AVISO: PR Critico detectado com descricao insuficiente. Prioridade: $PRIORITY. Acoes necessarias: descricao detalhada, evidencias de teste, revisao obrigatoria."
          fi
          
          # Adicionar reviewers para PRs criticos
          if [ "$PRIORITY" = "critica" ]; then
            echo "Adicionando reviewers obrigatorios..."
            gh pr edit $PR_NUMBER --add-reviewer "AnalineS"
          fi

  notify-labeling:
    name: "[NOTIFY] Notificar Resultado do Labeling"
    runs-on: ubuntu-latest
    needs: [apply-labels, validate-critical-prs]
    if: always() && needs.apply-labels.result == 'success'
    
    steps:
      - name: "[NOTIFY] Telegram - Labels Aplicados"
        env:
          PR_NUMBER: ${{ github.event.pull_request.number || github.event.inputs.pr_number }}
          PR_TITLE: ${{ github.event.pull_request.title || 'PR Manual' }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login || github.actor }}
          PRIORITY: ${{ needs.apply-labels.outputs.priority }}
          TYPE: ${{ needs.apply-labels.outputs.type }}
          AREAS: ${{ needs.apply-labels.outputs.areas }}
          ENVIRONMENT: ${{ needs.apply-labels.outputs.environment }}
        run: |
          # Determinar emoji baseado na prioridade
          if [ "$PRIORITY" = "critica" ]; then
            STATUS_MSG="CRITICO"
          elif [ "$PRIORITY" = "alta" ]; then
            STATUS_MSG="ALTA PRIORIDADE" 
          elif [ "$PRIORITY" = "media" ]; then
            STATUS_MSG="PRIORIDADE MEDIA"
          else
            STATUS_MSG="BAIXA PRIORIDADE"
          fi
          
          # Montar mensagem
          MESSAGE="**PR $STATUS_MSG** - #$PR_NUMBER"
          MESSAGE="$MESSAGE%0A%0A**Titulo:** $PR_TITLE"
          MESSAGE="$MESSAGE%0A**Autor:** $PR_AUTHOR"
          MESSAGE="$MESSAGE%0A**Tipo:** $TYPE"
          MESSAGE="$MESSAGE%0A**Areas:** $AREAS"
          MESSAGE="$MESSAGE%0A**Ambiente:** $ENVIRONMENT"
          MESSAGE="$MESSAGE%0A**Prioridade:** $PRIORITY"
          
          if [ "$PRIORITY" = "critica" ]; then
            MESSAGE="$MESSAGE%0A%0A**ATENCAO: Revisao obrigatoria necessaria**"
          fi
          
          REPO="${{ github.repository }}"
          MESSAGE="$MESSAGE%0A%0A[Ver PR](https://github.com/$REPO/pull/$PR_NUMBER)"
          
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="$MESSAGE" \
            -d parse_mode="Markdown"

  update-dependabot-labels:
    name: "[UPDATE] Labels Especificos do Dependabot"
    runs-on: ubuntu-latest
    needs: apply-labels
    if: github.actor == 'dependabot[bot]'
    
    steps:
      - name: "[DEPENDABOT] Labels Especificos"
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Aplicando labels especificos do Dependabot..."
          
          # Determinar ambiente baseado na branch base
          if [ "${{ github.base_ref }}" = "main" ]; then
            AMBIENTE="prod"
          else
            AMBIENTE="hml"
          fi
          
          # Determinar impacto baseado no titulo
          IMPACT="baixo"
          if echo "$PR_TITLE" | grep -q -i "security\|vulnerability"; then
            IMPACT="critico"
            gh pr edit $PR_NUMBER --add-label "impacto: critico"
            gh pr edit $PR_NUMBER --add-label "security"
          elif echo "$PR_TITLE" | grep -q -i "major"; then
            IMPACT="alto"
            gh pr edit $PR_NUMBER --add-label "impacto: alto"
          else
            gh pr edit $PR_NUMBER --add-label "impacto: baixo"
          fi
          
          # Adicionar label de ambiente Dependabot
          gh pr edit $PR_NUMBER --add-label "dependabot: $AMBIENTE"
          
          echo "Labels aplicados: impacto $IMPACT, ambiente $AMBIENTE"

concurrency:
  group: pr-labeler-${{ github.event.pull_request.number || github.event.inputs.pr_number }}
  cancel-in-progress: true
