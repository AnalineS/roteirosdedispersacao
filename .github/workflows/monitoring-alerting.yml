name: "üìä Advanced Monitoring & Alerting System"

on:
  workflow_run:
    workflows: ["üîç PR Validation - Quality Gates", "üè• Daily Health Check", "üìä Performance Monitoring & Alerts", "üîí Advanced Security Scanning", "üìã Code Quality Gates & Standards"]
    types: [completed]
  schedule:
    # Run comprehensive monitoring every hour during business hours
    - cron: '0 8-18 * * 1-5'
  workflow_dispatch:
    inputs:
      monitoring_scope:
        description: 'Monitoring scope'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - 'health_only'
          - 'performance_only'
          - 'security_only'
          - 'comprehensive'
      alert_threshold:
        description: 'Alert threshold level'
        required: true
        default: 'medium'
        type: choice
        options:
          - 'low'
          - 'medium'
          - 'high'
          - 'critical'
      create_dashboard:
        description: 'Generate monitoring dashboard'
        type: boolean
        default: true

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  actions: read
  issues: write
  discussions: write

jobs:
  # ============================================================================
  # SYSTEM METRICS COLLECTION
  # ============================================================================
  metrics-collection:
    name: "üìà System Metrics Collection"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      health-status: ${{ steps.health-metrics.outputs.status }}
      performance-status: ${{ steps.performance-metrics.outputs.status }}
      security-status: ${{ steps.security-metrics.outputs.status }}
      quality-status: ${{ steps.quality-metrics.outputs.status }}
      overall-score: ${{ steps.overall-assessment.outputs.score }}
      alert-level: ${{ steps.overall-assessment.outputs.alert-level }}
    steps:
      - uses: actions/checkout@v4

      - name: "üîë Google Cloud Auth"
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: "‚ö° Setup Cloud SDK"
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: "üè• Health Metrics Collection"
        id: health-metrics
        run: |
          echo "üè• Collecting health metrics..."

          HEALTH_SCORE=0
          SERVICES_CHECKED=0
          SERVICES_HEALTHY=0

          # Function to check service health
          check_service_health() {
              local service_name=$1
              local region=$2
              local expected_url_pattern=$3

              echo "üîç Checking $service_name health..."
              SERVICES_CHECKED=$((SERVICES_CHECKED + 1))

              # Get service URL
              SERVICE_URL=$(gcloud run services describe "$service_name" --region="$region" --format='value(status.url)' 2>/dev/null || echo "")

              if [[ -n "$SERVICE_URL" ]]; then
                  # Test basic connectivity
                  if curl -f -s --max-time 10 "$SERVICE_URL" > /dev/null; then
                      echo "‚úÖ $service_name: Basic connectivity OK"
                      SERVICES_HEALTHY=$((SERVICES_HEALTHY + 1))

                      # Test specific endpoint if it's an API
                      if [[ "$service_name" == *"backend"* ]]; then
                          if curl -f -s --max-time 10 "$SERVICE_URL/api/v1/health" > /dev/null; then
                              echo "‚úÖ $service_name: API health endpoint OK"
                          else
                              echo "‚ö†Ô∏è $service_name: API health endpoint issues"
                              SERVICES_HEALTHY=$((SERVICES_HEALTHY - 1))
                          fi
                      fi
                  else
                      echo "‚ùå $service_name: Basic connectivity FAILED"
                  fi
              else
                  echo "‚ùå $service_name: Service not found"
              fi
          }

          # Check all services
          check_service_health "hml-roteiro-dispensacao-frontend" "${{ vars.GCP_REGION }}" "frontend"
          check_service_health "hml-roteiro-dispensacao-backend" "${{ vars.GCP_REGION }}" "backend"
          check_service_health "roteiro-dispensacao-frontend" "${{ vars.GCP_REGION }}" "frontend"
          check_service_health "roteiro-dispensacao-backend" "${{ vars.GCP_REGION }}" "backend"

          # Calculate health score
          if [[ $SERVICES_CHECKED -gt 0 ]]; then
              HEALTH_SCORE=$((SERVICES_HEALTHY * 100 / SERVICES_CHECKED))
          fi

          echo "üìä Health Summary: $SERVICES_HEALTHY/$SERVICES_CHECKED services healthy ($HEALTH_SCORE%)"

          # Determine health status
          if [[ $HEALTH_SCORE -ge 90 ]]; then
              HEALTH_STATUS="excellent"
          elif [[ $HEALTH_SCORE -ge 75 ]]; then
              HEALTH_STATUS="good"
          elif [[ $HEALTH_SCORE -ge 50 ]]; then
              HEALTH_STATUS="degraded"
          else
              HEALTH_STATUS="critical"
          fi

          echo "status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          echo "score=$HEALTH_SCORE" >> $GITHUB_OUTPUT

      - name: "‚ö° Performance Metrics Collection"
        id: performance-metrics
        run: |
          echo "‚ö° Collecting performance metrics..."

          PERFORMANCE_SCORE=100
          RESPONSE_TIME_ISSUES=0

          # Function to test performance
          test_performance() {
              local url=$1
              local service_name=$2

              echo "‚ö° Testing $service_name performance: $url"

              # Measure response time (3 requests)
              local total_time=0
              local successful_requests=0

              for i in {1..3}; do
                  local start_time=$(date +%s%3N)
                  if curl -f -s --max-time 15 "$url" > /dev/null; then
                      local end_time=$(date +%s%3N)
                      local duration=$((end_time - start_time))
                      total_time=$((total_time + duration))
                      successful_requests=$((successful_requests + 1))
                      echo "  Request $i: ${duration}ms"
                  else
                      echo "  Request $i: FAILED"
                  fi
                  sleep 1
              done

              if [[ $successful_requests -gt 0 ]]; then
                  local avg_time=$((total_time / successful_requests))
                  echo "üìä $service_name average response time: ${avg_time}ms"

                  # Performance scoring
                  if [[ $avg_time -gt 3000 ]]; then
                      echo "üö® $service_name: Poor performance (${avg_time}ms > 3000ms)"
                      PERFORMANCE_SCORE=$((PERFORMANCE_SCORE - 30))
                      RESPONSE_TIME_ISSUES=$((RESPONSE_TIME_ISSUES + 1))
                  elif [[ $avg_time -gt 2000 ]]; then
                      echo "‚ö†Ô∏è $service_name: Slow performance (${avg_time}ms > 2000ms)"
                      PERFORMANCE_SCORE=$((PERFORMANCE_SCORE - 15))
                      RESPONSE_TIME_ISSUES=$((RESPONSE_TIME_ISSUES + 1))
                  else
                      echo "‚úÖ $service_name: Good performance (${avg_time}ms)"
                  fi
              else
                  echo "‚ùå $service_name: All requests failed"
                  PERFORMANCE_SCORE=$((PERFORMANCE_SCORE - 50))
              fi
          }

          # Test performance of accessible services
          STAGING_FRONTEND_URL=$(gcloud run services describe hml-roteiro-dispensacao-frontend --region=${{ vars.GCP_REGION }} --format='value(status.url)' 2>/dev/null || echo "")
          STAGING_BACKEND_URL=$(gcloud run services describe hml-roteiro-dispensacao-backend --region=${{ vars.GCP_REGION }} --format='value(status.url)' 2>/dev/null || echo "")

          if [[ -n "$STAGING_FRONTEND_URL" ]]; then
              test_performance "$STAGING_FRONTEND_URL" "Staging Frontend"
          fi

          if [[ -n "$STAGING_BACKEND_URL" ]]; then
              test_performance "$STAGING_BACKEND_URL/api/v1/health" "Staging Backend API"
          fi

          # Ensure minimum score
          if [[ $PERFORMANCE_SCORE -lt 0 ]]; then
              PERFORMANCE_SCORE=0
          fi

          echo "üìä Performance Summary: Score $PERFORMANCE_SCORE/100, Issues: $RESPONSE_TIME_ISSUES"

          # Determine performance status
          if [[ $PERFORMANCE_SCORE -ge 90 ]]; then
              PERFORMANCE_STATUS="excellent"
          elif [[ $PERFORMANCE_SCORE -ge 75 ]]; then
              PERFORMANCE_STATUS="good"
          elif [[ $PERFORMANCE_SCORE -ge 50 ]]; then
              PERFORMANCE_STATUS="degraded"
          else
              PERFORMANCE_STATUS="critical"
          fi

          echo "status=$PERFORMANCE_STATUS" >> $GITHUB_OUTPUT
          echo "score=$PERFORMANCE_SCORE" >> $GITHUB_OUTPUT

      - name: "üîí Security Metrics Collection"
        id: security-metrics
        run: |
          echo "üîí Collecting security metrics..."

          SECURITY_SCORE=100
          SECURITY_ISSUES=0

          # Check recent security scan results
          echo "üîç Checking recent security scan results..."

          # Get recent workflow runs for security scanning
          RECENT_SECURITY_RUNS=$(gh run list --workflow="security-scanning.yml" --limit=5 --json status,conclusion,createdAt 2>/dev/null || echo "[]")

          if [[ "$RECENT_SECURITY_RUNS" != "[]" ]]; then
              FAILED_SECURITY_RUNS=$(echo "$RECENT_SECURITY_RUNS" | jq '[.[] | select(.conclusion == "failure")] | length' 2>/dev/null || echo "0")

              if [[ "$FAILED_SECURITY_RUNS" -gt "0" ]]; then
                  echo "‚ö†Ô∏è Recent security scan failures detected: $FAILED_SECURITY_RUNS"
                  SECURITY_SCORE=$((SECURITY_SCORE - FAILED_SECURITY_RUNS * 20))
                  SECURITY_ISSUES=$((SECURITY_ISSUES + FAILED_SECURITY_RUNS))
              fi
          fi

          # Check for security-related open issues
          SECURITY_ISSUES_OPEN=$(gh issue list --label="security" --state="open" --json number 2>/dev/null | jq '. | length' || echo "0")

          if [[ "$SECURITY_ISSUES_OPEN" -gt "0" ]]; then
              echo "üö® Open security issues: $SECURITY_ISSUES_OPEN"
              SECURITY_SCORE=$((SECURITY_SCORE - SECURITY_ISSUES_OPEN * 10))
              SECURITY_ISSUES=$((SECURITY_ISSUES + SECURITY_ISSUES_OPEN))
          fi

          # Check SSL/TLS certificates
          echo "üîê Checking SSL/TLS certificate status..."

          check_ssl() {
              local domain=$1
              if timeout 5 openssl s_client -connect "$domain:443" -servername "$domain" </dev/null 2>/dev/null | openssl x509 -noout -dates 2>/dev/null; then
                  echo "‚úÖ SSL certificate valid for $domain"
              else
                  echo "‚ö†Ô∏è SSL certificate issues for $domain"
                  SECURITY_SCORE=$((SECURITY_SCORE - 10))
                  SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
              fi
          }

          # Check production domains if available
          if [[ -n "${{ vars.PRODUCTION_FRONTEND_DOMAIN }}" ]]; then
              check_ssl "${{ vars.PRODUCTION_FRONTEND_DOMAIN }}"
          fi

          # Ensure minimum score
          if [[ $SECURITY_SCORE -lt 0 ]]; then
              SECURITY_SCORE=0
          fi

          echo "üìä Security Summary: Score $SECURITY_SCORE/100, Issues: $SECURITY_ISSUES"

          # Determine security status
          if [[ $SECURITY_SCORE -ge 90 ]]; then
              SECURITY_STATUS="excellent"
          elif [[ $SECURITY_SCORE -ge 75 ]]; then
              SECURITY_STATUS="good"
          elif [[ $SECURITY_SCORE -ge 50 ]]; then
              SECURITY_STATUS="degraded"
          else
              SECURITY_STATUS="critical"
          fi

          echo "status=$SECURITY_STATUS" >> $GITHUB_OUTPUT
          echo "score=$SECURITY_SCORE" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: "üìã Quality Metrics Collection"
        id: quality-metrics
        run: |
          echo "üìã Collecting code quality metrics..."

          QUALITY_SCORE=100
          QUALITY_ISSUES=0

          # Check recent quality scan results
          echo "üîç Checking recent code quality results..."

          # Get recent quality workflow runs
          RECENT_QUALITY_RUNS=$(gh run list --workflow="code-quality-gates.yml" --limit=5 --json status,conclusion,createdAt 2>/dev/null || echo "[]")

          if [[ "$RECENT_QUALITY_RUNS" != "[]" ]]; then
              FAILED_QUALITY_RUNS=$(echo "$RECENT_QUALITY_RUNS" | jq '[.[] | select(.conclusion == "failure")] | length' 2>/dev/null || echo "0")

              if [[ "$FAILED_QUALITY_RUNS" -gt "0" ]]; then
                  echo "‚ö†Ô∏è Recent quality check failures detected: $FAILED_QUALITY_RUNS"
                  QUALITY_SCORE=$((QUALITY_SCORE - FAILED_QUALITY_RUNS * 15))
                  QUALITY_ISSUES=$((QUALITY_ISSUES + FAILED_QUALITY_RUNS))
              fi
          fi

          # Check for code quality related open issues
          QUALITY_ISSUES_OPEN=$(gh issue list --label="code-quality" --state="open" --json number 2>/dev/null | jq '. | length' || echo "0")

          if [[ "$QUALITY_ISSUES_OPEN" -gt "0" ]]; then
              echo "‚ö†Ô∏è Open code quality issues: $QUALITY_ISSUES_OPEN"
              QUALITY_SCORE=$((QUALITY_SCORE - QUALITY_ISSUES_OPEN * 5))
              QUALITY_ISSUES=$((QUALITY_ISSUES + QUALITY_ISSUES_OPEN))
          fi

          # Check recent PR validation results
          RECENT_PR_RUNS=$(gh run list --workflow="pr-validation.yml" --limit=10 --json status,conclusion,createdAt 2>/dev/null || echo "[]")

          if [[ "$RECENT_PR_RUNS" != "[]" ]]; then
              FAILED_PR_RUNS=$(echo "$RECENT_PR_RUNS" | jq '[.[] | select(.conclusion == "failure")] | length' 2>/dev/null || echo "0")

              if [[ "$FAILED_PR_RUNS" -gt "2" ]]; then
                  echo "‚ö†Ô∏è Multiple recent PR validation failures: $FAILED_PR_RUNS"
                  QUALITY_SCORE=$((QUALITY_SCORE - 10))
                  QUALITY_ISSUES=$((QUALITY_ISSUES + 1))
              fi
          fi

          # Ensure minimum score
          if [[ $QUALITY_SCORE -lt 0 ]]; then
              QUALITY_SCORE=0
          fi

          echo "üìä Quality Summary: Score $QUALITY_SCORE/100, Issues: $QUALITY_ISSUES"

          # Determine quality status
          if [[ $QUALITY_SCORE -ge 90 ]]; then
              QUALITY_STATUS="excellent"
          elif [[ $QUALITY_SCORE -ge 75 ]]; then
              QUALITY_STATUS="good"
          elif [[ $QUALITY_SCORE -ge 50 ]]; then
              QUALITY_STATUS="degraded"
          else
              QUALITY_STATUS="critical"
          fi

          echo "status=$QUALITY_STATUS" >> $GITHUB_OUTPUT
          echo "score=$QUALITY_SCORE" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: "üéØ Overall System Assessment"
        id: overall-assessment
        run: |
          echo "üéØ Calculating overall system assessment..."

          HEALTH_SCORE="${{ steps.health-metrics.outputs.score }}"
          PERFORMANCE_SCORE="${{ steps.performance-metrics.outputs.score }}"
          SECURITY_SCORE="${{ steps.security-metrics.outputs.score }}"
          QUALITY_SCORE="${{ steps.quality-metrics.outputs.score }}"

          # Calculate weighted overall score
          # Health: 30%, Performance: 25%, Security: 30%, Quality: 15%
          OVERALL_SCORE=$(echo "scale=0; ($HEALTH_SCORE * 0.30) + ($PERFORMANCE_SCORE * 0.25) + ($SECURITY_SCORE * 0.30) + ($QUALITY_SCORE * 0.15)" | bc -l)

          echo "üìä System Assessment Summary:"
          echo "  - Health: $HEALTH_SCORE/100 (30% weight)"
          echo "  - Performance: $PERFORMANCE_SCORE/100 (25% weight)"
          echo "  - Security: $SECURITY_SCORE/100 (30% weight)"
          echo "  - Quality: $QUALITY_SCORE/100 (15% weight)"
          echo "  - Overall: $OVERALL_SCORE/100"

          # Determine alert level
          ALERT_LEVEL="none"
          if [[ $OVERALL_SCORE -lt 50 ]]; then
              ALERT_LEVEL="critical"
          elif [[ $OVERALL_SCORE -lt 70 ]]; then
              ALERT_LEVEL="high"
          elif [[ $OVERALL_SCORE -lt 85 ]]; then
              ALERT_LEVEL="medium"
          elif [[ $OVERALL_SCORE -lt 95 ]]; then
              ALERT_LEVEL="low"
          fi

          # Check individual component critical states
          if [[ "${{ steps.health-metrics.outputs.status }}" == "critical" ]] || [[ "${{ steps.security-metrics.outputs.status }}" == "critical" ]]; then
              ALERT_LEVEL="critical"
          fi

          echo "üö® Alert Level: $ALERT_LEVEL"

          echo "score=$OVERALL_SCORE" >> $GITHUB_OUTPUT
          echo "alert-level=$ALERT_LEVEL" >> $GITHUB_OUTPUT

  # ============================================================================
  # INTELLIGENT ALERTING SYSTEM
  # ============================================================================
  intelligent-alerting:
    name: "üö® Intelligent Alerting"
    runs-on: ubuntu-latest
    needs: metrics-collection
    if: needs.metrics-collection.outputs.alert-level != 'none'
    steps:
      - uses: actions/checkout@v4

      - name: "üö® Generate Smart Alerts"
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          ALERT_LEVEL: ${{ needs.metrics-collection.outputs.alert-level }}
          OVERALL_SCORE: ${{ needs.metrics-collection.outputs.overall-score }}
          HEALTH_STATUS: ${{ needs.metrics-collection.outputs.health-status }}
          PERFORMANCE_STATUS: ${{ needs.metrics-collection.outputs.performance-status }}
          SECURITY_STATUS: ${{ needs.metrics-collection.outputs.security-status }}
          QUALITY_STATUS: ${{ needs.metrics-collection.outputs.quality-status }}
        run: |
          echo "üö® Generating intelligent alerts..."

          # Determine if we should send alert based on threshold setting
          THRESHOLD_SETTING="${{ github.event.inputs.alert_threshold || 'medium' }}"
          SEND_ALERT=false

          case "$THRESHOLD_SETTING" in
              "low")
                  if [[ "$ALERT_LEVEL" != "none" ]]; then SEND_ALERT=true; fi
                  ;;
              "medium")
                  if [[ "$ALERT_LEVEL" == "medium" || "$ALERT_LEVEL" == "high" || "$ALERT_LEVEL" == "critical" ]]; then SEND_ALERT=true; fi
                  ;;
              "high")
                  if [[ "$ALERT_LEVEL" == "high" || "$ALERT_LEVEL" == "critical" ]]; then SEND_ALERT=true; fi
                  ;;
              "critical")
                  if [[ "$ALERT_LEVEL" == "critical" ]]; then SEND_ALERT=true; fi
                  ;;
          esac

          if [[ "$SEND_ALERT" == "false" ]]; then
              echo "üìä Alert level $ALERT_LEVEL below threshold $THRESHOLD_SETTING - skipping notification"
              exit 0
          fi

          # Generate alert message
          case "$ALERT_LEVEL" in
              "critical")
                  ALERT_EMOJI="üî¥"
                  ALERT_TITLE="CR√çTICO"
                  ;;
              "high")
                  ALERT_EMOJI="üü†"
                  ALERT_TITLE="ALTO"
                  ;;
              "medium")
                  ALERT_EMOJI="üü°"
                  ALERT_TITLE="M√âDIO"
                  ;;
              "low")
                  ALERT_EMOJI="üîµ"
                  ALERT_TITLE="BAIXO"
                  ;;
          esac

          # Component status emojis
          case "$HEALTH_STATUS" in
              "excellent") HEALTH_EMOJI="üü¢" ;;
              "good") HEALTH_EMOJI="üü°" ;;
              "degraded") HEALTH_EMOJI="üü†" ;;
              "critical") HEALTH_EMOJI="üî¥" ;;
              *) HEALTH_EMOJI="‚ùì" ;;
          esac

          case "$PERFORMANCE_STATUS" in
              "excellent") PERF_EMOJI="üü¢" ;;
              "good") PERF_EMOJI="üü°" ;;
              "degraded") PERF_EMOJI="üü†" ;;
              "critical") PERF_EMOJI="üî¥" ;;
              *) PERF_EMOJI="‚ùì" ;;
          esac

          case "$SECURITY_STATUS" in
              "excellent") SEC_EMOJI="üü¢" ;;
              "good") SEC_EMOJI="üü°" ;;
              "degraded") SEC_EMOJI="üü†" ;;
              "critical") SEC_EMOJI="üî¥" ;;
              *) SEC_EMOJI="‚ùì" ;;
          esac

          case "$QUALITY_STATUS" in
              "excellent") QUAL_EMOJI="üü¢" ;;
              "good") QUAL_EMOJI="üü°" ;;
              "degraded") QUAL_EMOJI="üü†" ;;
              "critical") QUAL_EMOJI="üî¥" ;;
              *) QUAL_EMOJI="‚ùì" ;;
          esac

          # Send Telegram alert if configured
          if [[ -n "$TELEGRAM_TOKEN" && -n "$TELEGRAM_CHAT_ID" ]]; then
              echo "üì± Sending Telegram alert..."

              MESSAGE="$ALERT_EMOJI <b>Alerta $ALERT_TITLE do Sistema</b>%0A"
              MESSAGE="${MESSAGE}%0Aüìä <b>Score Geral:</b> ${OVERALL_SCORE}/100"
              MESSAGE="${MESSAGE}%0A%0Aüìà <b>Status dos Componentes:</b>%0A"
              MESSAGE="${MESSAGE}$HEALTH_EMOJI <b>Sa√∫de:</b> $HEALTH_STATUS%0A"
              MESSAGE="${MESSAGE}$PERF_EMOJI <b>Performance:</b> $PERFORMANCE_STATUS%0A"
              MESSAGE="${MESSAGE}$SEC_EMOJI <b>Seguran√ßa:</b> $SECURITY_STATUS%0A"
              MESSAGE="${MESSAGE}$QUAL_EMOJI <b>Qualidade:</b> $QUALITY_STATUS%0A"
              MESSAGE="${MESSAGE}%0A‚è∞ <b>Timestamp:</b> $(date '+%H:%M - %d/%m/%Y')%0A"
              MESSAGE="${MESSAGE}üîó <b>Detalhes:</b> <a href=\"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\">Ver Relat√≥rio</a>"

              curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
                -d chat_id="$TELEGRAM_CHAT_ID" \
                -d text="$MESSAGE" \
                -d parse_mode="HTML" \
                -d disable_web_page_preview="true" >/dev/null

              echo "‚úÖ Telegram alert sent"
          else
              echo "‚ö†Ô∏è Telegram not configured"
          fi

          # Create GitHub issue for critical alerts
          if [[ "$ALERT_LEVEL" == "critical" ]]; then
              echo "üìù Creating GitHub issue for critical alert..."

              gh issue create \
                --title "üö® Critical System Alert - $(date '+%Y-%m-%d')" \
                --body "## üö® Critical System Alert

              **Overall Score**: $OVERALL_SCORE/100
              **Alert Level**: $ALERT_LEVEL

              ### Component Status
              - **Health**: $HEALTH_STATUS
              - **Performance**: $PERFORMANCE_STATUS
              - **Security**: $SECURITY_STATUS
              - **Quality**: $QUALITY_STATUS

              ### Immediate Actions Required
              - [ ] Investigate health issues if critical
              - [ ] Address performance degradation
              - [ ] Review security concerns
              - [ ] Fix code quality issues

              **Monitoring Report**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

              ---
              *This issue was automatically created by the monitoring system.*" \
                --label "critical,monitoring,automated" || echo "Failed to create issue"
          fi
        env:
          GH_TOKEN: ${{ github.token }}

  # ============================================================================
  # MONITORING DASHBOARD GENERATION
  # ============================================================================
  monitoring-dashboard:
    name: "üìä Monitoring Dashboard"
    runs-on: ubuntu-latest
    needs: metrics-collection
    if: github.event.inputs.create_dashboard == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: "üìä Generate Monitoring Dashboard"
        run: |
          echo "üìä Generating comprehensive monitoring dashboard..."

          # Create dashboard markdown
          cat > monitoring-dashboard.md << EOF
          # üìä System Monitoring Dashboard

          **Last Updated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Overall Score**: ${{ needs.metrics-collection.outputs.overall-score }}/100
          **Alert Level**: ${{ needs.metrics-collection.outputs.alert-level }}

          ## üéØ System Overview

          | Component | Status | Score | Trend |
          |-----------|---------|--------|-------|
          | üè• Health | ${{ needs.metrics-collection.outputs.health-status }} | ${{ needs.metrics-collection.outputs.health-score || 'N/A' }}/100 | ‚û°Ô∏è |
          | ‚ö° Performance | ${{ needs.metrics-collection.outputs.performance-status }} | ${{ needs.metrics-collection.outputs.performance-score || 'N/A' }}/100 | ‚û°Ô∏è |
          | üîí Security | ${{ needs.metrics-collection.outputs.security-status }} | ${{ needs.metrics-collection.outputs.security-score || 'N/A' }}/100 | ‚û°Ô∏è |
          | üìã Quality | ${{ needs.metrics-collection.outputs.quality-status }} | ${{ needs.metrics-collection.outputs.quality-score || 'N/A' }}/100 | ‚û°Ô∏è |

          ## üìà Key Metrics

          ### üè• Health Metrics
          - Service availability monitoring
          - API endpoint responsiveness
          - Database connectivity
          - External service dependencies

          ### ‚ö° Performance Metrics
          - Response time monitoring
          - Throughput analysis
          - Resource utilization
          - Load testing results

          ### üîí Security Metrics
          - Vulnerability scanning results
          - Security scan failures
          - SSL/TLS certificate status
          - Open security issues

          ### üìã Quality Metrics
          - Code quality scores
          - Test coverage
          - Static analysis results
          - PR validation success rate

          ## üö® Alert Configuration

          **Current Threshold**: ${{ github.event.inputs.alert_threshold || 'medium' }}

          | Level | Trigger | Action |
          |-------|---------|---------|
          | üî¥ Critical | Score < 50 or Critical Component | Immediate notification + GitHub issue |
          | üü† High | Score < 70 | Team notification |
          | üü° Medium | Score < 85 | Team notification (if enabled) |
          | üîµ Low | Score < 95 | Team notification (if enabled) |

          ## üîó Quick Links

          - [Health Check Workflow](${{ github.server_url }}/${{ github.repository }}/actions/workflows/daily-health-check.yml)
          - [Performance Monitoring](${{ github.server_url }}/${{ github.repository }}/actions/workflows/performance-monitoring.yml)
          - [Security Scanning](${{ github.server_url }}/${{ github.repository }}/actions/workflows/security-scanning.yml)
          - [Quality Gates](${{ github.server_url }}/${{ github.repository }}/actions/workflows/code-quality-gates.yml)
          - [Recent Alerts](https://github.com/${{ github.repository }}/issues?q=is%3Aissue+label%3Amonitoring)

          ## üìã Recommendations

          EOF

          # Add recommendations based on current status
          OVERALL_SCORE=${{ needs.metrics-collection.outputs.overall-score }}

          if [[ $OVERALL_SCORE -ge 90 ]]; then
              echo "‚úÖ **Excellent**: System is performing optimally" >> monitoring-dashboard.md
          elif [[ $OVERALL_SCORE -ge 75 ]]; then
              echo "üü° **Good**: System is stable with minor issues" >> monitoring-dashboard.md
              echo "- Monitor trending issues" >> monitoring-dashboard.md
              echo "- Schedule preventive maintenance" >> monitoring-dashboard.md
          elif [[ $OVERALL_SCORE -ge 50 ]]; then
              echo "üü† **Needs Attention**: System has notable issues" >> monitoring-dashboard.md
              echo "- Address performance bottlenecks" >> monitoring-dashboard.md
              echo "- Review security vulnerabilities" >> monitoring-dashboard.md
              echo "- Improve code quality scores" >> monitoring-dashboard.md
          else
              echo "üî¥ **Critical**: System requires immediate attention" >> monitoring-dashboard.md
              echo "- **URGENT**: Address critical health issues" >> monitoring-dashboard.md
              echo "- **URGENT**: Fix security vulnerabilities" >> monitoring-dashboard.md
              echo "- Implement emergency response procedures" >> monitoring-dashboard.md
          fi

          echo "" >> monitoring-dashboard.md
          echo "---" >> monitoring-dashboard.md
          echo "*This dashboard is automatically updated by the monitoring system.*" >> monitoring-dashboard.md

          echo "üìä Dashboard generated successfully"

      - name: "üíæ Store Dashboard"
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-dashboard
          path: monitoring-dashboard.md
          retention-days: 30

      - name: "üìä Dashboard Summary"
        run: |
          echo "## üìä Live Monitoring Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Score**: ${{ needs.metrics-collection.outputs.overall-score }}/100" >> $GITHUB_STEP_SUMMARY
          echo "**Alert Level**: ${{ needs.metrics-collection.outputs.alert-level }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Component Status" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| üè• Health | ${{ needs.metrics-collection.outputs.health-status }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ö° Performance | ${{ needs.metrics-collection.outputs.performance-status }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîí Security | ${{ needs.metrics-collection.outputs.security-status }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üìã Quality | ${{ needs.metrics-collection.outputs.quality-status }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä **Full dashboard available in workflow artifacts**" >> $GITHUB_STEP_SUMMARY