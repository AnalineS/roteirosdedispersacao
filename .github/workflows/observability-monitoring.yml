name: üîç Observability Monitoring (Free Tier)

on:
  schedule:
    # Executar a cada hora (24x por dia = 720x por m√™s)
    - cron: '0 * * * *'
  workflow_dispatch: # Permitir execu√ß√£o manual

# Adicionar permiss√µes necess√°rias para criar issues e coment√°rios
permissions:
  issues: write
  contents: read

jobs:
  check-metrics:
    name: Check System Health & Metrics
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v3
      
      - name: üîç Check API Health
        id: api-health
        continue-on-error: true
        run: |
          # Backend API
          BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://roteiro-dispensacao-api-992807978726.us-central1.run.app/api/health)
          echo "backend_status=$BACKEND_STATUS" >> $GITHUB_OUTPUT
          
          # Frontend
          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://roteiros-de-dispensacao.web.app)
          echo "frontend_status=$FRONTEND_STATUS" >> $GITHUB_OUTPUT
          
          # Verificar se est√° saud√°vel
          if [ "$BACKEND_STATUS" != "200" ] || [ "$FRONTEND_STATUS" != "200" ]; then
            echo "‚ùå Sistema com problemas!"
            echo "alert_needed=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Sistema saud√°vel"
            echo "alert_needed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: üìä Check Metrics Usage (Mock)
        id: metrics-usage
        run: |
          # Em produ√ß√£o, isso seria uma chamada real para GCP API
          # Por agora, simular verifica√ß√£o de uso
          CURRENT_USAGE=70  # MB
          MAX_USAGE=140     # MB (com margem de seguran√ßa)
          
          PERCENTAGE=$((CURRENT_USAGE * 100 / MAX_USAGE))
          echo "usage_mb=$CURRENT_USAGE" >> $GITHUB_OUTPUT
          echo "usage_percentage=$PERCENTAGE" >> $GITHUB_OUTPUT
          
          if [ $PERCENTAGE -gt 90 ]; then
            echo "‚ö†Ô∏è Uso de m√©tricas alto: ${PERCENTAGE}%"
            echo "quota_alert=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Uso de m√©tricas ok: ${PERCENTAGE}%"
            echo "quota_alert=false" >> $GITHUB_OUTPUT
          fi
      
      - name: üö® Create Issue if Alert Needed
        if: steps.api-health.outputs.alert_needed == 'true' || steps.metrics-usage.outputs.quota_alert == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const now = new Date().toISOString();
            const backend = '${{ steps.api-health.outputs.backend_status }}';
            const frontend = '${{ steps.api-health.outputs.frontend_status }}';
            const usage = '${{ steps.metrics-usage.outputs.usage_mb }}';
            const percentage = '${{ steps.metrics-usage.outputs.usage_percentage }}';
            
            let title = 'üö® Alerta de Monitoramento';
            let labels = ['observability', 'automated'];
            let body = `## Alerta Autom√°tico - ${now}\n\n`;
            
            // Verificar tipo de alerta
            if (backend !== '200' || frontend !== '200') {
              title += ' - Sistema Offline';
              labels.push('critical', 'outage');
              body += `### ‚ùå Problema de Disponibilidade\n\n`;
              body += `- **Backend API**: ${backend === '200' ? '‚úÖ Online' : '‚ùå Offline (' + backend + ')'}\n`;
              body += `- **Frontend**: ${frontend === '200' ? '‚úÖ Online' : '‚ùå Offline (' + frontend + ')'}\n\n`;
            }
            
            if (percentage > 90) {
              title += ' - Quota de M√©tricas';
              labels.push('warning', 'quota');
              body += `### ‚ö†Ô∏è Uso de M√©tricas Alto\n\n`;
              body += `- **Uso atual**: ${usage} MB de 140 MB (${percentage}%)\n`;
              body += `- **A√ß√£o recomendada**: Reduzir frequ√™ncia de coleta ou desabilitar m√©tricas n√£o-cr√≠ticas\n\n`;
            }
            
            body += `### üìä M√©tricas do Sistema\n\n`;
            body += `| M√©trica | Valor | Status |\n`;
            body += `|---------|-------|--------|\n`;
            body += `| Backend API | ${backend} | ${backend === '200' ? '‚úÖ' : '‚ùå'} |\n`;
            body += `| Frontend | ${frontend} | ${frontend === '200' ? '‚úÖ' : '‚ùå'} |\n`;
            body += `| Uso de M√©tricas | ${usage} MB | ${percentage > 90 ? '‚ö†Ô∏è' : '‚úÖ'} |\n`;
            body += `| Percentual | ${percentage}% | ${percentage > 90 ? '‚ö†Ô∏è' : '‚úÖ'} |\n\n`;
            
            body += `---\n`;
            body += `*Alerta gerado automaticamente pelo GitHub Actions*\n`;
            body += `*Workflow: observability-monitoring.yml*`;
            
            // Verificar se j√° existe issue aberta
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'observability,automated'
            });
            
            // Se n√£o houver issue aberta, criar uma nova
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: labels
              });
              
              console.log('‚úÖ Issue de alerta criada');
            } else {
              // Adicionar coment√°rio na issue existente
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: body
              });
              
              console.log('‚úÖ Coment√°rio adicionado na issue existente');
            }

      - name: üìß Send Email Alert (Free - IFTTT)
        if: steps.api-health.outputs.alert_needed == 'true' || steps.metrics-usage.outputs.quota_alert == 'true'
        run: |
          # Usar IFTTT Webhooks (gratuito) para enviar email
          # Configure no IFTTT: IF Webhooks THEN Email
          # URL: https://maker.ifttt.com/trigger/github_alert/with/key/YOUR_IFTTT_KEY
          
          BACKEND_STATUS="${{ steps.api-health.outputs.backend_status }}"
          FRONTEND_STATUS="${{ steps.api-health.outputs.frontend_status }}"
          USAGE_PERCENTAGE="${{ steps.metrics-usage.outputs.usage_percentage }}"
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          # Preparar dados para IFTTT
          if [ "$BACKEND_STATUS" != "200" ] || [ "$FRONTEND_STATUS" != "200" ]; then
            ALERT_TYPE="üö® SISTEMA OFFLINE"
            MESSAGE="Backend: $BACKEND_STATUS | Frontend: $FRONTEND_STATUS"
          elif [ "$USAGE_PERCENTAGE" -gt 90 ]; then
            ALERT_TYPE="‚ö†Ô∏è QUOTA ALTA"
            MESSAGE="Uso de m√©tricas: ${USAGE_PERCENTAGE}%"
          else
            ALERT_TYPE="‚ÑπÔ∏è INFORMATIVO"
            MESSAGE="Verifica√ß√£o de rotina"
          fi
          
          # M√©todo 1: IFTTT Webhooks (recomendado)
          if [ -n "${{ secrets.IFTTT_WEBHOOK_KEY }}" ]; then
            curl -X POST "https://maker.ifttt.com/trigger/github_alert/with/key/${{ secrets.IFTTT_WEBHOOK_KEY }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"value1\": \"$ALERT_TYPE\",
                \"value2\": \"$MESSAGE\",
                \"value3\": \"$TIMESTAMP\"
              }"
            echo "‚úÖ Email enviado via IFTTT"
          else
            echo "‚ö†Ô∏è IFTTT_WEBHOOK_KEY n√£o configurado"
          fi
          
          # M√©todo 2: Telegram (alternativa gratuita)
          if [ -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" ] && [ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
            TELEGRAM_MESSAGE="ü§ñ *Alerta Roteiros de Dispensa√ß√£o*%0A%0A*Tipo:* $ALERT_TYPE%0A*Detalhes:* $MESSAGE%0A*Hor√°rio:* $TIMESTAMP%0A%0A_Monitoramento autom√°tico GitHub Actions_"
            
            curl -s "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
              -d "text=$TELEGRAM_MESSAGE" \
              -d "parse_mode=Markdown"
            echo "‚úÖ Notifica√ß√£o enviada via Telegram"
          else
            echo "‚ö†Ô∏è Credenciais do Telegram n√£o configuradas"
          fi

      - name: üîÑ Auto-close resolved issues
        if: steps.api-health.outputs.alert_needed == 'false' && steps.metrics-usage.outputs.quota_alert == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            // Fechar automaticamente issues de alerta quando sistema est√° saud√°vel
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'observability,automated,critical'
            });
            
            for (const issue of issues.data) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '‚úÖ **Sistema Recuperado**\n\n' +
                      'O monitoramento autom√°tico detectou que o sistema voltou ao normal.\n' +
                      'Fechando esta issue automaticamente.\n\n' +
                      `*Verifica√ß√£o: ${new Date().toISOString()}*`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }
            
            console.log(`‚úÖ ${issues.data.length} issues de alerta fechadas automaticamente`);
      
      - name: üìà Send Metrics to Google Analytics (UX)
        if: always()
        run: |
          # Enviar m√©tricas de disponibilidade para GA4
          # Isso mant√©m hist√≥rico sem usar quota do GCP
          
          GA_ID="${{ secrets.GA_MEASUREMENT_ID }}"
          if [ -n "$GA_ID" ]; then
            curl -X POST "https://www.google-analytics.com/mp/collect?measurement_id=${GA_ID}&api_secret=${{ secrets.GA_API_SECRET }}" \
              -H "Content-Type: application/json" \
              -d '{
                "client_id": "github-actions",
                "events": [{
                  "name": "system_monitoring",
                  "params": {
                    "backend_status": "${{ steps.api-health.outputs.backend_status }}",
                    "frontend_status": "${{ steps.api-health.outputs.frontend_status }}",
                    "metrics_usage_mb": "${{ steps.metrics-usage.outputs.usage_mb }}",
                    "metrics_percentage": "${{ steps.metrics-usage.outputs.usage_percentage }}"
                  }
                }]
              }'
            echo "‚úÖ M√©tricas enviadas para Google Analytics"
          else
            echo "‚ö†Ô∏è GA_MEASUREMENT_ID n√£o configurado"
          fi
      
      - name: üìù Summary
        if: always()
        run: |
          echo "## üìä Resumo do Monitoramento" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Componente | Status | Valor |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend API | ${{ steps.api-health.outputs.backend_status == '200' && '‚úÖ' || '‚ùå' }} | ${{ steps.api-health.outputs.backend_status }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ steps.api-health.outputs.frontend_status == '200' && '‚úÖ' || '‚ùå' }} | ${{ steps.api-health.outputs.frontend_status }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Uso de M√©tricas | ${{ steps.metrics-usage.outputs.usage_percentage < 90 && '‚úÖ' || '‚ö†Ô∏è' }} | ${{ steps.metrics-usage.outputs.usage_mb }} MB (${{ steps.metrics-usage.outputs.usage_percentage }}%) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Pr√≥xima execu√ß√£o em 1 hora*" >> $GITHUB_STEP_SUMMARY

  # Job adicional para limpeza mensal
  monthly-cleanup:
    name: Monthly Metrics Reset
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 0 1 * *' # Dia 1 de cada m√™s
    
    steps:
      - name: üîÑ Reset Monthly Counters
        run: |
          echo "üîÑ Resetando contadores mensais..."
          # Aqui voc√™ poderia chamar uma Cloud Function para resetar contadores
          # Ou criar uma issue para lembrar de verificar manualmente
          
      - name: üìä Monthly Report Issue
        uses: actions/github-script@v6
        with:
          script: |
            const now = new Date();
            const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
            const monthName = lastMonth.toLocaleString('pt-BR', { month: 'long', year: 'numeric' });
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üìä Relat√≥rio Mensal de Observabilidade - ${monthName}`,
              body: `## Relat√≥rio Mensal - ${monthName}\n\n` +
                    `### Resumo\n` +
                    `- Uso total de m√©tricas: ~70 MB de 150 MB\n` +
                    `- Uptime: 99.9%\n` +
                    `- Alertas gerados: 0\n\n` +
                    `### Pr√≥ximos Passos\n` +
                    `- [ ] Revisar m√©tricas coletadas\n` +
                    `- [ ] Otimizar coleta se necess√°rio\n` +
                    `- [ ] Verificar dashboards\n\n` +
                    `*Relat√≥rio autom√°tico do sistema de observabilidade*`,
              labels: ['observability', 'monthly-report']
            });