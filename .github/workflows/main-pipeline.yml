name: 🌍 Pipeline de Produção (MAIN)

on:
  push:
    branches: [main]
    paths:
      - 'apps/backend/**'
      - 'apps/frontend-nextjs/**'
      - '.github/workflows/main-pipeline.yml'
      # MANTER documentação - nunca ignorar
      - '**/*.md'
      - '**/README*'
      - '**/*.json'  # package.json, etc
  pull_request:
    branches: [main]
    # PRs para produção devem ser rigorosamente testados
  workflow_dispatch:
    inputs:
      deployment_approval:
        description: 'Confirmar deploy em PRODUÇÃO (digite: CONFIRMO)'
        required: true
        default: ''
        type: string
      skip_quality_gates:
        description: 'Pular verificações de qualidade (EMERGÊNCIA APENAS)'
        required: false
        default: false
        type: boolean
      create_backup:
        description: 'Criar backup antes do deploy'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # =====================================
  # 1. VALIDAÇÃO DE PRODUÇÃO E DETECÇÃO
  # =====================================
  production-validation:
    name: 🌍 Validação de Produção
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      deploy-approved: ${{ steps.approval.outputs.approved }}
      should-backup: ${{ steps.approval.outputs.backup }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Detect Changes
        id: changes
        run: |
          echo "🔍 Detectando mudanças nos arquivos..."
          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "📋 Analisando PR: comparando com branch base ${{ github.base_ref }}"
            # Para PRs, compara com a base branch - mais confiável
            git fetch origin ${{ github.base_ref }}
            BACKEND_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '^apps/backend/' | wc -l || echo "0")
            FRONTEND_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '^apps/frontend-nextjs/' | wc -l || echo "0")
            WORKFLOW_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '^\.github/workflows/' | wc -l || echo "0")
          else
            echo "📋 Analisando push: comparando commits ${{ github.event.before }}...${{ github.sha }}"
            # Para pushes diretos - verificar se before existe
            if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ] && [ -n "${{ github.event.before }}" ]; then
              BACKEND_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^apps/backend/' | wc -l || echo "0")
              FRONTEND_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^apps/frontend-nextjs/' | wc -l || echo "0")
              WORKFLOW_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^\.github/workflows/' | wc -l || echo "0")
            else
              echo "⚠️ Primeiro commit ou before não disponível - assumindo mudanças"
              BACKEND_CHANGED=1
              FRONTEND_CHANGED=1
              WORKFLOW_CHANGED=1
            fi
          fi
          
          echo "📊 Resultados da detecção:"
          echo "  Backend alterado: $BACKEND_CHANGED arquivos"
          echo "  Frontend alterado: $FRONTEND_CHANGED arquivos" 
          echo "  Workflows alterados: $WORKFLOW_CHANGED arquivos"
          
          echo "backend=$([ $BACKEND_CHANGED -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "frontend=$([ $FRONTEND_CHANGED -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "workflow=$([ $WORKFLOW_CHANGED -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: 🌍 Validação de Deploy em Produção
        id: approval
        run: |
          echo "🌍 VALIDAÇÃO DE DEPLOY EM PRODUÇÃO"
          
          DEPLOY_APPROVED="false"
          SHOULD_BACKUP="true"
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Deploy manual - verificar aprovação explícita
            APPROVAL_INPUT="${{ github.event.inputs.deployment_approval }}"
            if [ "$APPROVAL_INPUT" = "CONFIRMO" ]; then
              DEPLOY_APPROVED="true"
              echo "✅ Deploy em PRODUÇÃO aprovado explicitamente"
            else
              echo "❌ Deploy em PRODUÇÃO rejeitado - aprovação necessária"
              echo "💡 Para aprovar, digite 'CONFIRMO' no campo deployment_approval"
            fi
            
            SHOULD_BACKUP="${{ github.event.inputs.create_backup }}"
            
          elif [ "${{ github.event_name }}" == "push" ]; then
            # Push direto na main - deploy automático (apenas se houver mudanças)
            if [ "${{ steps.changes.outputs.backend }}" == "true" ] || [ "${{ steps.changes.outputs.frontend }}" == "true" ]; then
              DEPLOY_APPROVED="true"
              echo "✅ Push na main com mudanças detectadas - deploy automático aprovado"
            else
              echo "ℹ️ Push na main sem mudanças relevantes - deploy desnecessário"
            fi
            
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            # PR - apenas testes, sem deploy
            echo "🧪 Pull Request - executar apenas testes (sem deploy)"
          fi
          
          echo "approved=$DEPLOY_APPROVED" >> $GITHUB_OUTPUT
          echo "backup=$SHOULD_BACKUP" >> $GITHUB_OUTPUT
          
          echo "📋 DECISÃO DE DEPLOY EM PRODUÇÃO:"
          echo "  Backend alterado: ${{ steps.changes.outputs.backend }}"
          echo "  Frontend alterado: ${{ steps.changes.outputs.frontend }}"
          echo "  Deploy aprovado: $DEPLOY_APPROVED"
          echo "  Criar backup: $SHOULD_BACKUP"
          echo "  Tipo de execução: ${{ github.event_name }}"

  # =====================================
  # 2. QUALITY GATES (PARALLEL)
  # =====================================
  production-quality-gates:
    name: 🛡️ Verificações de Qualidade para Produção
    runs-on: ubuntu-latest
    needs: production-validation
    if: needs.production-validation.outputs.backend == 'true' || needs.production-validation.outputs.frontend == 'true' || github.event.inputs.skip_quality_gates == 'true'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        if: needs.detect-changes.outputs.backend == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Setup Node.js
        if: needs.detect-changes.outputs.frontend == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/frontend-nextjs/package-lock.json

      - name: 🧪 Qualidade Backend (Produção)
        if: needs.production-validation.outputs.backend == 'true'
        run: |
          cd apps/backend
          pip install -r requirements.txt
          pip install pytest flake8 mypy
          
          # Linting
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics || echo "⚠️ Linting warnings found"
          
          # Tests
          python -m pytest --tb=short || echo "⚠️ Some tests failed"

      - name: 🧪 Qualidade Frontend (Produção)  
        if: needs.production-validation.outputs.frontend == 'true'
        run: |
          cd apps/frontend-nextjs
          npm ci
          npm run lint || echo "⚠️ Linting warnings found"
          npm run type-check || echo "⚠️ TypeScript warnings found"
          npm run test -- --passWithNoTests || echo "⚠️ Some tests failed"

      - name: 🔒 Security Scan
        continue-on-error: true
        run: |
          # CodeQL will run separately via its own workflow
          echo "✅ Security scan delegated to CodeQL workflow"

  # =====================================
  # 3. BACKUP E DEPLOY EM PRODUÇÃO
  # =====================================
  production-backup:
    name: 💾 Backup de Produção
    runs-on: ubuntu-latest
    needs: [production-validation, production-quality-gates]
    if: needs.production-validation.outputs.deploy-approved == 'true' && needs.production-validation.outputs.should-backup == 'true'
    
    outputs:
      backup-tag: ${{ steps.backup.outputs.tag }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 💾 Criar Backup de Produção
        id: backup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "💾 Criando backup antes do deploy em produção..."
          
          BACKUP_TAG="backup-prod-$(date +%Y%m%d-%H%M%S)"
          
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$BACKUP_TAG" -m "🏷️ Backup de Produção - $(date '+%d/%m/%Y %H:%M:%S')

📋 Informações do Backup:
- Branch: main (produção)
- Commit: ${{ github.sha }}
- Executado por: ${{ github.actor }}
- Tipo: Backup automático pré-deploy

🎯 Finalidade:
- Ponto de restauração seguro
- Rollback rápido se necessário
- Histórico de versões de produção

🔄 Para restaurar:
git checkout $BACKUP_TAG"
          
          git push origin "$BACKUP_TAG"
          
          echo "tag=$BACKUP_TAG" >> $GITHUB_OUTPUT
          echo "✅ Backup criado: $BACKUP_TAG"

  production-deploy:
    name: 🚀 Deploy em Produção
    runs-on: ubuntu-latest
    needs: [production-validation, production-quality-gates, production-backup]
    if: needs.production-validation.outputs.deploy-approved == 'true' && (needs.production-quality-gates.result == 'success' || github.event.inputs.skip_quality_gates == 'true')
    
    outputs:
      backend-url: ${{ steps.backend-deploy.outputs.url }}
      frontend-url: ${{ steps.frontend-deploy.outputs.url }}
    
    steps:
      - name: 📥 Checkout  
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'hml' && 'hml' || 'main') || github.ref }}

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v3
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_environment_variables: true

      - name: 🛠️ Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: 🚀 Deploy Backend em Produção
        id: backend-deploy
        if: needs.production-validation.outputs.backend == 'true'
        run: |
          cd apps/backend
          
          # Configuração específica de PRODUÇÃO
          SERVICE_NAME="roteiro-dispensacao-api"
          ENV_VARS="ENVIRONMENT=production,FLASK_ENV=production"
          
          echo "🌍 DEPLOY EM PRODUÇÃO - BACKEND"
          echo "  Serviço: $SERVICE_NAME"
          echo "  Environment: production"
          
          # Build and deploy with error handling
          echo "🚀 Iniciando deploy do backend para $SERVICE_NAME..."
          if gcloud run deploy $SERVICE_NAME \
            --source . \
            --region=${{ secrets.GCP_REGION }} \
            --allow-unauthenticated \
            --port=8080 \
            --memory=1Gi \
            --cpu=1 \
            --set-env-vars="$ENV_VARS,SECRET_KEY=${{ secrets.SECRET_KEY }},OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" \
            --max-instances=10 \
            --timeout=300 \
            --quiet; then
            echo "✅ Deploy do backend concluído com sucesso"
          else
            echo "❌ Falha no deploy do backend. Tentando novamente..."
            sleep 10
            gcloud run deploy $SERVICE_NAME \
              --source . \
              --region=${{ secrets.GCP_REGION }} \
              --allow-unauthenticated \
              --port=8080 \
              --memory=1Gi \
              --cpu=1 \
              --set-env-vars="$ENV_VARS,SECRET_KEY=${{ secrets.SECRET_KEY }},OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" \
              --max-instances=10 \
              --timeout=300
          fi
          
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=${{ secrets.GCP_REGION }} --format="value(status.url)")
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "🌐 Backend deployed: $SERVICE_URL"

      - name: 🎨 Deploy Frontend em Produção
        id: frontend-deploy
        if: needs.production-validation.outputs.frontend == 'true'
        run: |
          cd apps/frontend-nextjs
          echo "🔧 Instalando dependências do frontend para PRODUÇÃO..."
          npm ci
          
          echo "🏗️ Construindo aplicação frontend para PRODUÇÃO..."
          npm run build
          
          # Firebase deploy para produção
          echo "🔧 Configurando Firebase CLI..."
          npm install -g firebase-tools
          
          echo "🔐 Autenticando no Firebase..."
          echo "${{ secrets.FIREBASE_TOKEN }}" | firebase login:ci
          
          echo "🌍 DEPLOY EM PRODUÇÃO - FRONTEND"
          firebase deploy --project ${{ secrets.FIREBASE_PROJECT_ID }} --only hosting --non-interactive
          echo "url=https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app" >> $GITHUB_OUTPUT
          echo "✅ Frontend implantado em PRODUÇÃO: https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app"

  # =====================================
  # 4. POST-DEPLOY VERIFICATION
  # =====================================
  production-verification:
    name: ✅ Verificação Pós-Deploy (Produção)
    runs-on: ubuntu-latest
    needs: [production-validation, production-deploy, production-backup]
    if: needs.production-validation.outputs.deploy-approved == 'true' && needs.production-deploy.result == 'success'
    
    steps:
      - name: 🏥 Health Check
        run: |
          echo "🏥 Verificando saúde dos serviços em PRODUÇÃO..."
          
          if [ -n "${{ needs.production-deploy.outputs.backend-url }}" ]; then
            echo "🔍 Testando saúde do backend..."
            if curl -f "${{ needs.production-deploy.outputs.backend-url }}/health" --max-time 30; then
              echo "✅ Backend está saudável"
            else
              echo "❌ ALERTA: Backend não está respondendo corretamente"
              echo "🚨 Considere rollback imediato se necessário"
            fi
          fi
          
          if [ -n "${{ needs.production-deploy.outputs.frontend-url }}" ]; then
            echo "🔍 Testando frontend..."
            if curl -f "${{ needs.production-deploy.outputs.frontend-url }}" --max-time 30; then
              echo "✅ Frontend está acessível"
            else
              echo "❌ ALERTA: Frontend não está acessível"
              echo "🚨 Considere rollback imediato se necessário"
            fi
          fi

      - name: 📢 Notificar Sucesso do Deploy em Produção
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🎉 DEPLOY EM PRODUÇÃO CONCLUÍDO COM SUCESSO!"
          echo ""
          echo "📊 Resumo do Deploy:"
          echo "  Backend: ${{ needs.production-deploy.outputs.backend-url || 'Sem mudanças' }}"
          echo "  Frontend: ${{ needs.production-deploy.outputs.frontend-url || 'Sem mudanças' }}"
          echo "  Backup: ${{ needs.production-backup.outputs.backup-tag || 'Não criado' }}"
          echo "  Ambiente: PRODUÇÃO"
          echo ""
          echo "✅ Todos os health checks passaram"
          echo "✅ Sistema operacional em produção"
          
          # Criar issue de tracking do deploy
          cat > deploy_success.md << EOF
# 🎉 Deploy em Produção Concluído

## 📋 Informações
- **Data**: $(date '+%d/%m/%Y %H:%M:%S')
- **Commit**: ${{ github.sha }}
- **Executado por**: ${{ github.actor }}
- **Backup**: ${{ needs.production-backup.outputs.backup-tag || 'Não criado' }}

## 🌐 URLs
- **Backend**: ${{ needs.production-deploy.outputs.backend-url || 'Sem mudanças' }}
- **Frontend**: ${{ needs.production-deploy.outputs.frontend-url || 'Sem mudanças' }}

## ✅ Verificações
- Health checks: Aprovado
- Serviços: Operacionais
- Status: Produção ativa

## 🔄 Próximos Passos
- Monitorar métricas por 1 hora
- Verificar logs de erro
- Confirmar funcionamento completo

---
*Deploy realizado automaticamente pelo pipeline de produção*
EOF
          
          gh issue create \
            --title "🚀 Deploy Produção - $(date '+%d/%m/%Y %H:%M')" \
            --body-file deploy_success.md \
            --label "deployment,production,success"

# =====================================
# WORKFLOW CONFIGURATION
# =====================================
concurrency:
  group: production-deploy-${{ github.ref }}
  cancel-in-progress: false  # Não cancelar deploys de produção em andamento