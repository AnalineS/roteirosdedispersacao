name: 🚀 Main Pipeline (Unified)

on:
  push:
    branches: [main, hml]
    paths:
      - 'apps/backend/**'
      - 'apps/frontend-nextjs/**'
      - '.github/workflows/main-pipeline.yml'
      # MANTER documentação - nunca ignorar
      - '**/*.md'
      - '**/README*'
      - '**/*.json'  # package.json, etc
  pull_request:
    branches: [main, hml]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'hml'
        type: choice
        options:
          - hml
          - production
      force_deploy:
        description: 'Force deploy (skip quality gates)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # =====================================
  # 1. CHANGE DETECTION
  # =====================================
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      deploy-needed: ${{ steps.decision.outputs.deploy }}
      target-env: ${{ steps.decision.outputs.environment }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Detect Changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # Para PRs, compara com a base branch
            BACKEND_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '^apps/backend/' | wc -l)
            FRONTEND_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '^apps/frontend-nextjs/' | wc -l)
          else
            # Para pushes diretos
            BACKEND_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^apps/backend/' | wc -l)
            FRONTEND_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^apps/frontend-nextjs/' | wc -l)
          fi
          
          echo "backend=$([ $BACKEND_CHANGED -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "frontend=$([ $FRONTEND_CHANGED -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: 🎯 Deployment Decision
        id: decision
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/hml" ]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
            echo "environment=hml" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "deploy=true" >> $GITHUB_OUTPUT  
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
            echo "environment=none" >> $GITHUB_OUTPUT
          fi
          
          echo "📋 Deployment Plan:"
          echo "  Backend Changes: ${{ steps.changes.outputs.backend }}"
          echo "  Frontend Changes: ${{ steps.changes.outputs.frontend }}"
          echo "  Deploy Needed: $(cat $GITHUB_OUTPUT | grep deploy= | cut -d= -f2)"
          echo "  Target Environment: $(cat $GITHUB_OUTPUT | grep environment= | cut -d= -f2)"

  # =====================================
  # 2. QUALITY GATES (PARALLEL)
  # =====================================
  quality-gates:
    name: 🛡️ Quality Gates
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.frontend == 'true' || github.event.inputs.force_deploy == 'true'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        if: needs.detect-changes.outputs.backend == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Setup Node.js
        if: needs.detect-changes.outputs.frontend == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/frontend-nextjs/package-lock.json

      - name: 🧪 Backend Quality
        if: needs.detect-changes.outputs.backend == 'true'
        run: |
          cd apps/backend
          pip install -r requirements.txt
          pip install pytest flake8 mypy
          
          # Linting
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics || echo "⚠️ Linting warnings found"
          
          # Tests
          python -m pytest --tb=short || echo "⚠️ Some tests failed"

      - name: 🧪 Frontend Quality  
        if: needs.detect-changes.outputs.frontend == 'true'
        run: |
          cd apps/frontend-nextjs
          npm ci
          npm run lint || echo "⚠️ Linting warnings found"
          npm run type-check || echo "⚠️ TypeScript warnings found"
          npm run test -- --passWithNoTests || echo "⚠️ Some tests failed"

      - name: 🔒 Security Scan
        continue-on-error: true
        run: |
          # CodeQL will run separately via its own workflow
          echo "✅ Security scan delegated to CodeQL workflow"

  # =====================================
  # 3. BUILD & DEPLOY (CONDITIONAL)
  # =====================================
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-gates]
    if: needs.detect-changes.outputs.deploy-needed == 'true' && (needs.quality-gates.result == 'success' || github.event.inputs.force_deploy == 'true')
    
    outputs:
      backend-url: ${{ steps.backend-deploy.outputs.url }}
      frontend-url: ${{ steps.frontend-deploy.outputs.url }}
    
    steps:
      - name: 📥 Checkout  
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'hml' && 'hml' || 'main') || github.ref }}

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🛠️ Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🚀 Deploy Backend
        id: backend-deploy
        if: needs.detect-changes.outputs.backend == 'true'
        run: |
          cd apps/backend
          
          # Determine environment
          if [ "${{ needs.detect-changes.outputs.target-env }}" == "production" ]; then
            SERVICE_NAME="roteiro-dispensacao-api"
            ENV_VARS="ENVIRONMENT=production,FLASK_ENV=production"
          else
            SERVICE_NAME="roteiro-dispensacao-api-hml"
            ENV_VARS="ENVIRONMENT=homologacao,FLASK_ENV=production"
          fi
          
          # Build and deploy
          gcloud run deploy $SERVICE_NAME \
            --source . \
            --region=${{ secrets.GCP_REGION }} \
            --allow-unauthenticated \
            --port=8080 \
            --memory=1Gi \
            --cpu=1 \
            --set-env-vars="$ENV_VARS,SECRET_KEY=${{ secrets.SECRET_KEY }},OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" \
            --quiet
          
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=${{ secrets.GCP_REGION }} --format="value(status.url)")
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "🌐 Backend deployed: $SERVICE_URL"

      - name: 🎨 Deploy Frontend
        id: frontend-deploy
        if: needs.detect-changes.outputs.frontend == 'true'
        run: |
          cd apps/frontend-nextjs
          npm ci
          npm run build
          
          # Firebase deploy
          npm install -g firebase-tools
          echo "${{ secrets.FIREBASE_TOKEN }}" | firebase login:ci
          
          if [ "${{ needs.detect-changes.outputs.target-env }}" == "production" ]; then
            firebase deploy --project ${{ secrets.FIREBASE_PROJECT_ID }} --only hosting
            echo "url=https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app" >> $GITHUB_OUTPUT
          else
            firebase deploy --project ${{ secrets.FIREBASE_PROJECT_ID }} --only hosting:hml
            echo "url=https://hml-${{ secrets.FIREBASE_PROJECT_ID }}.web.app" >> $GITHUB_OUTPUT
          fi

  # =====================================
  # 4. POST-DEPLOY VERIFICATION
  # =====================================
  verify:
    name: ✅ Verify Deployment
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy]
    if: needs.detect-changes.outputs.deploy-needed == 'true' && needs.deploy.result == 'success'
    
    steps:
      - name: 🏥 Health Check
        run: |
          if [ -n "${{ needs.deploy.outputs.backend-url }}" ]; then
            echo "🔍 Testing backend health..."
            curl -f "${{ needs.deploy.outputs.backend-url }}/health" || echo "⚠️ Backend health check failed"
          fi
          
          if [ -n "${{ needs.deploy.outputs.frontend-url }}" ]; then
            echo "🔍 Testing frontend..."
            curl -f "${{ needs.deploy.outputs.frontend-url }}" || echo "⚠️ Frontend check failed"
          fi

      - name: 📢 Notify Success
        if: success()
        run: |
          echo "🎉 Deployment successful!"
          echo "Backend: ${{ needs.deploy.outputs.backend-url || 'No changes' }}"
          echo "Frontend: ${{ needs.deploy.outputs.frontend-url || 'No changes' }}"
          echo "Environment: ${{ needs.detect-changes.outputs.target-env }}"

# =====================================
# WORKFLOW CONFIGURATION
# =====================================
concurrency:
  group: deploy-${{ github.ref }}-${{ github.event.inputs.environment || 'auto' }}
  cancel-in-progress: false