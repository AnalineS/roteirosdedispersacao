# Setup Environment Workflow - Roteiros de Dispensa√ß√£o
# Workflow para configurar e validar o ambiente Google Cloud/Firebase
# Executa quando h√° mudan√ßas nas configura√ß√µes de ambiente

name: [FIX] Setup & Validate Environment

on:
  workflow_dispatch:
    inputs:
      validate_only:
        description: 'Apenas validar configura√ß√£o (n√£o fazer deploy)'
        required: true
        default: true
        type: boolean
      setup_fresh:
        description: 'Setup completo do ambiente (primeira execu√ß√£o)'
        required: true
        default: false
        type: boolean
  push:
    paths:
      - '.github/workflows/setup-environment.yml'
      - 'firebase.json'
      - '.firebaserc'

env:
  # Google Cloud Configuration
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  
  # Firebase Configuration
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

jobs:
  validate-secrets:
    name: [SEARCH] Validate GitHub Secrets
    runs-on: ubuntu-latest
    
    steps:
    - name: Validate Required Secrets
      run: |
        echo "[SEARCH] Validating GitHub Secrets..."
        
        # Function to check if secret exists and is not empty
        check_secret() {
          local secret_name=$1
          local secret_value=$2
          
          if [ -z "$secret_value" ]; then
            echo "[ERROR] MISSING: $secret_name"
            return 1
          else
            echo "[OK] OK: $secret_name (${#secret_value} chars)"
            return 0
          fi
        }
        
        # Track validation results
        all_valid=true
        
        echo "[LIST] Google Cloud Secrets:"
        check_secret "GCP_PROJECT_ID" "${{ secrets.GCP_PROJECT_ID }}" || all_valid=false
        check_secret "GCP_REGION" "${{ secrets.GCP_REGION }}" || all_valid=false
        check_secret "GCP_SERVICE_ACCOUNT_KEY" "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" || all_valid=false
        
        echo ""
        echo "[LIST] Firebase Secrets:"
        check_secret "FIREBASE_PROJECT_ID" "${{ secrets.FIREBASE_PROJECT_ID }}" || all_valid=false
        check_secret "FIREBASE_API_KEY" "${{ secrets.FIREBASE_API_KEY }}" || all_valid=false
        check_secret "FIREBASE_AUTH_DOMAIN" "${{ secrets.FIREBASE_AUTH_DOMAIN }}" || all_valid=false
        check_secret "FIREBASE_STORAGE_BUCKET" "${{ secrets.FIREBASE_STORAGE_BUCKET }}" || all_valid=false
        check_secret "FIREBASE_MESSAGING_SENDER_ID" "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" || all_valid=false
        check_secret "FIREBASE_APP_ID" "${{ secrets.FIREBASE_APP_ID }}" || all_valid=false
        check_secret "FIREBASE_TOKEN" "${{ secrets.FIREBASE_TOKEN }}" || all_valid=false
        
        echo ""
        echo "[LIST] Analytics & Application Secrets:"
        check_secret "GA_MEASUREMENT_ID" "${{ secrets.GA_MEASUREMENT_ID }}" || all_valid=false
        check_secret "SECRET_KEY" "${{ secrets.SECRET_KEY }}" || all_valid=false
        
        echo ""
        echo "[LIST] Optional API Secrets:"
        if [ -n "${{ secrets.OPENROUTER_API_KEY }}" ]; then
          echo "[OK] OPENROUTER_API_KEY configured"
        else
          echo "[WARNING]  OPENROUTER_API_KEY not configured (optional for medical AI)"
        fi
        
        if [ -n "${{ secrets.HUGGINGFACE_API_KEY }}" ]; then
          echo "[OK] HUGGINGFACE_API_KEY configured"
        else
          echo "[WARNING]  HUGGINGFACE_API_KEY not configured (optional for embeddings)"
        fi
        
        # Final validation
        if [ "$all_valid" = true ]; then
          echo ""
          echo "üéâ All required secrets are configured!"
          echo "[OK] Environment is ready for medical platform deployment"
        else
          echo ""
          echo "[ERROR] Some required secrets are missing!"
          echo "üìö Please configure missing secrets in GitHub repository settings:"
          echo "   Repository > Settings > Secrets and variables > Actions"
          exit 1
        fi

  validate-gcp-connection:
    name: üåê Validate Google Cloud Connection
    runs-on: ubuntu-latest
    needs: validate-secrets
    if: ${{ !failure() }}
    
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Validate GCP Project and APIs
      run: |
        echo "[SEARCH] Validating Google Cloud Project..."
        
        # Check project exists and is accessible
        PROJECT_INFO=$(gcloud projects describe ${{ secrets.GCP_PROJECT_ID }} --format="value(projectId,name,lifecycleState)")
        echo "[OK] Project: $PROJECT_INFO"
        
        echo ""
        echo "[SEARCH] Checking required APIs..."
        
        # List of required APIs for medical platform
        required_apis=(
          "cloudbuild.googleapis.com"
          "run.googleapis.com" 
          "containerregistry.googleapis.com"
          "artifactregistry.googleapis.com"
          "firebase.googleapis.com"
          "firebasehosting.googleapis.com"
        )
        
        all_apis_enabled=true
        
        for api in "${required_apis[@]}"; do
          if gcloud services list --enabled --filter="name:$api" --format="value(name)" | grep -q "$api"; then
            echo "[OK] $api - ENABLED"
          else
            echo "[ERROR] $api - DISABLED"
            all_apis_enabled=false
          fi
        done
        
        if [ "$all_apis_enabled" = true ]; then
          echo ""
          echo "üéâ All required APIs are enabled!"
        else
          echo ""
          echo "[WARNING]  Some APIs need to be enabled. Run the deploy workflow to enable them automatically."
        fi
        
        # Check Cloud Run region
        echo ""
        echo "[SEARCH] Validating Cloud Run region..."
        if gcloud run regions list --filter="name:${{ secrets.GCP_REGION }}" --format="value(name)" | grep -q "${{ secrets.GCP_REGION }}"; then
          echo "[OK] Region ${{ secrets.GCP_REGION }} is available for Cloud Run"
        else
          echo "[ERROR] Region ${{ secrets.GCP_REGION }} is not available for Cloud Run"
          echo "Available regions:"
          gcloud run regions list --format="table(name)"
          exit 1
        fi

  validate-firebase-connection:
    name: üî• Validate Firebase Connection
    runs-on: ubuntu-latest
    needs: validate-secrets
    if: ${{ !failure() }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
      
    - name: Validate Firebase Token
      run: |
        echo "[SEARCH] Validating Firebase authentication..."
        
        # Test Firebase token
        echo "${{ secrets.FIREBASE_TOKEN }}" | firebase login:ci
        
        echo "[OK] Firebase authentication successful"
        
    - name: Validate Firebase Project
      run: |
        echo "[SEARCH] Validating Firebase project..."
        
        # List projects to verify access
        firebase projects:list
        
        # Check if our project exists
        if firebase projects:list | grep -q "${{ secrets.FIREBASE_PROJECT_ID }}"; then
          echo "[OK] Firebase project ${{ secrets.FIREBASE_PROJECT_ID }} is accessible"
        else
          echo "[ERROR] Firebase project ${{ secrets.FIREBASE_PROJECT_ID }} not found or not accessible"
          exit 1
        fi
        
    - name: Validate Firebase Configuration Files
      run: |
        echo "[SEARCH] Checking Firebase configuration files..."
        
        # Check if firebase.json exists
        if [ -f "firebase.json" ]; then
          echo "[OK] firebase.json exists"
          echo "üìÑ Configuration:"
          cat firebase.json | jq '.' || echo "[ERROR] firebase.json is not valid JSON"
        else
          echo "[ERROR] firebase.json not found"
          echo "[FIX] Create firebase.json with: firebase init hosting"
        fi
        
        # Check if .firebaserc exists
        if [ -f ".firebaserc" ]; then
          echo "[OK] .firebaserc exists"
          echo "üìÑ Project configuration:"
          cat .firebaserc | jq '.' || echo "[ERROR] .firebaserc is not valid JSON"
        else
          echo "[ERROR] .firebaserc not found"
          echo "[FIX] This will be created automatically during firebase init"
        fi

  setup-fresh-environment:
    name: [START] Setup Fresh Environment
    runs-on: ubuntu-latest
    needs: [validate-secrets, validate-gcp-connection, validate-firebase-connection]
    if: ${{ github.event.inputs.setup_fresh == 'true' && !failure() }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Enable Required APIs
      run: |
        echo "[FIX] Enabling required APIs for medical platform..."
        
        apis=(
          "cloudbuild.googleapis.com"
          "run.googleapis.com"
          "containerregistry.googleapis.com" 
          "artifactregistry.googleapis.com"
          "firebase.googleapis.com"
          "firebasehosting.googleapis.com"
          "logging.googleapis.com"
          "monitoring.googleapis.com"
        )
        
        for api in "${apis[@]}"; do
          echo "Enabling $api..."
          gcloud services enable "$api" --project="${{ secrets.GCP_PROJECT_ID }}"
        done
        
        echo "[OK] All APIs enabled successfully"
        
    - name: Setup Firebase Hosting
      run: |
        echo "[FIX] Setting up Firebase Hosting..."
        
        # Authenticate Firebase
        echo "${{ secrets.FIREBASE_TOKEN }}" | firebase login:ci
        
        # Initialize Firebase (non-interactive)
        firebase use ${{ secrets.FIREBASE_PROJECT_ID }}
        
        echo "[OK] Firebase setup completed"

  environment-summary:
    name: [LIST] Environment Summary
    runs-on: ubuntu-latest
    needs: [validate-secrets, validate-gcp-connection, validate-firebase-connection]
    if: always()
    
    steps:
    - name: Generate Environment Summary
      run: |
        echo "# üè• Medical Platform Environment Status" > environment-summary.md
        echo "" >> environment-summary.md
        echo "**Generated:** $(date)" >> environment-summary.md
        echo "**Repository:** ${{ github.repository }}" >> environment-summary.md
        echo "**Commit:** ${{ github.sha }}" >> environment-summary.md
        echo "" >> environment-summary.md
        
        echo "## [SEARCH] Validation Results" >> environment-summary.md
        echo "" >> environment-summary.md
        echo "| Component | Status |" >> environment-summary.md
        echo "|-----------|--------|" >> environment-summary.md
        echo "| GitHub Secrets | ${{ needs.validate-secrets.result }} |" >> environment-summary.md
        echo "| Google Cloud Connection | ${{ needs.validate-gcp-connection.result }} |" >> environment-summary.md  
        echo "| Firebase Connection | ${{ needs.validate-firebase-connection.result }} |" >> environment-summary.md
        
        echo "" >> environment-summary.md
        echo "## [REPORT] Configuration Details" >> environment-summary.md
        echo "" >> environment-summary.md
        echo "- **GCP Project:** ${{ secrets.GCP_PROJECT_ID }}" >> environment-summary.md
        echo "- **GCP Region:** ${{ secrets.GCP_REGION }}" >> environment-summary.md
        echo "- **Firebase Project:** ${{ secrets.FIREBASE_PROJECT_ID }}" >> environment-summary.md
        echo "- **Frontend URL:** https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app" >> environment-summary.md
        
        echo "" >> environment-summary.md
        echo "## üè• Medical Platform Compliance" >> environment-summary.md
        echo "" >> environment-summary.md
        echo "[OK] **LGPD**: Lei Geral de Prote√ß√£o de Dados" >> environment-summary.md
        echo "[OK] **CFM 2.314/2022**: Resolu√ß√£o sobre Telemedicina" >> environment-summary.md
        echo "[OK] **ANVISA RDC 4/2009**: Farmacovigil√¢ncia" >> environment-summary.md
        echo "" >> environment-summary.md
        echo "## üîó Next Steps" >> environment-summary.md
        echo "" >> environment-summary.md
        
        if [ "${{ needs.validate-secrets.result }}" = "success" ] && 
           [ "${{ needs.validate-gcp-connection.result }}" = "success" ] && 
           [ "${{ needs.validate-firebase-connection.result }}" = "success" ]; then
          echo "üéâ **Environment is ready!** You can now:" >> environment-summary.md
          echo "- Run the deploy workflow to deploy the application" >> environment-summary.md
          echo "- Push code to main branch for automatic deployment" >> environment-summary.md
          echo "- Access the application at https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app" >> environment-summary.md
        else
          echo "[WARNING] **Setup incomplete.** Please:" >> environment-summary.md
          echo "- Check failed validation steps above" >> environment-summary.md
          echo "- Configure missing secrets in repository settings" >> environment-summary.md
          echo "- Re-run this workflow after fixing issues" >> environment-summary.md
        fi
        
        echo "" >> environment-summary.md
        echo "---" >> environment-summary.md
        echo "*Generated by Medical Platform Environment Setup*" >> environment-summary.md
        
        # Display summary
        cat environment-summary.md
        
    - name: Upload Environment Summary
      uses: actions/upload-artifact@v4
      with:
        name: environment-summary
        path: environment-summary.md
        retention-days: 30