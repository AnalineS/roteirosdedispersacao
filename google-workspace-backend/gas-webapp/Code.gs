/**
 * ROTEIRO DE DISPENSA√á√ÉO - HANSEN√çASE
 * Google Apps Script Web App Backend
 * 
 * Sistema de chatbot para dispensa√ß√£o farmac√™utica de hansen√≠ase PQT-U
 * Migrado de Flask/Python para Google Apps Script/JavaScript
 * 
 * Vers√£o: 1.0
 * Data: 2025-01-31
 */

// ====== CONFIGURA√á√ïES GLOBAIS ======
const CONFIG = {
  // APIs
  OPENROUTER_API_KEY: PropertiesService.getScriptProperties().getProperty('OPENROUTER_API_KEY'),
  OPENROUTER_URL: 'https://openrouter.ai/api/v1/chat/completions',
  
  // Modelos dispon√≠veis (APENAS FREE)
  MODELS: {
    FREE: 'moonshotai/kimi-k2:free'
  },
  
  // Rate limiting
  MAX_REQUESTS_PER_HOUR: 100,
  MAX_REQUESTS_PER_DAY: 500,
  
  // Cache
  CACHE_DURATION: 300, // 5 minutos em segundos
  
  // Valida√ß√£o
  MAX_QUESTION_LENGTH: 1000,
  MIN_QUESTION_LENGTH: 5
};

// ====== SISTEMA DE PERSONAS ======
class PersonaSystem {
  constructor() {
    this.personas = {
      dr_gasnelio: new DrGasnelioPersona(),
      ga: new GaPersona()
    };
  }
  
  getPersona(personaId) {
    return this.personas[personaId] || this.personas.dr_gasnelio;
  }
  
  getAvailablePersonas() {
    return Object.keys(this.personas);
  }
}

// ====== PERSONA DR. GASNELIO (T√âCNICA) ======
class DrGasnelioPersona {
  constructor() {
    this.id = 'dr_gasnelio';
    this.name = 'Dr. Gasnelio';
    this.description = 'Farmac√™utico cl√≠nico especialista em hansen√≠ase PQT-U';
    
    // Medicamentos PQT-U
    this.pqtMedications = ['rifampicina', 'clofazimina', 'dapsona'];
    
    // Categorias de consultas
    this.queryCategories = {
      dosing: ['dose', 'dosagem', 'mg', 'administra', 'quanto', 'frequ√™ncia'],
      safety: ['efeito', 'adverso', 'rea√ß√£o', 'seguran√ßa', 'risco', 'perigo'],
      interaction: ['intera√ß√£o', 'combina', 'junto', 'mistura', 'outro medicamento'],
      procedure: ['como', 'procedimento', 'etapa', 'roteiro', 'dispensa√ß√£o']
    };
    
    // Palavras-chave de escopo v√°lido
    this.validKeywords = [
      'hansen', 'pqt', 'rifampicina', 'clofazimina', 'dapsona',
      'dispensa√ß√£o', 'farm√°cia', 'roteiro', 'poliquimioterapia'
    ];
    
    // Palavras-chave de escopo inv√°lido
    this.invalidKeywords = [
      'covid', 'diabetes', 'hipertens√£o', 'cancer', 'aids', 'tuberculose',
      'dengue', 'malaria', 'zika', 'gripe', 'pneumonia'
    ];
  }
  
  isWithinScope(question) {
    const questionLower = question.toLowerCase();
    
    // Verificar palavras inv√°lidas
    if (this.invalidKeywords.some(keyword => questionLower.includes(keyword))) {
      return false;
    }
    
    // Verificar palavras v√°lidas ou medicamentos PQT-U
    const hasValidKeywords = this.validKeywords.some(keyword => questionLower.includes(keyword));
    const hasPqtMedications = this.pqtMedications.some(med => questionLower.includes(med));
    
    return hasValidKeywords || hasPqtMedications;
  }
  
  categorizeQuery(question) {
    const questionLower = question.toLowerCase();
    
    for (const [category, keywords] of Object.entries(this.queryCategories)) {
      if (keywords.some(keyword => questionLower.includes(keyword))) {
        return category;
      }
    }
    
    return 'general';
  }
  
  createPrompt(question) {
    // Verificar escopo
    if (!this.isWithinScope(question)) {
      return this.createLimitationPrompt(question);
    }
    
    // Categorizar consulta
    const category = this.categorizeQuery(question);
    
    return `
Voc√™ √© o Dr. Gasnelio, farmac√™utico cl√≠nico especializado em hansen√≠ase PQT-U.

IDENTIDADE PROFISSIONAL:
- Farmac√™utico cl√≠nico com doutorado em dispensa√ß√£o de hansen√≠ase
- Especialista em Poliquimioterapia √önica (PQT-U)
- Baseado na tese "Roteiro de Dispensa√ß√£o para Hansen√≠ase PQT-U"
- Linguagem t√©cnica e precisa
- Sempre cita se√ß√µes espec√≠ficas da tese

MEDICAMENTOS DE ESPECIALIZA√á√ÉO:
- Rifampicina (600mg)
- Clofazimina (300mg inicial + 50mg di√°ria)
- Dapsona (100mg)

CATEGORIA DA CONSULTA: ${category}

FORMATO DE RESPOSTA OBRIGAT√ìRIO:

[RESPOSTA T√âCNICA]
Resposta farmacol√≥gica precisa e detalhada

[PROTOCOLO/REFER√äNCIA]
Cita√ß√£o espec√≠fica: "Conforme tese, Se√ß√£o X.X"
Protocolo aplic√°vel do Minist√©rio da Sa√∫de

[VALIDA√á√ÉO FARMACOL√ìGICA]
- Dose: [especificar]
- Via: [especificar]
- Frequ√™ncia: [especificar]
- Monitoriza√ß√£o: [especificar]

[CONSIDERA√á√ïES CL√çNICAS]
Intera√ß√µes, contraindica√ß√µes e cuidados especiais

PERGUNTA: ${question}

Responda seguindo rigorosamente o formato t√©cnico estruturado, mantendo precis√£o cient√≠fica e citando a tese como refer√™ncia principal.
`;
  }
  
  createLimitationPrompt(question) {
    return `
Voc√™ √© o Dr. Gasnelio, farmac√™utico cl√≠nico especialista em hansen√≠ase PQT-U.

A pergunta recebida: "${question}"

Esta quest√£o est√° FORA DO ESCOPO da sua base de conhecimento espec√≠fica sobre dispensa√ß√£o de PQT-U para hansen√≠ase.

RESPONDA EXATAMENTE ASSIM:

[LIMITA√á√ÉO DE ESCOPO]
Esta quest√£o est√° fora do escopo da minha base de conhecimento espec√≠fica sobre dispensa√ß√£o de PQT-U para hansen√≠ase.

[ORIENTA√á√ÉO PROFISSIONAL]
Minha expertise se concentra exclusivamente em:
- Poliquimioterapia √∫nica (PQT-U) para hansen√≠ase
- Roteiro de dispensa√ß√£o farmac√™utica para hansen√≠ase
- Farm√°covigil√¢ncia espec√≠fica dos medicamentos rifampicina, clofazimina e dapsona no contexto da hansen√≠ase

[RECOMENDA√á√ÉO]
Para essa quest√£o, recomendo consultar:
- Literatura m√©dica especializada na √°rea espec√≠fica
- Profissional especialista na condi√ß√£o mencionada
- Protocolos cl√≠nicos oficiais do Minist√©rio da Sa√∫de para a condi√ß√£o em quest√£o

Mantenho-me √† disposi√ß√£o para quest√µes relacionadas ao meu campo de especializa√ß√£o em hansen√≠ase PQT-U.
`;
  }
}

// ====== PERSONA G√Å (EMP√ÅTICA) ======
class GaPersona {
  constructor() {
    this.id = 'ga';
    this.name = 'G√°';
    this.description = 'Farmac√™utico emp√°tico e acess√≠vel';
    
    // Tradu√ß√µes t√©cnico ‚Üí cotidiano
    this.technicalTranslations = {
      'poliquimioterapia': 'combina√ß√£o de rem√©dios',
      'PQT-U': 'kit de rem√©dios especial para hansen√≠ase',
      'rifampicina': 'rem√©dio vermelho (rifampicina)',
      'clofazimina': 'rem√©dio que pode escurecer a pele (clofazimina)',
      'dapsona': 'rem√©dio branco (dapsona)',
      'dose supervisionada': 'dose que voc√™ toma na farm√°cia com algu√©m te acompanhando',
      'dose autoadministrada': 'dose que voc√™ toma em casa sozinho',
      'efeitos adversos': 'efeitos colaterais',
      'hansen√≠ase': 'hansen√≠ase (doen√ßa que afeta pele e nervos)',
      'dispensa√ß√£o': 'entrega dos rem√©dios na farm√°cia',
      'ades√£o terap√™utica': 'seguir o tratamento direitinho'
    };
    
    // Frases de apoio emocional
    this.emotionalSupport = [
      'Voc√™ est√° no caminho certo! üí™',
      'Cada dia de tratamento √© um passo para a cura! üåü',
      'Sei que √†s vezes √© dif√≠cil, mas voc√™ consegue! ü§ó',
      'Estou aqui para te ajudar sempre que precisar! üòä',
      '√â completamente normal ter essas d√∫vidas üíö'
    ];
  }
  
  createPrompt(question) {
    return `
Voc√™ √© o G√°, um farmac√™utico carinhoso e acess√≠vel que √© especialista em explicar coisas complicadas de um jeito simples e acolhedor.

IDENTIDADE PESSOAL:
- Farmac√™utico com cora√ß√£o de educador üíô
- Especialista em tornar o complexo simples
- Sempre emp√°tico, paciente e acolhedor
- Usa linguagem do dia a dia, sem jarg√µes
- Adora usar analogias e exemplos do cotidiano
- Se preocupa genuinamente com o bem-estar das pessoas

MISS√ÉO ESPECIAL:
Ajudar pessoas a entenderem tudo sobre hansen√≠ase e seu tratamento de forma simples, sem medo e com confian√ßa.

REGRAS DE OURO:
1. SEMPRE traduzir termos t√©cnicos para linguagem cotidiana
2. SEMPRE usar analogias e exemplos familiares
3. SEMPRE demonstrar empatia e acolhimento
4. NUNCA usar palavras muito t√©cnicas sem explicar
5. SEMPRE manter a informa√ß√£o cientificamente correta
6. SEMPRE oferecer apoio emocional quando apropriado

FORMATO DE RESPOSTA CALOROSA:

[ACOLHIMENTO]
Cumprimento caloroso + reconhecimento da preocupa√ß√£o/d√∫vida

[EXPLICA√á√ÉO SIMPLES]
Informa√ß√£o traduzida para linguagem cotidiana com analogias

[APOIO PR√ÅTICO]
Dicas pr√°ticas e orienta√ß√µes claras para o dia a dia

[ENCORAJAMENTO]
Palavras de apoio e disponibilidade para mais d√∫vidas

TRADU√á√ïES OBRIGAT√ìRIAS:
- poliquimioterapia ‚Üí "combina√ß√£o de rem√©dios"
- PQT-U ‚Üí "kit de rem√©dios especial para hansen√≠ase"
- rifampicina ‚Üí "rem√©dio vermelho"
- clofazimina ‚Üí "rem√©dio que pode escurecer a pele"
- dapsona ‚Üí "rem√©dio branco"
- efeitos adversos ‚Üí "efeitos colaterais"

PERGUNTA RECEBIDA: ${question}

Responda seguindo seu jeito carinhoso e acess√≠vel, sempre lembrando que voc√™ est√° falando com uma pessoa que pode estar preocupada ou confusa sobre o tratamento.
`;
  }
}

// ====== SISTEMA DE RATE LIMITING ======
class RateLimiter {
  constructor() {
    this.cache = CacheService.getScriptCache();
  }
  
  checkRateLimit(userIp) {
    const hourKey = `rate_hour_${userIp}`;
    const dayKey = `rate_day_${userIp}`;
    
    const hourCount = parseInt(this.cache.get(hourKey) || '0');
    const dayCount = parseInt(this.cache.get(dayKey) || '0');
    
    // Verificar limites
    if (hourCount >= CONFIG.MAX_REQUESTS_PER_HOUR) {
      return { allowed: false, reason: 'Limite de requisi√ß√µes por hora excedido' };
    }
    
    if (dayCount >= CONFIG.MAX_REQUESTS_PER_DAY) {
      return { allowed: false, reason: 'Limite de requisi√ß√µes por dia excedido' };
    }
    
    // Incrementar contadores
    this.cache.put(hourKey, (hourCount + 1).toString(), 3600); // 1 hora
    this.cache.put(dayKey, (dayCount + 1).toString(), 86400); // 24 horas
    
    return { allowed: true };
  }
}

// ====== SISTEMA DE CACHE ======
class ResponseCache {
  constructor() {
    this.cache = CacheService.getScriptCache();
  }
  
  generateKey(persona, question) {
    // Gerar hash simples da pergunta para usar como chave
    const normalizedQuestion = question.toLowerCase().trim();
    return `response_${persona}_${Utilities.computeDigest(Utilities.DigestAlgorithm.MD5, normalizedQuestion)}`;
  }
  
  get(persona, question) {
    const key = this.generateKey(persona, question);
    const cached = this.cache.get(key);
    return cached ? JSON.parse(cached) : null;
  }
  
  set(persona, question, response) {
    const key = this.generateKey(persona, question);
    const data = {
      response: response,
      timestamp: new Date().getTime(),
      persona: persona,
      question: question
    };
    
    this.cache.put(key, JSON.stringify(data), CONFIG.CACHE_DURATION);
  }
}

// ====== FUN√á√ÉO PRINCIPAL - ENDPOINT HTTP ======
// Fun√ß√£o para requisi√ß√µes GET (quando acessa a URL diretamente)
function doGet(e) {
  // P√°gina de teste/informa√ß√µes
  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <title>Roteiro de Dispensa√ß√£o - Hansen√≠ase API</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 50px auto;
          padding: 20px;
          background-color: #f5f5f5;
        }
        .container {
          background-color: white;
          padding: 30px;
          border-radius: 10px;
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
          color: #2c3e50;
          border-bottom: 2px solid #3498db;
          padding-bottom: 10px;
        }
        .status {
          background-color: #2ecc71;
          color: white;
          padding: 10px 20px;
          border-radius: 5px;
          display: inline-block;
          margin: 20px 0;
        }
        .info {
          background-color: #ecf0f1;
          padding: 20px;
          border-radius: 5px;
          margin: 20px 0;
        }
        code {
          background-color: #f4f4f4;
          padding: 2px 5px;
          border-radius: 3px;
          font-family: 'Courier New', monospace;
        }
        pre {
          background-color: #2c3e50;
          color: #ecf0f1;
          padding: 20px;
          border-radius: 5px;
          overflow-x: auto;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>üè• Roteiro de Dispensa√ß√£o - Hansen√≠ase PQT-U</h1>
        
        <div class="status">‚úÖ API Ativa e Funcionando</div>
        
        <div class="info">
          <h2>Informa√ß√µes da API</h2>
          <p><strong>Vers√£o:</strong> 1.0</p>
          <p><strong>M√©todo:</strong> POST</p>
          <p><strong>Content-Type:</strong> application/json</p>
          <p><strong>Endpoint:</strong> ${e ? e.url : 'Esta mesma URL'}</p>
        </div>
        
        <h2>Como usar:</h2>
        <p>Envie uma requisi√ß√£o POST com o seguinte formato:</p>
        
        <pre>{
  "question": "Sua pergunta sobre hansen√≠ase PQT-U aqui",
  "persona": "dr_gasnelio" // ou "ga"
}</pre>
        
        <h2>Personas dispon√≠veis:</h2>
        <ul>
          <li><code>dr_gasnelio</code> - Farmac√™utico t√©cnico especialista</li>
          <li><code>ga</code> - Farmac√™utico emp√°tico e acess√≠vel</li>
        </ul>
        
        <h2>Exemplo de resposta:</h2>
        <pre>{
  "response": "Resposta do assistente...",
  "persona": "dr_gasnelio",
  "cached": false,
  "timestamp": "2025-01-31T12:00:00.000Z"
}</pre>
        
        <div class="info">
          <p>‚ö†Ô∏è <strong>Nota:</strong> Esta √© apenas uma p√°gina informativa. Para usar o chatbot, fa√ßa requisi√ß√µes POST para esta URL.</p>
        </div>
      </div>
    </body>
    </html>
  `;
  
  return HtmlService.createHtmlOutput(htmlContent);
}

function doPost(e) {
  try {
    // Parse do body da requisi√ß√£o
    const requestBody = JSON.parse(e.postData.contents);
    const { question, persona = 'dr_gasnelio' } = requestBody;
    
    // Valida√ß√µes b√°sicas
    if (!question) {
      return createErrorResponse('Pergunta √© obrigat√≥ria', 400);
    }
    
    if (question.length < CONFIG.MIN_QUESTION_LENGTH || question.length > CONFIG.MAX_QUESTION_LENGTH) {
      return createErrorResponse(`Pergunta deve ter entre ${CONFIG.MIN_QUESTION_LENGTH} e ${CONFIG.MAX_QUESTION_LENGTH} caracteres`, 400);
    }
    
    // Rate limiting
    const userIp = getUserIP(e);
    const rateLimiter = new RateLimiter();
    const rateCheck = rateLimiter.checkRateLimit(userIp);
    
    if (!rateCheck.allowed) {
      return createErrorResponse(rateCheck.reason, 429);
    }
    
    // Verificar cache
    const responseCache = new ResponseCache();
    const cachedResponse = responseCache.get(persona, question);
    
    if (cachedResponse) {
      return createSuccessResponse({
        response: cachedResponse.response,
        persona: persona,
        cached: true,
        timestamp: new Date().toISOString()
      });
    }
    
    // Processar com persona apropriada
    const personaSystem = new PersonaSystem();
    const personaInstance = personaSystem.getPersona(persona);
    
    // Gerar prompt
    const prompt = personaInstance.createPrompt(question);
    
    // Chamar OpenRouter API
    const aiResponse = callOpenRouterAPI(prompt);
    
    // Salvar no cache
    responseCache.set(persona, question, aiResponse);
    
    // Log da intera√ß√£o
    logInteraction(userIp, persona, question, aiResponse);
    
    return createSuccessResponse({
      response: aiResponse,
      persona: persona,
      cached: false,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('Erro no doPost:', error);
    return createErrorResponse('Erro interno do servidor: ' + error.toString(), 500);
  }
}

// ====== FUN√á√ÉO OPTIONS PARA CORS ======
function doOptions(e) {
  return ContentService
    .createTextOutput('')
    .setMimeType(ContentService.MimeType.TEXT);
}

// ====== CHAMADA PARA OPENROUTER API ======
function callOpenRouterAPI(prompt) {
  const apiKey = CONFIG.OPENROUTER_API_KEY;
  
  if (!apiKey) {
    throw new Error('API key n√£o configurada');
  }
  
  const payload = {
    model: CONFIG.MODELS.FREE,
    messages: [
      {
        role: 'system',
        content: 'Voc√™ √© um assistente especializado em dispensa√ß√£o farmac√™utica para hansen√≠ase.'
      },
      {
        role: 'user',
        content: prompt
      }
    ],
    temperature: 0.1,
    max_tokens: 1500
  };
  
  const options = {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json'
    },
    payload: JSON.stringify(payload)
  };
  
  const response = UrlFetchApp.fetch(CONFIG.OPENROUTER_URL, options);
  const responseData = JSON.parse(response.getContentText());
  
  if (response.getResponseCode() !== 200) {
    throw new Error(responseData.error?.message || 'Erro na API');
  }
  
  return responseData.choices[0].message.content;
}

// ====== FUN√á√ïES UTILIT√ÅRIAS ======
function getUserIP(e) {
  return e.parameter['X-Forwarded-For'] || e.parameter['Remote-Addr'] || 'unknown';
}

function createSuccessResponse(data) {
  return ContentService
    .createTextOutput(JSON.stringify(data))
    .setMimeType(ContentService.MimeType.JSON);
}

function createErrorResponse(message, statusCode = 500) {
  const errorData = {
    error: message,
    status: statusCode,
    timestamp: new Date().toISOString()
  };
  
  return ContentService
    .createTextOutput(JSON.stringify(errorData))
    .setMimeType(ContentService.MimeType.JSON);
}

function logInteraction(userIp, persona, question, response) {
  // Log b√°sico - pode ser expandido para usar Google Sheets ou Cloud Logging
  console.log({
    timestamp: new Date().toISOString(),
    userIp: userIp,
    persona: persona,
    questionLength: question.length,
    responseLength: response.length
  });
}

// ====== FUN√á√ÉO DE TESTE ======
function testWebApp() {
  // Simular requisi√ß√£o POST
  const testRequest = {
    postData: {
      contents: JSON.stringify({
        question: 'Qual a dose de rifampicina para adultos?',
        persona: 'dr_gasnelio'
      })
    },
    parameter: {}
  };
  
  const result = doPost(testRequest);
  console.log('Resultado do teste:', result.getContent());
}

// ====== FUN√á√ÉO DE SETUP INICIAL ======
function setupApp() {
  console.log('Configurando aplica√ß√£o...');
  
  // Verificar se API key est√° configurada
  const apiKey = PropertiesService.getScriptProperties().getProperty('OPENROUTER_API_KEY');
  if (!apiKey) {
    console.log('ATEN√á√ÉO: Configure a OPENROUTER_API_KEY nas propriedades do script');
  }
  
  console.log('Setup conclu√≠do!');
}