#!/usr/bin/env node

/**
 * Medical Validation Hook
 * Hook especializado para valida√ß√£o de c√≥digo m√©dico-farmacol√≥gico
 *
 * Este hook verifica:
 * - Nomenclatura m√©dica (CID, medicamentos)
 * - Unidades farmacol√≥gicas corretas
 * - Disclaimers m√©dicos obrigat√≥rios
 * - Padr√µes de seguran√ßa m√©dica
 */

const fs = require('fs');
const path = require('path');

class MedicalValidationHook {
    constructor() {
        this.workspaceRoot = process.cwd();
        this.errors = [];
        this.warnings = [];
        this.violations = [];
    }

    /**
     * Executa valida√ß√µes m√©dicas espec√≠ficas
     */
    async runMedicalValidations(filePath = null) {
        try {
            console.log('üè• Medical Validation Hook...');

            if (filePath && fs.existsSync(filePath)) {
                await this.validateFile(filePath);
            } else {
                await this.validateProject();
            }

            // Executar valida√ß√µes espec√≠ficas
            await this.validateMedicalTerminology();
            await this.validatePharmacologicalUnits();
            await this.validateMedicalDisclaimers();
            await this.validateClinicalData();

            this.reportResults();
            return this.errors.length === 0 && this.violations.length === 0;

        } catch (error) {
            console.error('‚ùå Erro na valida√ß√£o m√©dica:', error.message);
            return false;
        }
    }

    /**
     * Valida arquivo espec√≠fico
     */
    async validateFile(filePath) {
        const ext = path.extname(filePath);
        const relativePath = path.relative(this.workspaceRoot, filePath);

        console.log(`üîç Validando: ${relativePath}`);

        try {
            const content = fs.readFileSync(filePath, 'utf8');

            // Valida√ß√µes por tipo de arquivo
            switch (ext) {
                case '.ts':
                case '.tsx':
                case '.js':
                case '.jsx':
                    await this.validateJavaScriptMedical(filePath, content);
                    break;
                case '.py':
                    await this.validatePythonMedical(filePath, content);
                    break;
                case '.md':
                    await this.validateMarkdownMedical(filePath, content);
                    break;
                default:
                    console.log(`‚ÑπÔ∏è Tipo de arquivo n√£o m√©dico: ${ext}`);
            }

        } catch (error) {
            this.errors.push({
                file: relativePath,
                message: `Erro ao ler arquivo: ${error.message}`
            });
        }
    }

    /**
     * Valida c√≥digo JavaScript/TypeScript m√©dico
     */
    async validateJavaScriptMedical(filePath, content) {
        const relativePath = path.relative(this.workspaceRoot, filePath);

        // 1. Verificar nomenclatura m√©dica
        await this.checkMedicalNomenclature(relativePath, content);

        // 2. Verificar c√°lculos farmacol√≥gicos
        await this.checkPharmacologicalCalculations(relativePath, content);

        // 3. Verificar disclaimers obrigat√≥rios
        await this.checkMandatoryDisclaimers(relativePath, content);

        // 4. Verificar padr√µes de seguran√ßa
        await this.checkMedicalSecurityPatterns(relativePath, content);

        // 5. Verificar integra√ß√£o com personas
        await this.checkPersonaIntegration(relativePath, content);
    }

    /**
     * Valida c√≥digo Python m√©dico
     */
    async validatePythonMedical(filePath, content) {
        const relativePath = path.relative(this.workspaceRoot, filePath);

        // Verifica√ß√µes espec√≠ficas para Python m√©dico
        await this.checkMedicalNomenclature(relativePath, content);
        await this.checkPythonMedicalSecurity(relativePath, content);
        await this.checkMandatoryDisclaimers(relativePath, content);
    }

    /**
     * Valida documenta√ß√£o m√©dica
     */
    async validateMarkdownMedical(filePath, content) {
        const relativePath = path.relative(this.workspaceRoot, filePath);

        // Verificar se cont√©m informa√ß√µes m√©dicas
        if (this.containsMedicalContent(content)) {
            await this.checkMedicalDocumentation(relativePath, content);
            await this.checkMandatoryDisclaimers(relativePath, content);
        }
    }

    /**
     * Verifica nomenclatura m√©dica
     */
    async checkMedicalNomenclature(filePath, content) {
        // Dicion√°rio de termos m√©dicos corretos
        const medicalTerms = {
            // Hansen√≠ase
            'hanseniase': ['hansen√≠ase', 'lepra', 'mal de hansen'],
            'paucibacilar': ['paucibacilar', 'PB'],
            'multibacilar': ['multibacilar', 'MB'],
            'pqt': ['PQT', 'poliquimioterapia'],

            // Medicamentos
            'rifampicina': ['rifampicina', 'RMP'],
            'dapsona': ['dapsona', 'DDS'],
            'clofazimina': ['clofazimina', 'CFZ'],

            // Unidades
            'mg': ['mg', 'miligramas'],
            'ml': ['ml', 'mililitros'],
            'comprimido': ['comprimido', 'comp', 'cp']
        };

        // Verificar termos incorretos comuns
        const incorrectTerms = {
            'lepra': 'Prefira "hansen√≠ase" ao inv√©s de "lepra"',
            'leproso': 'Use "pessoa com hansen√≠ase" ao inv√©s de termos estigmatizantes',
            'hanseniase': 'Grafia correta: "hansen√≠ase" (com acento)',
            'mg/kg/dia': 'Especifique melhor: "mg/kg/dia" pode ser amb√≠guo'
        };

        Object.entries(incorrectTerms).forEach(([term, suggestion]) => {
            const regex = new RegExp(`\\b${term}\\b`, 'gi');
            if (regex.test(content)) {
                this.warnings.push({
                    file: filePath,
                    message: `Nomenclatura m√©dica: ${suggestion}`,
                    term: term
                });
            }
        });

        // Verificar CID codes (formato A00-Z99)
        const cidPattern = /[A-Z]\d{2}(\.\d)?/g;
        const cidMatches = content.match(cidPattern);
        if (cidMatches) {
            cidMatches.forEach(cid => {
                if (!this.isValidCID(cid)) {
                    this.warnings.push({
                        file: filePath,
                        message: `CID possivelmente inv√°lido: ${cid}`,
                        term: cid
                    });
                }
            });
        }
    }

    /**
     * Verifica c√°lculos farmacol√≥gicos
     */
    async checkPharmacologicalCalculations(filePath, content) {
        // Verificar fun√ß√µes que fazem c√°lculos de dose
        const calculationPatterns = [
            /calculate.*dose/i,
            /dose.*calculation/i,
            /mg.*kg/i,
            /\bmg\/kg\b/i,
            /dosage.*function/i
        ];

        const hasCalculations = calculationPatterns.some(pattern => pattern.test(content));

        if (hasCalculations) {
            // Verificar se tem valida√ß√£o de entrada
            if (!content.match(/validate|sanitize|check.*input|isNaN|typeof.*number/i)) {
                this.violations.push({
                    file: filePath,
                    message: 'CR√çTICO: C√°lculo farmacol√≥gico sem valida√ß√£o de entrada',
                    severity: 'critical'
                });
            }

            // Verificar se tem verifica√ß√£o de limites
            if (!content.match(/min.*dose|max.*dose|limit|range|between/i)) {
                this.warnings.push({
                    file: filePath,
                    message: 'C√°lculo farmacol√≥gico pode precisar de verifica√ß√£o de limites'
                });
            }

            // Verificar se tem disclaimer para c√°lculos
            if (!content.match(/disclaimer|consultation|professional.*health|m√©dico/i)) {
                this.violations.push({
                    file: filePath,
                    message: 'CR√çTICO: C√°lculo farmacol√≥gico sem disclaimer m√©dico',
                    severity: 'critical'
                });
            }
        }
    }

    /**
     * Verifica disclaimers obrigat√≥rios
     */
    async checkMandatoryDisclaimers(filePath, content) {
        const medicalContentIndicators = [
            /dose|dosage|medication|drug/i,
            /hanseniase|hansen√≠ase|lepra/i,
            /treatment|tratamento|medicamento/i,
            /clinical|cl√≠nico|diagn√≥stico/i
        ];

        const hasMedicalContent = medicalContentIndicators.some(pattern => pattern.test(content));

        if (hasMedicalContent) {
            const disclaimerPatterns = [
                /disclaimer/i,
                /consulte.*m√©dico/i,
                /profissional.*sa√∫de/i,
                /apenas.*educacional/i,
                /n√£o.*substitui.*consulta/i
            ];

            const hasDisclaimer = disclaimerPatterns.some(pattern => pattern.test(content));

            if (!hasDisclaimer) {
                this.violations.push({
                    file: filePath,
                    message: 'OBRIGAT√ìRIO: Conte√∫do m√©dico deve ter disclaimer',
                    severity: 'critical'
                });
            }
        }
    }

    /**
     * Verifica padr√µes de seguran√ßa m√©dica
     */
    async checkMedicalSecurityPatterns(filePath, content) {
        // Verificar logging de dados sens√≠veis
        const sensitivePatterns = [
            /console\.log.*patient/i,
            /console\.log.*dose/i,
            /console\.log.*medication/i,
            /log.*cpf|log.*rg|log.*patient_id/i
        ];

        sensitivePatterns.forEach(pattern => {
            if (pattern.test(content)) {
                this.violations.push({
                    file: filePath,
                    message: 'CR√çTICO: Poss√≠vel logging de dados m√©dicos sens√≠veis',
                    severity: 'critical'
                });
            }
        });

        // Verificar sanitiza√ß√£o de inputs m√©dicos
        if (content.match(/input.*medical|medical.*input|patient.*data/i)) {
            if (!content.match(/sanitize|clean|validate|escape/i)) {
                this.warnings.push({
                    file: filePath,
                    message: 'Input m√©dico pode precisar de sanitiza√ß√£o'
                });
            }
        }
    }

    /**
     * Verifica integra√ß√£o com personas
     */
    async checkPersonaIntegration(filePath, content) {
        const hasPersonas = content.match(/gasnelio|g√°|persona/i);

        if (hasPersonas) {
            // Verificar se implementa corretamente as personas
            const hasPersonaLogic = content.match(/persona.*selector|switch.*persona|if.*persona/i);

            if (!hasPersonaLogic) {
                this.warnings.push({
                    file: filePath,
                    message: 'Refer√™ncia a personas sem l√≥gica de altern√¢ncia'
                });
            }

            // Verificar consist√™ncia do tom
            if (content.includes('gasnelio') || content.includes('Gasnelio')) {
                if (!content.match(/t√©cnico|cient√≠fico|clinical|professional/i)) {
                    this.warnings.push({
                        file: filePath,
                        message: 'Persona Dr. Gasnelio deve usar tom t√©cnico/cient√≠fico'
                    });
                }
            }

            if (content.includes('g√°') || content.includes('G√°')) {
                if (!content.match(/simples|did√°tico|emp√°tico|friendly|caring/i)) {
                    this.warnings.push({
                        file: filePath,
                        message: 'Persona G√° deve usar tom emp√°tico/did√°tico'
                    });
                }
            }
        }
    }

    /**
     * Verifica seguran√ßa espec√≠fica do Python m√©dico
     */
    async checkPythonMedicalSecurity(filePath, content) {
        // Verificar imports perigosos
        const dangerousImports = ['eval', 'exec', 'subprocess', 'os.system'];
        dangerousImports.forEach(imp => {
            if (content.includes(imp)) {
                this.warnings.push({
                    file: filePath,
                    message: `Import potencialmente perigoso: ${imp}`
                });
            }
        });

        // Verificar SQL injection em queries m√©dicas
        if (content.match(/SELECT.*patient|INSERT.*medical|UPDATE.*dose/i)) {
            if (!content.match(/parameterized|prepared|placeholder|\?|\$\d/i)) {
                this.violations.push({
                    file: filePath,
                    message: 'CR√çTICO: Query m√©dica pode estar vulner√°vel a SQL injection',
                    severity: 'critical'
                });
            }
        }
    }

    /**
     * Verifica se cont√©m conte√∫do m√©dico
     */
    containsMedicalContent(content) {
        const medicalKeywords = [
            'hanseniase', 'hansen√≠ase', 'lepra',
            'medicamento', 'medication', 'drug',
            'dose', 'dosage', 'treatment',
            'clinical', 'medical', 'patient',
            'rifampicina', 'dapsona', 'clofazimina'
        ];

        return medicalKeywords.some(keyword =>
            content.toLowerCase().includes(keyword.toLowerCase())
        );
    }

    /**
     * Verifica documenta√ß√£o m√©dica
     */
    async checkMedicalDocumentation(filePath, content) {
        // Verificar estrutura de documenta√ß√£o m√©dica
        const requiredSections = [
            'objetivo', 'description', 'usage',
            'disclaimer', 'references'
        ];

        requiredSections.forEach(section => {
            const sectionRegex = new RegExp(`#{1,3}\\s*${section}`, 'i');
            if (!sectionRegex.test(content)) {
                this.warnings.push({
                    file: filePath,
                    message: `Documenta√ß√£o m√©dica pode precisar de se√ß√£o: ${section}`
                });
            }
        });

        // Verificar refer√™ncias m√©dicas
        if (!content.match(/fonte:|reference:|bibliografia:|cfm|anvisa|minist√©rio.*sa√∫de/i)) {
            this.warnings.push({
                file: filePath,
                message: 'Documenta√ß√£o m√©dica deve ter fontes/refer√™ncias'
            });
        }
    }

    /**
     * Valida CID (b√°sico)
     */
    isValidCID(cid) {
        // Valida√ß√£o b√°sica do formato CID-10
        const cidPattern = /^[A-Z]\d{2}(\.\d)?$/;
        return cidPattern.test(cid);
    }

    /**
     * Valida√ß√µes espec√≠ficas do projeto
     */
    async validateMedicalTerminology() {
        // Implementar valida√ß√£o de terminologia espec√≠fica do projeto
    }

    async validatePharmacologicalUnits() {
        // Implementar valida√ß√£o de unidades farmacol√≥gicas
    }

    async validateMedicalDisclaimers() {
        // Implementar valida√ß√£o de disclaimers
    }

    async validateClinicalData() {
        // Implementar valida√ß√£o de dados cl√≠nicos
    }

    async validateProject() {
        console.log('üìÇ Validando projeto m√©dico completo...');
        // Implementar valida√ß√£o do projeto completo
    }

    /**
     * Reporta resultados das valida√ß√µes
     */
    reportResults() {
        console.log('\nüè• Resultados da Valida√ß√£o M√©dica:');

        if (this.violations.length > 0) {
            console.log(`\nüö® VIOLA√á√ïES CR√çTICAS (${this.violations.length}):`);
            this.violations.forEach(violation => {
                console.log(`   ${violation.file}: ${violation.message}`);
            });
        }

        if (this.errors.length > 0) {
            console.log(`\n‚ùå Erros (${this.errors.length}):`);
            this.errors.forEach(error => {
                console.log(`   ${error.file}: ${error.message}`);
            });
        }

        if (this.warnings.length > 0) {
            console.log(`\n‚ö†Ô∏è Avisos M√©dicos (${this.warnings.length}):`);
            this.warnings.forEach(warning => {
                console.log(`   ${warning.file}: ${warning.message}`);
            });
        }

        if (this.violations.length === 0 && this.errors.length === 0) {
            console.log('‚úÖ Valida√ß√£o m√©dica aprovada');
        }

        const totalIssues = this.violations.length + this.errors.length + this.warnings.length;
        console.log(`\nüéØ Score M√©dico: ${Math.max(0, 100 - totalIssues * 5)}/100`);
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    const filePath = process.argv[2];
    const validator = new MedicalValidationHook();

    validator.runMedicalValidations(filePath)
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('‚ùå Falha na valida√ß√£o m√©dica:', error);
            process.exit(1);
        });
}

module.exports = MedicalValidationHook;