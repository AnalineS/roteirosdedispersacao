#!/bin/bash
# Script de Deploy para PythonAnywhere
# Usu√°rio: roteirodedispensacao

echo "=== INICIANDO DEPLOY NO PYTHONANYWHERE ==="
echo "Usu√°rio: roteirodedispensacao"
echo "=========================================="

# Configura√ß√µes
PYTHONANYWHERE_USER="roteirodedispensacao"
HOME_DIR="/home/${PYTHONANYWHERE_USER}"
PROJECT_DIR="${HOME_DIR}/siteroteirodedispersacao"
VENV_DIR="${HOME_DIR}/.virtualenvs/siteroteirodedispersacao"

echo ""
echo "üìÅ PASSO 1: Clonando/Atualizando Reposit√≥rio"
echo "============================================"
cd ${HOME_DIR}

if [ -d "${PROJECT_DIR}" ]; then
    echo "Reposit√≥rio j√° existe. Atualizando..."
    cd ${PROJECT_DIR}
    git pull origin main
else
    echo "Clonando reposit√≥rio..."
    git clone https://github.com/AnalineS/siteroteirodedispersacao.git
fi

echo ""
echo "üêç PASSO 2: Configurando Virtual Environment"
echo "==========================================="
if [ ! -d "${VENV_DIR}" ]; then
    echo "Criando virtual environment..."
    python3.10 -m venv ${VENV_DIR}
else
    echo "Virtual environment j√° existe."
fi

echo ""
echo "üì¶ PASSO 3: Instalando Depend√™ncias"
echo "==================================="
source ${VENV_DIR}/bin/activate
cd ${PROJECT_DIR}/backend

# Verificar se existe requirements.txt
if [ -f "requirements.txt" ]; then
    echo "Instalando depend√™ncias do requirements.txt..."
    pip install --upgrade pip
    pip install -r requirements.txt
else
    echo "requirements.txt n√£o encontrado. Instalando depend√™ncias b√°sicas..."
    pip install --upgrade pip
    pip install flask flask-cors gunicorn python-dotenv
fi

echo ""
echo "üîß PASSO 4: Configurando Arquivo WSGI"
echo "===================================="
WSGI_FILE="${HOME_DIR}/${PYTHONANYWHERE_USER}_pythonanywhere_com_wsgi.py"

cat > ${WSGI_FILE} << 'EOF'
# This file contains the WSGI configuration required to serve up your
# web application at https://roteirodedispensacao.pythonanywhere.com/

import sys
import os
from pathlib import Path

# Adicionar o diret√≥rio do projeto ao Python path
project_home = '/home/roteirodedispensacao/siteroteirodedispensacao'
if project_home not in sys.path:
    sys.path.insert(0, project_home)

# Adicionar o diret√≥rio backend ao Python path
backend_path = os.path.join(project_home, 'backend')
if backend_path not in sys.path:
    sys.path.insert(0, backend_path)

# Configurar vari√°veis de ambiente
os.environ['FLASK_ENV'] = 'production'

# Importar a aplica√ß√£o Flask
try:
    from app import app as application
    print("Flask app importado com sucesso!")
except Exception as e:
    print(f"Erro ao importar Flask app: {e}")
    import traceback
    traceback.print_exc()
    
    # Aplica√ß√£o de fallback para debug
    from flask import Flask
    application = Flask(__name__)
    
    @application.route('/')
    def error():
        return f"<h1>Erro ao carregar aplica√ß√£o</h1><pre>{str(e)}</pre>", 500

# Configurar o caminho para arquivos est√°ticos do React
if hasattr(application, 'static_folder'):
    frontend_build_path = os.path.join(project_home, 'frontend', 'build')
    if os.path.exists(frontend_build_path):
        application.static_folder = frontend_build_path
        application.static_url_path = ''
        print(f"Static folder configurado para: {frontend_build_path}")
EOF

echo "WSGI configurado em: ${WSGI_FILE}"

echo ""
echo "üåê PASSO 5: Configurando Static Files no PythonAnywhere"
echo "====================================================="
echo ""
echo "IMPORTANTE: Configure os static files no painel web do PythonAnywhere:"
echo ""
echo "1. Acesse: https://www.pythonanywhere.com/user/${PYTHONANYWHERE_USER}/webapps/"
echo "2. Na se√ß√£o 'Static files', adicione:"
echo "   URL: /"
echo "   Directory: /home/${PYTHONANYWHERE_USER}/siteroteirodedispersacao/frontend/build"
echo ""

echo ""
echo "üîê PASSO 6: Configurando Vari√°veis de Ambiente"
echo "=============================================="
ENV_FILE="${PROJECT_DIR}/backend/.env"

if [ ! -f "${ENV_FILE}" ]; then
    echo "Criando arquivo .env b√°sico..."
    cat > ${ENV_FILE} << 'EOF'
# Configura√ß√µes Flask
FLASK_ENV=production
SECRET_KEY=your-secret-key-here-change-in-production

# Configura√ß√µes de Database (se necess√°rio)
# DATABASE_URL=

# Outras configura√ß√µes
# API_KEY=
EOF
    echo "IMPORTANTE: Edite ${ENV_FILE} com suas configura√ß√µes reais!"
else
    echo "Arquivo .env j√° existe."
fi

echo ""
echo "üìã PASSO 7: Verificando Estrutura do Projeto"
echo "==========================================="
echo "Estrutura do backend:"
ls -la ${PROJECT_DIR}/backend/

echo ""
echo "Estrutura do frontend/build:"
ls -la ${PROJECT_DIR}/frontend/build/ 2>/dev/null || echo "Frontend build n√£o encontrado!"

echo ""
echo "‚úÖ PASSO 8: Pr√≥ximos Passos"
echo "============================"
echo ""
echo "1. Execute este script no console Bash do PythonAnywhere"
echo "2. Configure os static files no painel web (instru√ß√µes acima)"
echo "3. Recarregue sua aplica√ß√£o web no painel"
echo "4. Verifique os logs de erro se houver problemas"
echo ""
echo "Logs de erro dispon√≠veis em:"
echo "- Error log: /var/log/${PYTHONANYWHERE_USER}.pythonanywhere.com.error.log"
echo "- Server log: /var/log/${PYTHONANYWHERE_USER}.pythonanywhere.com.server.log"
echo ""
echo "=== SCRIPT DE DEPLOY FINALIZADO ==="