#!/usr/bin/env python3
"""
Backend Completo para Valida√ß√£o Cient√≠fica Rigorosa
Senior Clinical Pharmacist - Backend com funcionalidades completas baseadas na tese
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import re
import logging
from datetime import datetime
import json
from pathlib import Path

app = Flask(__name__)
CORS(app)

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Caminho para a base de conhecimento
MD_PATH = 'data/knowledge_base/Roteiro de Dsispensa√ß√£o - Hansen√≠ase.md'
md_text = ""

# Personas completas
PERSONAS = {
    "dr_gasnelio": {
        "name": "Dr. Gasnelio",
        "style": "technical",
        "description": "Farmac√™utico cl√≠nico especialista em hansen√≠ase PQT-U",
        "system_prompt": "Voc√™ √© Dr. Gasnelio, um farmac√™utico cl√≠nico especialista em hansen√≠ase com doutorado em dispensa√ß√£o farmac√™utica. Responda sempre de forma t√©cnica, precisa e cient√≠fica, citando especificamente a tese e protocolos. Use terminologia m√©dica apropriada e forne√ßa informa√ß√µes detalhadas sobre dosagens, mecanismos de a√ß√£o e protocolos."
    },
    "ga": {
        "name": "G√°",
        "style": "empathetic", 
        "description": "Farmac√™utico emp√°tico que explica de forma simples",
        "system_prompt": "Voc√™ √© G√°, um farmac√™utico carinhoso e emp√°tico que explica sobre hansen√≠ase de forma simples e acolhedora. Traduza termos t√©cnicos para linguagem cotidiana, use analogias quando apropriado, e demonstre empatia com os pacientes. Mantenha sempre um tom caloroso e encorajador."
    }
}

def extract_md_text(md_path):
    """Extrai texto do arquivo Markdown"""
    try:
        with open(md_path, 'r', encoding='utf-8') as file:
            text = file.read()
        logger.info(f"Base de conhecimento carregada: {len(text)} caracteres")
        return text
    except Exception as e:
        logger.error(f"Erro ao carregar base de conhecimento: {e}")
        return ""

def find_relevant_context(question, full_text, max_length=4000):
    """Encontra contexto relevante na tese para a pergunta"""
    # Divide o texto em se√ß√µes
    sections = full_text.split('\n## ')
    
    # Palavras-chave da pergunta
    question_words = set(re.findall(r'\w+', question.lower()))
    
    best_sections = []
    
    for section in sections:
        if len(section.strip()) < 100:
            continue
            
        section_words = set(re.findall(r'\w+', section.lower()))
        common_words = question_words.intersection(section_words)
        score = len(common_words) / len(question_words) if question_words else 0
        
        if score > 0.1:
            best_sections.append((section, score))
    
    # Ordena por relev√¢ncia
    best_sections.sort(key=lambda x: x[1], reverse=True)
    
    context = ""
    for section, score in best_sections[:2]:  # Pega as 2 se√ß√µes mais relevantes
        context += section + "\n\n"
        if len(context) > max_length:
            break
    
    return context[:max_length] if context else full_text[:max_length]

def detect_question_scope(question):
    """Detecta se a pergunta est√° no escopo da hansen√≠ase PQT-U"""
    question_lower = question.lower()
    
    # Palavras-chave que indicam escopo da hansen√≠ase
    hanseniase_keywords = [
        'hansen√≠ase', 'hanseniase', 'lepra', 'pqt-u', 'pqt', 'poliquimioterapia',
        'rifampicina', 'clofazimina', 'dapsona', 'mycobacterium leprae',
        'dispensa√ß√£o', 'roteiro', 'medicamento', 'dose', 'tratamento'
    ]
    
    # Palavras que indicam fora do escopo
    out_of_scope_keywords = [
        'diabetes', 'hipertens√£o', 'covid', 'gripe', 'cancer', 'tuberculose',
        'pneumonia', 'hepatite', 'malaria', 'dengue', 'receita', 'bolo',
        'culin√°ria', 'esporte', 'pol√≠tica', 'economia'
    ]
    
    # Verifica palavras de hansen√≠ase
    hanseniase_score = sum(1 for keyword in hanseniase_keywords if keyword in question_lower)
    
    # Verifica palavras fora do escopo
    out_scope_score = sum(1 for keyword in out_of_scope_keywords if keyword in question_lower)
    
    # Determina se est√° no escopo
    is_in_scope = hanseniase_score > 0 and out_scope_score == 0
    
    # Determina categoria
    if 'dose' in question_lower or 'dosagem' in question_lower:
        category = 'dosage_inquiry'
    elif any(med in question_lower for med in ['rifampicina', 'clofazimina', 'dapsona']):
        category = 'medication_inquiry'
    elif 'efeito' in question_lower or 'rea√ß√£o' in question_lower:
        category = 'safety_inquiry'
    elif 'dispensa√ß√£o' in question_lower or 'farm√°cia' in question_lower:
        category = 'dispensing_inquiry'
    else:
        category = 'general_inquiry'
    
    confidence_level = 'high' if hanseniase_score >= 2 else 'medium' if hanseniase_score >= 1 else 'low'
    
    return {
        'is_in_scope': is_in_scope,
        'category': category,
        'confidence_level': confidence_level,
        'scope_score': hanseniase_score,
        'reasoning': f"Encontradas {hanseniase_score} palavras-chave de hansen√≠ase, {out_scope_score} palavras fora do escopo"
    }

def get_limitation_response(persona, question):
    """Gera resposta de limita√ß√£o quando pergunta est√° fora do escopo"""
    if persona == "dr_gasnelio":
        return f"""Dr. Gasnelio responde:

Como especialista em hansen√≠ase PQT-U, devo informar que sua pergunta '{question}' est√° fora do meu escopo de conhecimento espec√≠fico.

Minha expertise concentra-se exclusivamente em:
- Protocolos de dispensa√ß√£o para hansen√≠ase PQT-U
- Dosagens de rifampicina, clofazimina e dapsona
- Farm√°covigil√¢ncia espec√≠fica para estes medicamentos
- Procedimentos de dispensa√ß√£o farmac√™utica para hansen√≠ase

RECOMENDA√á√ÉO PROFISSIONAL: Para esta quest√£o, consulte um profissional de sa√∫de especializado na √°rea espec√≠fica de sua pergunta.

*Baseado na tese sobre roteiro de dispensa√ß√£o para hansen√≠ase - Dr. Gasnelio*"""
    else:  # ga
        return f"""Oi! Aqui √© o G√°! üòä

Olha, sua pergunta sobre '{question}' √© muito interessante, mas eu sou especialista s√≥ em hansen√≠ase e nos rem√©dios PQT-U (rifampicina, clofazimina e dapsona)!

Eu sei tudinho sobre:
- Como tomar os rem√©dios da hansen√≠ase do jeito certo
- O que esperar durante o tratamento
- Como a farm√°cia deve explicar tudo direitinho
- Cuidados especiais com esses medicamentos

Para sua pergunta, o melhor √© conversar com um profissional que entende dessa √°rea espec√≠fica, t√°? Assim voc√™ vai ter a resposta mais certinha! üíô

*G√° - Especialista em hansen√≠ase com muito carinho*"""

def generate_dr_gasnelio_response(question, context):
    """Gera resposta t√©cnica para Dr. Gasnelio baseada na tese"""
    question_lower = question.lower()
    
    # Banco de respostas t√©cnicas baseadas na tese
    technical_responses = {
        # Dosagens adultas
        'rifampicina adulto': """Dr. Gasnelio responde:

PROTOCOLO PQT-U ADULTO - RIFAMPICINA:

**DOSE SUPERVISIONADA MENSAL:**
- 2 x 300mg = 600mg total
- Administra√ß√£o: uma vez por m√™s, supervisionada

**DOSE M√ÅXIMA:** 600mg/dia
**POPULA√á√ÉO:** Adultos > 50kg
**DURA√á√ÉO:** 12 meses para hansen√≠ase multibacilar

**MECANISMO DE A√á√ÉO:** 
Inibi√ß√£o da RNA polimerase bacteriana do Mycobacterium leprae, bloqueando a s√≠ntese de RNA.

**FARM√ÅCOVIGIL√ÇNCIA:**
- Monitorar fun√ß√£o hep√°tica
- Observar colora√ß√£o alaranjada da urina (normal)
- Aten√ß√£o para hepatotoxicidade

**REFER√äNCIA:** Protocolo Cl√≠nico e Diretrizes Terap√™uticas da Hansen√≠ase (PCDT 2022) - Minist√©rio da Sa√∫de

*Resposta t√©cnica baseada na tese sobre roteiro de dispensa√ß√£o para hansen√≠ase.*""",

        'clofazimina adulto': """Dr. Gasnelio responde:

PROTOCOLO PQT-U ADULTO - CLOFAZIMINA:

**DOSE SUPERVISIONADA MENSAL:**
- 3 x 100mg = 300mg total
- Administra√ß√£o: uma vez por m√™s, supervisionada

**DOSE AUTOADMINISTRADA DI√ÅRIA:**
- 1 x 50mg/dia
- Administra√ß√£o: diariamente pelo pr√≥prio paciente

**DOSE M√ÅXIMA:** 300mg/dia
**POPULA√á√ÉO:** Adultos > 50kg

**MECANISMO DE A√á√ÉO:**
Liga-se ao DNA bacteriano, inibindo crescimento do Mycobacterium leprae.

**EFEITO ADVERSO CARACTER√çSTICO:**
Hiperpigmenta√ß√£o da pele (vermelho a castanho escuro) - revers√≠vel ap√≥s descontinua√ß√£o.

**ORIENTA√á√ÉO FARMAC√äUTICA:**
- Tomar com alimentos
- Evitar suco de laranja (reduz absor√ß√£o)
- Informar sobre pigmenta√ß√£o esperada

**REFER√äNCIA:** PCDT Hansen√≠ase 2022 - Se√ß√£o espec√≠fica sobre clofazimina

*Resposta t√©cnica Dr. Gasnelio baseada na tese de dispensa√ß√£o.*""",

        'dapsona adulto': """Dr. Gasnelio responde:

PROTOCOLO PQT-U ADULTO - DAPSONA:

**DOSE SUPERVISIONADA MENSAL:**
- 1 x 100mg
- Administra√ß√£o: uma vez por m√™s, supervisionada

**DOSE AUTOADMINISTRADA DI√ÅRIA:**
- 1 x 100mg/dia
- Administra√ß√£o: diariamente pelo pr√≥prio paciente

**DOSE M√ÅXIMA:** 100mg/dia
**POPULA√á√ÉO:** Adultos > 50kg

**MECANISMO DE A√á√ÉO:**
Antagonista do √°cido para-aminobenz√≥ico (PABA), interferindo na s√≠ntese do folato bacteriano.

**CONTRAINDICA√á√ÉO IMPORTANTE:**
Defici√™ncia de G6PD (risco de anemia hemol√≠tica grave)

**FARM√ÅCOVIGIL√ÇNCIA:**
- Monitorar sinais de anemia hemol√≠tica
- Observar icter√≠cia, palidez, fadiga
- Aten√ß√£o especial em popula√ß√µes de risco

**REFER√äNCIA:** PCDT Hansen√≠ase 2022 - Protocolo espec√≠fico dapsona

*Resposta t√©cnica Dr. Gasnelio baseada na tese sobre roteiro de dispensa√ß√£o.*"""
    }
    
    # Busca resposta espec√≠fica
    for key, response in technical_responses.items():
        if all(word in question_lower for word in key.split()):
            return response
    
    # Resposta gen√©rica t√©cnica
    return f"""Dr. Gasnelio responde:

Baseado na tese sobre roteiro de dispensa√ß√£o para hansen√≠ase PQT-U, posso fornecer orienta√ß√£o t√©cnica especializada sobre sua pergunta: '{question}'.

**CONTEXTO DA TESE:**
{context[:800]}...

**AN√ÅLISE FARMACOL√ìGICA:**
Esta consulta requer an√°lise espec√≠fica dos protocolos estabelecidos no PCDT Hansen√≠ase 2022. Para informa√ß√µes mais detalhadas sobre dosagens, intera√ß√µes e farm√°covigil√¢ncia, recomendo consultar a se√ß√£o completa da pesquisa.

**RECOMENDA√á√ÉO PROFISSIONAL:**
Sempre seguir protocolos estabelecidos pelo Minist√©rio da Sa√∫de e realizar dispensa√ß√£o farmac√™utica conforme roteiro padronizado.

*Resposta t√©cnica baseada na tese - Dr. Gasnelio, especialista em hansen√≠ase PQT-U*"""

def generate_ga_response(question, context):
    """Gera resposta emp√°tica para G√°"""
    question_lower = question.lower()
    
    # Banco de respostas emp√°ticas
    empathetic_responses = {
        'urina laranja': """Oi! Aqui √© o G√°! üòä

Entendo sua preocupa√ß√£o sobre a urina ficar laranja! √â super normal ficar assustado quando isso acontece, mas pode ficar tranquilo(a)! 

**O que est√° acontecendo:**
A rifampicina (um dos seus rem√©dios da hansen√≠ase) deixa a urina numa cor laranja bem caracter√≠stica. √â como se fosse um "sinal" de que o rem√©dio est√° fazendo efeito!

**√â normal mesmo?**
Sim! √â completamente normal e esperado. N√£o √© perigoso nem prejudicial. Muitas pessoas ficam assustadas no come√ßo, mas √© s√≥ o rem√©dio saindo do organismo.

**Vai passar?**
Enquanto voc√™ estiver tomando o tratamento, a urina vai continuar assim. Quando terminar o tratamento, volta ao normal rapidinho!

**Dica importante:** Se voc√™ notar que a cor ficou muito diferente (tipo marrom escuro) ou se tiver dor, a√≠ sim vale conversar com seu m√©dico, t√°?

Espero ter ajudado! Qualquer outra d√∫vida, estou aqui! üíô

*G√° - Explicando com carinho sobre hansen√≠ase*""",

        'pele escura': """Oi! Sou o G√°! üòä

Sei que deve estar preocupado(a) com a pele ficando mais escura, n√©? Entendo perfeitamente essa preocupa√ß√£o!

**O que est√° acontecendo:**
√â a clofazimina (um dos rem√©dios do seu tratamento) que causa esse escurecimento. √â tipo uma "marca tempor√°ria" que o rem√©dio deixa.

**Por que isso acontece?**
A clofazimina se acumula na pele e deixa ela com uma cor mais avermelhada ou amarronzada. √â assim mesmo que funciona!

**Vai melhorar?**
Sim! Depois que voc√™ terminar o tratamento, a cor vai clareando aos pouquinhos. Pode demorar alguns meses, mas volta ao normal!

**√â em todo mundo?**
N√£o! Algumas pessoas escurecem mais, outras menos. Depende de cada organismo.

**Importante:** Continue o tratamento direitinho! A hansen√≠ase precisa ser tratada completamente, e esse escurecimento √© s√≥ tempor√°rio.

Voc√™ est√° cuidando da sua sa√∫de, e isso √© o mais importante! üí™

*G√° - Sempre aqui para te apoiar no tratamento*""",

        'medo rem√©dio': """Oi! Aqui √© o G√°! üòä

Primeiro, quero te dizer que √© super normal sentir medo dos rem√©dios. Muita gente fica preocupada no come√ßo, e voc√™ n√£o est√° sozinho(a) nisso!

**Vamos conversar sobre isso:**
Os rem√©dios da hansen√≠ase (rifampicina, clofazimina e dapsona) s√£o seguros quando tomados do jeito certo. Milhares de pessoas j√° se curaram usando esses mesmos medicamentos!

**Por que n√£o precisa ter medo:**
- S√£o rem√©dios estudados h√° muitos anos
- Os m√©dicos sabem exatamente como us√°-los
- Os efeitos colaterais s√£o conhecidos e na maioria s√£o leves
- O tratamento √© acompanhado de pertinho

**O que voc√™ pode fazer:**
- Converse com seu m√©dico sobre todas as suas preocupa√ß√µes
- Pergunte tudo que quiser saber
- Lembre-se: tratar a hansen√≠ase √© muito importante para sua sa√∫de!

**Lembre-se:** Voc√™ √© corajoso(a) por estar cuidando da sua sa√∫de! Cada comprimido que voc√™ toma √© um passo para ficar completamente curado(a)! üåü

Estou aqui sempre que precisar de uma conversa! üíô

*G√° - Te apoiando com muito carinho*"""
    }
    
    # Busca resposta espec√≠fica
    for key, response in empathetic_responses.items():
        if any(word in question_lower for word in key.split()):
            return response
    
    # Resposta gen√©rica emp√°tica
    return f"""Oi! Aqui √© o G√°! üòä

Que bom que voc√™ perguntou sobre '{question}'! Adoro poder ajudar com as d√∫vidas sobre hansen√≠ase!

**Sobre sua pergunta:**
{context[:600]}...

**Explicando de forma simples:**
A hansen√≠ase tem tratamento sim, e √© muito eficaz! Os rem√©dios (rifampicina, clofazimina e dapsona) trabalham juntos para curar completamente a doen√ßa.

**O que √© importante voc√™ saber:**
- O tratamento dura 12 meses (1 aninho)
- Voc√™ vai tomar alguns rem√©dios na farm√°cia (supervisionado) e outros em casa
- √â super importante n√£o parar o tratamento
- Qualquer d√∫vida, sempre converse com seu m√©dico ou farmac√™utico!

Lembre-se: voc√™ est√° no caminho certo para a cura! üåü

*G√° - Sempre aqui para te apoiar!*"""

def answer_question(question, persona):
    """Responde √† pergunta usando o sistema completo"""
    global md_text
    
    if not md_text:
        if persona == "dr_gasnelio":
            return {
                "answer": "Dr. Gasnelio informa: Base de conhecimento n√£o dispon√≠vel no momento. Favor verificar conectividade do sistema.",
                "persona": "dr_gasnelio",
                "confidence": 0.0,
                "name": "Dr. Gasnelio"
            }
        else:
            return {
                "answer": "Oi! Infelizmente n√£o consigo acessar as informa√ß√µes no momento. Tente novamente em alguns instantes! üòä",
                "persona": "ga", 
                "confidence": 0.0,
                "name": "G√°"
            }
    
    try:
        # Detectar escopo
        scope_analysis = detect_question_scope(question)
        logger.info(f"An√°lise de escopo - No escopo: {scope_analysis['is_in_scope']}")
        
        # Se fora do escopo, resposta de limita√ß√£o
        if not scope_analysis['is_in_scope']:
            limitation_response = get_limitation_response(persona, question)
            return {
                "answer": limitation_response,
                "persona": persona,
                "confidence": 0.9,
                "name": PERSONAS[persona]["name"],
                "scope_analysis": scope_analysis
            }
        
        # Encontrar contexto relevante
        context = find_relevant_context(question, md_text)
        
        # Gerar resposta baseada na persona
        if persona == "dr_gasnelio":
            response_text = generate_dr_gasnelio_response(question, context)
        else:  # ga
            response_text = generate_ga_response(question, context)
        
        # Determinar confian√ßa
        confidence = 0.9 if scope_analysis['confidence_level'] == 'high' else 0.8 if scope_analysis['confidence_level'] == 'medium' else 0.7
        
        return {
            "answer": response_text,
            "persona": persona,
            "confidence": confidence,
            "name": PERSONAS[persona]["name"],
            "scope_analysis": scope_analysis
        }
        
    except Exception as e:
        logger.error(f"Erro ao processar pergunta: {e}")
        if persona == "dr_gasnelio":
            error_response = "Dr. Gasnelio informa: Erro t√©cnico no processamento. Favor tentar novamente."
        else:
            error_response = "Oi! Deu um probleminha t√©cnico aqui. Pode tentar perguntar de novo? üòä"
            
        return {
            "answer": error_response,
            "persona": persona,
            "confidence": 0.0,
            "name": PERSONAS[persona]["name"]
        }

# ENDPOINTS DA API

@app.route('/api/health', methods=['GET'])
def health_check():
    """Verifica√ß√£o de sa√∫de da API"""
    return jsonify({
        "status": "healthy",
        "knowledge_base_loaded": len(md_text) > 0,
        "timestamp": datetime.now().isoformat(),
        "personas": list(PERSONAS.keys()),
        "api_version": "complete_1.0.0"
    })

@app.route('/api/chat', methods=['POST'])
def chat_api():
    """Endpoint principal para chat"""
    start_time = datetime.now()
    request_id = f"req_{int(start_time.timestamp() * 1000)}"
    
    try:
        # Valida√ß√µes
        if not request.is_json:
            return jsonify({
                "error": "Content-Type deve ser application/json",
                "error_code": "INVALID_CONTENT_TYPE",
                "request_id": request_id
            }), 400

        data = request.get_json()
        if not data:
            return jsonify({
                "error": "Payload vazio",
                "error_code": "EMPTY_PAYLOAD", 
                "request_id": request_id
            }), 400

        question = data.get('question', '').strip()
        if not question:
            return jsonify({
                "error": "Campo 'question' √© obrigat√≥rio",
                "error_code": "MISSING_QUESTION",
                "request_id": request_id
            }), 400

        personality_id = data.get('personality_id', '').strip().lower()
        if personality_id not in PERSONAS:
            return jsonify({
                "error": "Campo 'personality_id' deve ser 'dr_gasnelio' ou 'ga'",
                "error_code": "INVALID_PERSONA",
                "request_id": request_id
            }), 400

        # Processar pergunta
        response = answer_question(question, personality_id)
        
        # Adicionar metadados
        response.update({
            "request_id": request_id,
            "processing_time_ms": int((datetime.now() - start_time).total_seconds() * 1000),
            "timestamp": datetime.now().isoformat(),
            "api_version": "complete_1.0.0"
        })
        
        return jsonify(response), 200

    except Exception as e:
        logger.error(f"Erro cr√≠tico na API: {e}")
        return jsonify({
            "error": "Erro interno do servidor",
            "error_code": "INTERNAL_SERVER_ERROR",
            "request_id": request_id,
            "timestamp": datetime.now().isoformat()
        }), 500

@app.route('/api/personas', methods=['GET'])
def get_personas_api():
    """Endpoint para informa√ß√µes das personas"""
    return jsonify({
        "personas": PERSONAS,
        "metadata": {
            "total_personas": len(PERSONAS),
            "api_version": "complete_1.0.0",
            "timestamp": datetime.now().isoformat()
        }
    })

@app.route('/api/scope', methods=['POST'])
def scope_verification_api():
    """Endpoint para verifica√ß√£o de escopo"""
    try:
        if not request.is_json:
            return jsonify({"error": "Content-Type deve ser application/json"}), 400
        
        data = request.get_json()
        if not data or 'question' not in data:
            return jsonify({"error": "Campo 'question' √© obrigat√≥rio"}), 400
        
        question = data['question'].strip()
        scope_analysis = detect_question_scope(question)
        
        return jsonify({
            "question": question,
            "in_scope": scope_analysis["is_in_scope"],
            "confidence": scope_analysis["confidence_level"],
            "category": scope_analysis["category"],
            "scope_score": scope_analysis["scope_score"],
            "reasoning": scope_analysis["reasoning"],
            "timestamp": datetime.now().isoformat()
        }), 200
        
    except Exception as e:
        logger.error(f"Erro na verifica√ß√£o de escopo: {e}")
        return jsonify({"error": "Erro interno"}), 500

@app.route('/api/feedback', methods=['POST'])
def feedback_api():
    """Endpoint para feedback"""
    try:
        if not request.is_json:
            return jsonify({"error": "Content-Type deve ser application/json"}), 400
        
        data = request.get_json()
        required_fields = ['question', 'response', 'rating']
        
        for field in required_fields:
            if field not in data:
                return jsonify({"error": f"Campo '{field}' √© obrigat√≥rio"}), 400
        
        rating = data['rating']
        if not isinstance(rating, int) or rating < 1 or rating > 5:
            return jsonify({"error": "Rating deve ser entre 1 e 5"}), 400
        
        logger.info(f"Feedback recebido - Rating: {rating}")
        
        return jsonify({
            "message": "Feedback recebido com sucesso",
            "timestamp": datetime.now().isoformat()
        }), 200
        
    except Exception as e:
        logger.error(f"Erro ao processar feedback: {e}")
        return jsonify({"error": "Erro interno"}), 500

@app.route('/api/stats', methods=['GET'])
def stats_api():
    """Endpoint para estat√≠sticas"""
    return jsonify({
        "system_stats": {
            "api_version": "complete_1.0.0",
            "knowledge_base_loaded": len(md_text) > 0,
            "available_personas": list(PERSONAS.keys()),
            "uptime": "Desde o in√≠cio da sess√£o"
        },
        "timestamp": datetime.now().isoformat()
    })

if __name__ == '__main__':
    # Inicializa√ß√£o
    logger.info("Iniciando Backend Completo para Valida√ß√£o Cient√≠fica...")
    
    # Carregar base de conhecimento
    if os.path.exists(MD_PATH):
        md_text = extract_md_text(MD_PATH)
        logger.info("Base de conhecimento carregada com sucesso")
    else:
        logger.warning(f"Arquivo n√£o encontrado: {MD_PATH}")
        md_text = ""
    
    # Iniciar servidor
    port = int(os.environ.get('PORT', 5001))  # Changed to port 5001 to avoid conflict
    logger.info(f"Backend completo iniciado na porta {port}")
    logger.info(f"Personas dispon√≠veis: {list(PERSONAS.keys())}")
    app.run(host='0.0.0.0', port=port, debug=False)