diff --git a/apps/backend/main.py b/apps/backend/main.py
index 38be9649..5f268275 100644
--- a/apps/backend/main.py
+++ b/apps/backend/main.py
@@ -96,7 +96,8 @@ try:
     logger.info("‚úì Blueprints completos importados com sucesso")
 except ImportError as e:
     BLUEPRINTS_AVAILABLE = False
-    logger.warning(f"[WARNING]  Blueprints principais n√£o dispon√≠veis: {e}")
+    # SECURITY FIX: Log import error without exposing module details
+    logger.warning("[WARNING]  Blueprints principais n√£o dispon√≠veis: ImportError")
     logger.info("üß† Ativando Sistema de Fallback Inteligente...")
     
     # Usar sistema de fallback inteligente
@@ -106,7 +107,8 @@ except ImportError as e:
         logger.info("[OK] Sistema de Fallback Inteligente ativado com sucesso!")
         logger.info(f"[LIST] {len(ALL_BLUEPRINTS)} blueprints inteligentes criados")
     except ImportError as fallback_error:
-        logger.error(f"[ERROR] Erro ao carregar Fallback Inteligente: {fallback_error}")
+        # SECURITY FIX: Log error without exposing internal details
+        logger.error("[ERROR] Erro ao carregar Fallback Inteligente: ImportError")
         logger.info("üîÑ Usando fallback b√°sico de emerg√™ncia...")
         
         # Fallback de emerg√™ncia ultra-b√°sico
@@ -197,7 +199,9 @@ def create_app():
             security_middleware = SecurityMiddleware(app)
             logger.info("[OK] Security Middleware avan√ßado inicializado")
         except Exception as e:
-            logger.warning(f"[WARNING] Erro ao inicializar Security Middleware: {e}")
+            # SECURITY FIX: Log middleware error without exposing details
+            error_type = type(e).__name__
+            logger.warning(f"[WARNING] Erro ao inicializar Security Middleware [{error_type}]: Configura√ß√£o indispon√≠vel")
     
     # Inicializar JWT Authentication de forma n√£o-bloqueante
     if JWT_AUTH_AVAILABLE:
@@ -207,7 +211,9 @@ def create_app():
             app.before_request(auth_middleware)
             logger.info("[AUTH] JWT Authentication configurado (Firebase)")
         except Exception as e:
-            logger.warning(f"[WARNING] Erro ao configurar JWT: {e}")
+            # SECURITY FIX: Log JWT error without exposing configuration details
+            error_type = type(e).__name__
+            logger.warning(f"[WARNING] Erro ao configurar JWT [{error_type}]: Configura√ß√£o de autentica√ß√£o indispon√≠vel")
     else:
         logger.info("‚ÑπÔ∏è JWT Authentication n√£o dispon√≠vel - sistema funciona sem autentica√ß√£o")
     
@@ -219,7 +225,9 @@ def create_app():
             init_security_optimizations(app)
             logger.info("[START] Otimiza√ß√µes de performance e seguran√ßa ativadas")
         except Exception as e:
-            logger.warning(f"[WARNING] Erro ao inicializar otimiza√ß√µes: {e}")
+            # SECURITY FIX: Log optimization error without exposing details
+            error_type = type(e).__name__
+            logger.warning(f"[WARNING] Erro ao inicializar otimiza√ß√µes [{error_type}]: Recursos avan√ßados indispon√≠veis")
     elif cloud_run_env:
         logger.info("‚òÅÔ∏è Cloud Run detectado - otimiza√ß√µes carregadas sob demanda")
     
@@ -415,7 +423,11 @@ def setup_error_handlers(app):
     
     @app.errorhandler(500)
     def internal_error(error):
-        logger.error(f"Erro interno: {error}")
+        # SECURITY FIX: Log error without exposing stack trace details
+        # Only log error type and a sanitized message for security
+        error_type = type(error).__name__
+        logger.error(f"Erro interno [{error_type}]: Erro processamento request")
+        
         return jsonify({
             "error": "Erro interno do servidor",
             "error_code": "INTERNAL_ERROR",
@@ -560,5 +572,7 @@ if __name__ == '__main__':
     except KeyboardInterrupt:
         logger.info("‚èπÔ∏è  Servidor interrompido pelo usu√°rio")
     except Exception as e:
-        logger.error(f"[ERROR] Erro ao iniciar servidor: {e}")
+        # SECURITY FIX: Log startup error without exposing stack trace
+        error_type = type(e).__name__
+        logger.error(f"[ERROR] Erro ao iniciar servidor [{error_type}]: Falha na inicializa√ß√£o")
         sys.exit(1)
\ No newline at end of file
