============================= test session starts =============================
platform win32 -- Python 3.13.5, pytest-8.4.1, pluggy-1.6.0 -- C:\Python313\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\Ana\Meu Drive\Site roteiro de dispensação
plugins: anyio-4.9.0, cov-6.2.1, mock-3.14.1
collecting ... collected 7 items

tests/security/test_log_injection_prevention.py::TestLogInjectionPrevention::test_cloud_run_url_sanitization_hml PASSED [ 14%]
tests/security/test_log_injection_prevention.py::TestLogInjectionPrevention::test_cloud_run_url_sanitization_production PASSED [ 28%]
tests/security/test_log_injection_prevention.py::TestLogInjectionPrevention::test_cors_origins_sanitization PASSED [ 42%]
tests/security/test_log_injection_prevention.py::TestLogInjectionPrevention::test_server_host_port_sanitization PASSED [ 57%]
tests/security/test_log_injection_prevention.py::TestLogInjectionPrevention::test_url_encoded_injection_prevention FAILED [ 71%]
tests/security/test_log_injection_prevention.py::TestCWE117ComplianceValidation::test_cwe_117_log_neutralization PASSED [ 85%]
tests/security/test_log_injection_prevention.py::TestCWE117ComplianceValidation::test_log_length_limitation PASSED [100%]

================================== FAILURES ===================================
______ TestLogInjectionPrevention.test_url_encoded_injection_prevention _______

self = <test_log_injection_prevention.TestLogInjectionPrevention object at 0x0000015F593E44D0>

    def test_url_encoded_injection_prevention(self):
        """Test prevention of URL-encoded log injection attempts"""
    
        # Test URL-encoded injection attempts
        encoded_injections = [
            "https://example.com%0AFAKE%20LOG:%20System%20compromised",
            "https://example.com%0DINJECTED:%20Admin%20access",
            "https://example.com%09MALICIOUS:%20Backdoor%20active"
        ]
    
        for encoded_url in encoded_injections:
            with patch('main.logger') as mock_logger:
                # The comprehensive sanitization should handle URL decoding and control character removal
                import urllib.parse
                import re
                decoded_url = urllib.parse.unquote(encoded_url)
                sanitized_url = ''.join(c for c in decoded_url if c.isprintable() and c not in '\\n\\r\\t')
    
                mock_logger.info(f"Cloud Run URL adicionada ao CORS: {sanitized_url}")
    
                call_args = mock_logger.info.call_args[0][0]
    
                # The key is that control characters are removed, preventing log format breaking
                # Content filtering is secondary - the main goal is format integrity
                assert '\\n' not in call_args, "Newline control character not removed"
                assert '\\r' not in call_args, "Carriage return control character not removed"
                assert '\\t' not in call_args, "Tab control character not removed"
                # URL should be present but sanitized (control chars removed)
>               assert 'https://example.com' in call_args, "Legitimate URL content removed incorrectly"
E               AssertionError: Legitimate URL content removed incorrectly
E               assert 'https://example.com' in 'Cloud Run URL adicionada ao CORS: hps://example.comFAKE LOG: Sysem compomised'

tests\security\test_log_injection_prevention.py:205: AssertionError
============================== warnings summary ===============================
tests/security/test_log_injection_prevention.py: 94 warnings
  C:\Users\Ana\Meu Drive\Site roteiro de dispensação\tests\security\../../apps/backend\core\logging\advanced_logger.py:134: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    'timestamp': datetime.utcnow().isoformat() + 'Z',

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
FAILED tests/security/test_log_injection_prevention.py::TestLogInjectionPrevention::test_url_encoded_injection_prevention
================== 1 failed, 6 passed, 94 warnings in 1.03s ===================
