#!/bin/bash
# ============================================================================
# Script para configurar mapeamento de dom√≠nio personalizado no Google Cloud Run
# Dom√≠nio: roteirosdispensacao.com.br
# ============================================================================

set -e

PROJECT_ID="red-truck-468923-s4"
REGION="us-central1"
DOMAIN="roteirosdispensacao.com.br"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_step() {
    echo -e "${BLUE}üîß $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se est√° logado no gcloud
print_step "Verificando autentica√ß√£o Google Cloud..."
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q "@"; then
    print_error "N√£o est√° logado no Google Cloud"
    echo "Execute: gcloud auth login"
    exit 1
fi

# Configurar projeto
print_step "Configurando projeto..."
gcloud config set project $PROJECT_ID
print_success "Projeto configurado: $PROJECT_ID"

# ============================================================================
# 1. CONFIGURAR DOM√çNIO PRINCIPAL - PRODU√á√ÉO
# ============================================================================

print_step "Configurando dom√≠nio de produ√ß√£o..."

# Frontend Produ√ß√£o
print_step "Mapeando frontend produ√ß√£o: $DOMAIN"
gcloud run domain-mappings create \
    --service=roteiro-dispensacao-frontend \
    --domain=$DOMAIN \
    --region=$REGION \
    --platform=managed || print_warning "Mapeamento pode j√° existir"

# API Produ√ß√£o
print_step "Mapeando API produ√ß√£o: api.$DOMAIN"
gcloud run domain-mappings create \
    --service=roteiro-dispensacao-api \
    --domain=api.$DOMAIN \
    --region=$REGION \
    --platform=managed || print_warning "Mapeamento pode j√° existir"

# ============================================================================
# 2. CONFIGURAR SUBDOM√çNIO - HOMOLOGA√á√ÉO
# ============================================================================

print_step "Configurando subdom√≠nio de homologa√ß√£o..."

# Frontend HML
print_step "Mapeando frontend HML: hml.$DOMAIN"
gcloud run domain-mappings create \
    --service=hml-roteiro-dispensacao-frontend \
    --domain=hml.$DOMAIN \
    --region=$REGION \
    --platform=managed || print_warning "Mapeamento pode j√° existir"

# API HML
print_step "Mapeando API HML: hml-api.$DOMAIN"
gcloud run domain-mappings create \
    --service=hml-roteiro-dispensacao-api \
    --domain=hml-api.$DOMAIN \
    --region=$REGION \
    --platform=managed || print_warning "Mapeamento pode j√° existir"

# ============================================================================
# 3. VERIFICAR STATUS DOS MAPEAMENTOS
# ============================================================================

print_step "Verificando status dos mapeamentos..."

echo ""
echo "üìã STATUS DOS MAPEAMENTOS:"
echo "=========================="

# Listar todos os mapeamentos
gcloud run domain-mappings list --region=$REGION --platform=managed

echo ""
print_step "Verificando registros DNS necess√°rios..."

# Obter registros DNS para cada dom√≠nio
echo ""
echo "üìù REGISTROS DNS NECESS√ÅRIOS:"
echo "============================"

domains=("$DOMAIN" "api.$DOMAIN" "hml.$DOMAIN" "hml-api.$DOMAIN")

for domain in "${domains[@]}"; do
    echo ""
    echo "üåê Dom√≠nio: $domain"
    echo "-------------------"

    # Tentar obter o registro DNS
    DNS_RECORD=$(gcloud run domain-mappings describe $domain \
        --region=$REGION \
        --platform=managed \
        --format="value(status.resourceRecords[0].rrdata)" 2>/dev/null || echo "N√£o configurado")

    if [ "$DNS_RECORD" != "N√£o configurado" ]; then
        echo "Tipo: CNAME"
        echo "Nome: $domain"
        echo "Valor: $DNS_RECORD"
    else
        print_warning "Mapeamento n√£o encontrado para $domain"
    fi
done

# ============================================================================
# 4. VERIFICAR SSL
# ============================================================================

print_step "Verificando certificados SSL..."

echo ""
echo "üîí STATUS SSL:"
echo "=============="

for domain in "${domains[@]}"; do
    SSL_STATUS=$(gcloud run domain-mappings describe $domain \
        --region=$REGION \
        --platform=managed \
        --format="value(status.conditions[0].status)" 2>/dev/null || echo "Desconhecido")

    if [ "$SSL_STATUS" = "True" ]; then
        print_success "SSL ativo para $domain"
    else
        print_warning "SSL pendente para $domain (pode levar at√© 24h)"
    fi
done

# ============================================================================
# 5. RESUMO FINAL
# ============================================================================

echo ""
echo "üìä RESUMO DA CONFIGURA√á√ÉO"
echo "========================="
echo ""
echo "üè≠ PRODU√á√ÉO:"
echo "  Frontend: https://$DOMAIN"
echo "  API:      https://api.$DOMAIN"
echo ""
echo "üß™ HOMOLOGA√á√ÉO:"
echo "  Frontend: https://hml.$DOMAIN"
echo "  API:      https://hml-api.$DOMAIN"
echo ""
echo "‚ö†Ô∏è  PR√ìXIMOS PASSOS:"
echo "1. Configure os registros DNS no seu provedor"
echo "2. Aguarde propaga√ß√£o DNS (pode levar at√© 48h)"
echo "3. SSL ser√° provisionado automaticamente"
echo "4. Atualize vari√°veis de ambiente nos workflows"
echo ""

print_success "Configura√ß√£o de dom√≠nio conclu√≠da!"