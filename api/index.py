from flask import Flask, jsonify, request
from flask_cors import CORS
import re
import html
from datetime import datetime, timedelta
from collections import defaultdict

app = Flask(__name__)

# Configura√ß√£o CORS para Vercel
CORS(app, 
     origins=["https://siteroteirodedispersacao.vercel.app", "http://localhost:3000"],
     methods=['GET', 'POST', 'OPTIONS'],
     allow_headers=['Content-Type', 'Authorization'])

# Rate limiting simples
rate_limit_storage = defaultdict(list)
RATE_LIMIT_MAX = 30  # 30 requests per minute
RATE_LIMIT_WINDOW = 60  # seconds

def check_rate_limit(client_ip):
    """Verifica rate limiting"""
    now = datetime.now()
    window_start = now - timedelta(seconds=RATE_LIMIT_WINDOW)
    
    # Limpar requests antigos
    rate_limit_storage[client_ip] = [req_time for req_time in rate_limit_storage[client_ip] if req_time > window_start]
    
    # Verificar limite
    if len(rate_limit_storage[client_ip]) >= RATE_LIMIT_MAX:
        return False
    
    # Adicionar nova request
    rate_limit_storage[client_ip].append(now)
    return True

@app.route('/', methods=['GET', 'POST', 'OPTIONS'])
@app.route('/health', methods=['GET', 'POST', 'OPTIONS'])
@app.route('/<path:path>', methods=['GET', 'POST', 'OPTIONS'])
def handle_all(path=None):
    """Handle all routes"""
    
    # Handle CORS preflight
    if request.method == 'OPTIONS':
        return jsonify({}), 200
    
    # Health check
    if request.path.endswith('/health') or path == 'health':
        return jsonify({
            "status": "healthy",
            "platform": "vercel",
            "version": "9.0.0",
            "timestamp": "2025-01-28"
        })
    
    # Personas endpoint
    if request.path.endswith('/personas') or path == 'personas':
        return jsonify({
            "personas": {
                "dr_gasnelio": {
                    "name": "Dr. Gasnelio",
                    "description": "Farmac√™utico cl√≠nico especialista em hansen√≠ase",
                    "avatar": "üë®‚Äç‚öïÔ∏è",
                    "personality": "t√©cnico e preciso"
                },
                "ga": {
                    "name": "G√°", 
                    "description": "Farmac√™utico emp√°tico e acess√≠vel",
                    "avatar": "üòä",
                    "personality": "emp√°tico e did√°tico"
                }
            },
            "metadata": {
                "total_personas": 2,
                "available_persona_ids": ["dr_gasnelio", "ga"],
                "api_version": "9.0.0",
                "platform": "vercel",
                "timestamp": "2025-01-28"
            }
        })
    
    # Chat endpoint
    if request.path.endswith('/chat') or path == 'chat':
        if request.method == 'POST':
            try:
                # Rate limiting
                client_ip = request.environ.get('HTTP_X_FORWARDED_FOR', request.remote_addr) or 'unknown'
                if not check_rate_limit(client_ip):
                    return jsonify({
                        "error": "Rate limit excedido. Tente novamente em 1 minuto.",
                        "error_code": "RATE_LIMIT_EXCEEDED"
                    }), 429
                
                data = request.get_json()
                if not data:
                    return jsonify({"error": "JSON payload required"}), 400
                
                question = data.get('question', '').strip()
                personality_id = data.get('personality_id', '').strip().lower()
                
                # Valida√ß√£o b√°sica
                if not question:
                    return jsonify({"error": "Campo 'question' √© obrigat√≥rio"}), 400
                
                if personality_id not in ['dr_gasnelio', 'ga']:
                    return jsonify({"error": "personality_id deve ser 'dr_gasnelio' ou 'ga'"}), 400
                
                # Sanitiza√ß√£o b√°sica
                question = html.escape(question)
                if len(question) > 500:
                    return jsonify({"error": "Pergunta muito longa (m√°ximo 500 caracteres)"}), 400
                
                # Resposta baseada em regras simples
                response = generate_simple_response(question, personality_id)
                
                return jsonify({
                    "answer": response["answer"],
                    "persona": personality_id,
                    "confidence": 0.8,
                    "name": response["name"],
                    "timestamp": "2025-01-28",
                    "api_version": "9.0.0"
                })
                
            except Exception as e:
                return jsonify({"error": "Erro interno do servidor"}), 500
        else:
            return jsonify({"error": "M√©todo POST requerido"}), 405
    
    # Drug interactions endpoint
    if request.path.endswith('/interactions') or path == 'interactions':
        if request.method == 'POST':
            try:
                data = request.get_json()
                if not data:
                    return jsonify({"error": "JSON payload required"}), 400
                
                medications = data.get('medications', [])
                if not medications or not isinstance(medications, list):
                    return jsonify({"error": "Lista de medicamentos obrigat√≥ria"}), 400
                
                interactions = check_drug_interactions(medications)
                
                return jsonify({
                    "medications_checked": medications,
                    "interactions_found": len(interactions),
                    "interactions": interactions,
                    "timestamp": "2025-01-28",
                    "api_version": "9.0.0"
                })
                
            except Exception as e:
                return jsonify({"error": "Erro interno do servidor"}), 500
        else:
            return jsonify({"error": "M√©todo POST requerido"}), 405
    
    # Default response
    return jsonify({
        "message": "Roteiro de Dispensa√ß√£o API - Vercel",
        "version": "9.0.0", 
        "status": "online",
        "endpoints": {
            "health": "/api/health",
            "personas": "/api/personas",
            "chat": "/api/chat (POST)",
            "interactions": "/api/interactions (POST)"
        },
        "path_requested": request.path
    })

def generate_simple_response(question, persona):
    """Gera resposta baseada em regras simples"""
    question_lower = question.lower()
    
    # Base de conhecimento expandida
    keyword_responses = {
        "hanseniase": {
            "dr_gasnelio": "A hansen√≠ase √© uma doen√ßa infecciosa cr√¥nica causada pelo Mycobacterium leprae. Classificada em paucibacilar (PB) e multibacilar (MB), requer poliquimioterapia (PQT) conforme protocolo OMS.",
            "ga": "A hansen√≠ase √© uma doen√ßa que tem cura! √â causada por uma bact√©ria e se pega pelo ar, mas √© bem dif√≠cil de transmitir. O mais importante √© seguir o tratamento certinho! üòä"
        },
        "hansen": {
            "dr_gasnelio": "Hansen √© outro nome para hansen√≠ase, em homenagem ao m√©dico Gerhard Hansen que descobriu a bact√©ria em 1873. √â a denomina√ß√£o cient√≠fica preferencial para reduzir estigma.",
            "ga": "Hansen √© s√≥ outro nome para hansen√≠ase! Usamos esse nome para diminuir o preconceito. √â a mesma doen√ßa, mas com um nome mais respeitoso! üëç"
        },
        "dispensacao": {
            "dr_gasnelio": "A dispensa√ß√£o farmac√™utica na hansen√≠ase deve incluir: verifica√ß√£o da prescri√ß√£o, orienta√ß√£o posol√≥gica, explica√ß√£o sobre RAM, import√¢ncia da ades√£o e orienta√ß√µes sobre transmiss√£o.",
            "ga": "Na dispensa√ß√£o, eu explico tudo sobre o rem√©dio: como tomar, hor√°rios, o que pode acontecer de efeito, e principalmente que o tratamento funciona! üíä"
        },
        "rifampicina": {
            "dr_gasnelio": "Rifampicina 600mg: bactericida, administra√ß√£o mensal supervisionada. Principais RAM: colora√ß√£o alaranjada de secre√ß√µes, hepatotoxicidade, intera√ß√µes com anticoncepcionais.",
            "ga": "A rifampicina √© um rem√©dio super importante! Ela deixa a urina e o suor meio laranjinha, mas √© normal. Toma uma vez por m√™s aqui na farm√°cia comigo! üß°"
        },
        "dapsona": {
            "dr_gasnelio": "Dapsona 100mg: bacteriost√°tica, uso di√°rio. RAM: anemia hemol√≠tica, metahemoglobinemia, agranulocitose. Monitoramento hematol√≥gico necess√°rio.",
            "ga": "A dapsona √© tomada todo dia em casa. √Äs vezes pode dar uma anemia leve, por isso fazemos exames para acompanhar. Mas √© control√°vel! üíô"
        },
        "clofazimina": {
            "dr_gasnelio": "Clofazimina 300mg mensal + 50mg di√°rio: bactericida para MB. RAM: hiperpigmenta√ß√£o cut√¢nea revers√≠vel, dist√∫rbios GI. A colora√ß√£o escura regride ap√≥s tratamento.",
            "ga": "A clofazimina deixa a pele mais escurinha durante o tratamento, mas depois volta ao normal! √â um efeito conhecido e esperado. Funciona muito bem! üñ§"
        },
        "pqt": {
            "dr_gasnelio": "PQT (Poliquimioterapia): PB = rifampicina + dapsona por 6 meses. MB = rifampicina + dapsona + clofazimina por 12 meses. Esquema padronizado OMS.",
            "ga": "PQT √© o nome do tratamento completo! S√£o v√°rios rem√©dios juntos que garantem a cura. Para casos mais leves s√£o 6 meses, para mais graves s√£o 12! üìÖ"
        },
        "efeito": {
            "dr_gasnelio": "RAM principais: rifampicina (colora√ß√£o alaranjada, hepatotoxicidade), dapsona (anemia hemol√≠tica), clofazimina (hiperpigmenta√ß√£o). Monitoramento essencial.",
            "ga": "Os efeitos mais comuns s√£o mudan√ßas na cor da urina, pele ou suor. Pode dar enjoo ou anemia leve. Sempre me avise se sentir algo diferente! ü©∫"
        },
        "transmissao": {
            "dr_gasnelio": "Transmiss√£o: got√≠culas respirat√≥rias de casos MB sem tratamento. Ap√≥s 15 dias de PQT, o paciente n√£o transmite mais. Contato √≠ntimo necess√°rio.",
            "ga": "A hansen√≠ase se pega pelo ar, mas s√≥ de pessoas que n√£o est√£o se tratando. Depois que come√ßa o rem√©dio, em 15 dias j√° n√£o passa mais! üå¨Ô∏è"
        },
        "cura": {
            "dr_gasnelio": "A cura bacteriol√≥gica ocorre com a PQT completa. Crit√©rio de alta: t√©rmino do esquema terap√™utico independente do resultado bacilosc√≥pico.",
            "ga": "A cura √© garantida quando voc√™ completa todo o tratamento! Mesmo que ainda sinta alguma coisa, a bact√©ria j√° foi eliminada. √â uma vit√≥ria! üéâ"
        },
        "dosagem": {
            "dr_gasnelio": "Dosagens padr√£o OMS: Rifampicina 600mg (mensal), Dapsona 100mg (di√°ria), Clofazimina 300mg (mensal) + 50mg (di√°ria para MB). Ajustes em pediatria.",
            "ga": "As doses s√£o bem estudadas e seguras! Alguns rem√©dios voc√™ toma todo dia, outros uma vez por m√™s aqui comigo. Vou sempre te lembrar! ‚è∞"
        }
    }
    
    # Procura por palavras-chave
    for keyword, responses in keyword_responses.items():
        if keyword in question_lower:
            answer = responses.get(persona, responses["ga"])
            break
    else:
        # Resposta padr√£o
        if persona == "dr_gasnelio":
            answer = f"Baseado na literatura cient√≠fica sobre hansen√≠ase, posso fornecer informa√ß√µes t√©cnicas sobre sua pergunta: '{question}'. Precisa de dados espec√≠ficos sobre protocolos terap√™uticos?"
        else:
            answer = f"Oi! Sobre sua pergunta '{question}', posso te ajudar com informa√ß√µes sobre hansen√≠ase e dispensa√ß√£o farmac√™utica! O que voc√™ gostaria de saber mais especificamente? üòä"
    
    # Nome da persona
    persona_names = {
        "dr_gasnelio": "Dr. Gasnelio",
        "ga": "G√°"
    }
    
    return {
        "answer": answer,
        "name": persona_names.get(persona, "Assistente")
    }

def check_drug_interactions(medications):
    """Verifica intera√ß√µes medicamentosas para hansen√≠ase"""
    
    # Base de dados de intera√ß√µes conhecidas
    known_interactions = {
        ("rifampicina", "anticoncepcional"): {
            "severity": "major",
            "description": "Rifampicina reduz significativamente a efic√°cia de anticoncepcionais orais",
            "recommendation": "Usar m√©todos contraceptivos alternativos durante o tratamento"
        },
        ("rifampicina", "varfarina"): {
            "severity": "major", 
            "description": "Rifampicina aumenta o metabolismo da varfarina, reduzindo seu efeito",
            "recommendation": "Monitorar INR e ajustar dose de varfarina conforme necess√°rio"
        },
        ("rifampicina", "corticoide"): {
            "severity": "moderate",
            "description": "Rifampicina pode reduzir os n√≠veis de corticosteroides",
            "recommendation": "Monitorar resposta cl√≠nica e considerar ajuste de dose"
        },
        ("dapsona", "probenecida"): {
            "severity": "moderate",
            "description": "Probenecida pode aumentar os n√≠veis de dapsona",
            "recommendation": "Monitorar sinais de toxicidade da dapsona"
        },
        ("dapsona", "trimetoprim"): {
            "severity": "moderate",
            "description": "Combina√ß√£o pode aumentar risco de metahemoglobinemia",
            "recommendation": "Monitorar satura√ß√£o de oxig√™nio e sinais de cianose"
        },
        ("clofazimina", "antiarritmico"): {
            "severity": "major",
            "description": "Clofazimina pode prolongar intervalo QT",
            "recommendation": "Realizar ECG antes e durante o tratamento"
        }
    }
    
    interactions_found = []
    medications_lower = [med.lower() for med in medications]
    
    # Verificar intera√ß√µes diretas
    for (drug1, drug2), interaction in known_interactions.items():
        if drug1 in medications_lower and drug2 in medications_lower:
            interactions_found.append({
                "drugs": [drug1, drug2],
                "severity": interaction["severity"],
                "description": interaction["description"],
                "recommendation": interaction["recommendation"]
            })
    
    # Verificar intera√ß√µes espec√≠ficas com medicamentos de hansen√≠ase
    hanseniase_drugs = ["rifampicina", "dapsona", "clofazimina"]
    for hansen_drug in hanseniase_drugs:
        if hansen_drug in medications_lower:
            for med in medications_lower:
                if med != hansen_drug:
                    interaction_key = (hansen_drug, med)
                    if interaction_key in known_interactions:
                        interaction = known_interactions[interaction_key]
                        interactions_found.append({
                            "drugs": [hansen_drug, med],
                            "severity": interaction["severity"],
                            "description": interaction["description"],
                            "recommendation": interaction["recommendation"]
                        })
    
    return interactions_found

# Para Vercel
if __name__ == '__main__':
    app.run()