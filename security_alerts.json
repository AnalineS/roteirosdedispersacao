[{"number":1425,"created_at":"2025-09-01T03:21:19Z","updated_at":"2025-09-01T03:21:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1425","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1425","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2023-45803","severity":"warning","description":"medium severity - CVE-2023-45803 Exposure of Sensitive Information to an Unauthorized Actor vulnerability in pkg:pypi/urllib3@1.26.0","name":"","tags":[],"full_description":"urllib3 is a user-friendly HTTP client library for Python. urllib3 previously wouldn't remove the HTTP request body when an HTTP redirect response using status 301, 302, or 303 after the request had its method changed from one that could accept a request body (like `POST`) to `GET` as is required by HTTP RFCs. Although this behavior is not specified in the section for redirects, it can be inferred by piecing together information from different sections and we have observed the behavior in other major HTTP client implementations like curl and web browsers. Because the vulnerability requires a previously trusted service to become compromised in order to have an impact on confidentiality we believe the exploitability of this vulnerability is low. Additionally, many users aren't putting sensitive data in HTTP request bodies, if this is the case then this vulnerability isn't exploitable. Both of the following conditions must be true to be affected by this vulnerability: 1. Using urllib3 and submitting sensitive in","help":"\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html).","security_severity_level":"medium"},"tool":{"name":"dependency-check","guid":null,"version":"12.1.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/qa-automation.yml:security-tests","environment":"{}","category":".github/workflows/qa-automation.yml:security-tests","state":"open","commit_sha":"e45d5477e7b4865a6b48dcbfb070f9da29e35a7c","message":{"text":"CVE-2023-45803 - urllib3 is a user-friendly HTTP client library for Python. urllib3 previously wouldn't remove the HTTP request body when an HTTP redirect response using status 301, 302, or 303 after the request had its method changed from one that could accept a request body (like `POST`) to `GET` as is required by HTTP RFCs. Although this behavior is not specified in the section for redirects, it can be inferred by piecing together information from different sections and we have observed the behavior in other major HTTP client implementations like curl and web browsers. Because the vulnerability requires a previously trusted service to become compromised in order to have an impact on confidentiality we believe the exploitability of this vulnerability is low. Additionally, many users aren't putting sensitive data in HTTP request bodies, if this is the case then this vulnerability isn't exploitable. Both of the following conditions must be true to be affected by this vulnerability: 1. Using urllib3 and submitting sensitive information in the HTTP request body (such as form data or JSON) and 2. The origin service is compromised and starts redirecting using 301, 302, or 303 to a malicious peer or the redirected-to service becomes compromised. This issue has been addressed in versions 1.26.18 and 2.0.7 and users are advised to update to resolve this issue. Users unable to update should disable redirects for services that aren't expecting to respond with redirects with `redirects=False` and disable automatic redirects with `redirects=False` and handle 301, 302, and 303 redirects manually by stripping the HTTP request body.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2023-45803 for details"},"location":{"path":"file:///github/workspace/apps/backend/requirements.txt:urllib3/1.26.0","start_line":1,"end_line":1,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1425/instances","dismissal_approved_by":null},{"number":1424,"created_at":"2025-09-01T03:21:19Z","updated_at":"2025-09-01T03:21:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1424","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1424","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2021-28363","severity":"warning","description":"medium severity - CVE-2021-28363 Improper Certificate Validation vulnerability in pkg:pypi/urllib3@1.26.0","name":"","tags":[],"full_description":"The urllib3 library 1.26.x before 1.26.4 for Python omits SSL certificate validation in some cases involving HTTPS to HTTPS proxies. The initial connection to the HTTPS proxy (if an SSLContext isn't given via proxy_config) doesn't verify the hostname of the certificate. This means certificates for different servers that still validate properly with the default urllib3 SSLContext will be silently accepted.","help":"\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html).","security_severity_level":"medium"},"tool":{"name":"dependency-check","guid":null,"version":"12.1.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/qa-automation.yml:security-tests","environment":"{}","category":".github/workflows/qa-automation.yml:security-tests","state":"open","commit_sha":"e45d5477e7b4865a6b48dcbfb070f9da29e35a7c","message":{"text":"CVE-2021-28363 - The urllib3 library 1.26.x before 1.26.4 for Python omits SSL certificate validation in some cases involving HTTPS to HTTPS proxies. The initial connection to the HTTPS proxy (if an SSLContext isn't given via proxy_config) doesn't verify the hostname of the certificate. This means certificates for different servers that still validate properly with the default urllib3 SSLContext will be silently accepted."},"location":{"path":"file:///github/workspace/apps/backend/requirements.txt:urllib3/1.26.0","start_line":1,"end_line":1,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1424/instances","dismissal_approved_by":null},{"number":1423,"created_at":"2025-09-01T03:21:19Z","updated_at":"2025-09-01T03:21:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1423","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1423","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2025-50181","severity":"warning","description":"high severity - CVE-2025-50181 URL Redirection to Untrusted Site ('Open Redirect') vulnerability in pkg:pypi/urllib3@1.26.0","name":"","tags":[],"full_description":"urllib3 is a user-friendly HTTP client library for Python. Prior to 2.5.0, it is possible to disable redirects for all requests by instantiating a PoolManager and specifying retries in a way that disable redirects. By default, requests and botocore users are not affected. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects at the PoolManager level will remain vulnerable. This issue has been patched in version 2.5.0.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2025-50181 for details","help":"\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html)."},"tool":{"name":"dependency-check","guid":null,"version":"12.1.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/qa-automation.yml:security-tests","environment":"{}","category":".github/workflows/qa-automation.yml:security-tests","state":"open","commit_sha":"e45d5477e7b4865a6b48dcbfb070f9da29e35a7c","message":{"text":"CVE-2025-50181 - urllib3 is a user-friendly HTTP client library for Python. Prior to 2.5.0, it is possible to disable redirects for all requests by instantiating a PoolManager and specifying retries in a way that disable redirects. By default, requests and botocore users are not affected. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects at the PoolManager level will remain vulnerable. This issue has been patched in version 2.5.0.\n\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2025-50181 for details"},"location":{"path":"file:///github/workspace/apps/backend/requirements.txt:urllib3/1.26.0","start_line":1,"end_line":1,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1423/instances","dismissal_approved_by":null},{"number":1422,"created_at":"2025-09-01T03:21:19Z","updated_at":"2025-09-01T03:21:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1422","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1422","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2021-33503","severity":"warning","description":"high severity - CVE-2021-33503 Uncontrolled Resource Consumption vulnerability in pkg:pypi/urllib3@1.26.0","name":"","tags":[],"full_description":"An issue was discovered in urllib3 before 1.26.5. When provided with a URL containing many @ characters in the authority component, the authority regular expression exhibits catastrophic backtracking, causing a denial of service if a URL were passed as a parameter or redirected to via an HTTP redirect.","help":"\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html).","security_severity_level":"high"},"tool":{"name":"dependency-check","guid":null,"version":"12.1.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/qa-automation.yml:security-tests","environment":"{}","category":".github/workflows/qa-automation.yml:security-tests","state":"open","commit_sha":"e45d5477e7b4865a6b48dcbfb070f9da29e35a7c","message":{"text":"CVE-2021-33503 - An issue was discovered in urllib3 before 1.26.5. When provided with a URL containing many @ characters in the authority component, the authority regular expression exhibits catastrophic backtracking, causing a denial of service if a URL were passed as a parameter or redirected to via an HTTP redirect."},"location":{"path":"file:///github/workspace/apps/backend/requirements.txt:urllib3/1.26.0","start_line":1,"end_line":1,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1422/instances","dismissal_approved_by":null},{"number":1421,"created_at":"2025-09-01T03:21:19Z","updated_at":"2025-09-01T03:21:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1421","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1421","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2023-43804","severity":"warning","description":"high severity - CVE-2023-43804 Exposure of Sensitive Information to an Unauthorized Actor vulnerability in pkg:pypi/urllib3@1.26.0","name":"","tags":[],"full_description":"urllib3 is a user-friendly HTTP client library for Python. urllib3 doesn't treat the `Cookie` HTTP header special or provide any helpers for managing cookies over HTTP, that is the responsibility of the user. However, it is possible for a user to specify a `Cookie` header and unknowingly leak information via HTTP redirects to a different origin if that user doesn't disable redirects explicitly. This issue has been patched in urllib3 version 1.26.17 or 2.0.5.","help":"\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://dependency-check.github.io/DependencyCheck/general/internals.html),[How to read the HTML report](https://dependency-check.github.io/DependencyCheck/general/thereport.html), and[Suppressing false positives](https://dependency-check.github.io/DependencyCheck/general/suppression.html).","security_severity_level":"high"},"tool":{"name":"dependency-check","guid":null,"version":"12.1.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/qa-automation.yml:security-tests","environment":"{}","category":".github/workflows/qa-automation.yml:security-tests","state":"open","commit_sha":"e45d5477e7b4865a6b48dcbfb070f9da29e35a7c","message":{"text":"CVE-2023-43804 - urllib3 is a user-friendly HTTP client library for Python. urllib3 doesn't treat the `Cookie` HTTP header special or provide any helpers for managing cookies over HTTP, that is the responsibility of the user. However, it is possible for a user to specify a `Cookie` header and unknowingly leak information via HTTP redirects to a different origin if that user doesn't disable redirects explicitly. This issue has been patched in urllib3 version 1.26.17 or 2.0.5."},"location":{"path":"file:///github/workspace/apps/backend/requirements.txt:urllib3/1.26.0","start_line":1,"end_line":1,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1421/instances","dismissal_approved_by":null},{"number":1420,"created_at":"2025-08-31T10:25:44Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1420","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1420","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Unused variable adultCases."},"location":{"path":"apps/frontend-nextjs/src/tests/educational/clinicalCasesQA.test.ts","start_line":264,"end_line":264,"start_column":13,"end_column":23},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1420/instances","dismissal_approved_by":null},{"number":1419,"created_at":"2025-08-31T10:25:44Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1419","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1419","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Unused imports CaseStep, ClinicalCase, StepInteraction."},"location":{"path":"apps/frontend-nextjs/src/tests/educational/clinicalCasesQA.test.ts","start_line":11,"end_line":11,"start_column":1,"end_column":81},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1419/instances","dismissal_approved_by":null},{"number":1418,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1418","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1418","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable metadata_json is not used."},"location":{"path":"apps/backend/services/rag/vector_store.py","start_line":360,"end_line":360,"start_column":13,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1418/instances","dismissal_approved_by":null},{"number":1417,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1417","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1417","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Variable response is not used."},"location":{"path":"tests/security/test_stack_trace_exposure.py","start_line":62,"end_line":62,"start_column":21,"end_column":29},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1417/instances","dismissal_approved_by":null},{"number":1416,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1416","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1416","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable response is not used."},"location":{"path":"archive/backup-20241230/tests_security/test_stack_trace_exposure.py","start_line":62,"end_line":62,"start_column":21,"end_column":29},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1416/instances","dismissal_approved_by":null},{"number":1415,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1415","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1415","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable response is not used."},"location":{"path":"backup/tests_security/test_stack_trace_exposure.py","start_line":62,"end_line":62,"start_column":21,"end_column":29},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1415/instances","dismissal_approved_by":null},{"number":1414,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1414","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1414","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable ops_per_sec is not used."},"location":{"path":"backup/tests_backend/test_performance_benchmarks.py","start_line":364,"end_line":364,"start_column":13,"end_column":24},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1414/instances","dismissal_approved_by":null},{"number":1413,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1413","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1413","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable ops_per_sec is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_performance_benchmarks.py","start_line":364,"end_line":364,"start_column":13,"end_column":24},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1413/instances","dismissal_approved_by":null},{"number":1412,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1412","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1412","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable result is not used."},"location":{"path":"backup/tests_backend/test_performance_benchmarks.py","start_line":187,"end_line":187,"start_column":13,"end_column":19},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1412/instances","dismissal_approved_by":null},{"number":1411,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1411","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1411","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable result is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_performance_benchmarks.py","start_line":187,"end_line":187,"start_column":13,"end_column":19},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1411/instances","dismissal_approved_by":null},{"number":1410,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1410","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1410","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable stats_after is not used."},"location":{"path":"scripts/migration/test_cache_system.py","start_line":52,"end_line":52,"start_column":9,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1410/instances","dismissal_approved_by":null},{"number":1409,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1409","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1409","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable stats_before is not used."},"location":{"path":"scripts/migration/test_cache_system.py","start_line":50,"end_line":50,"start_column":9,"end_column":21},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1409/instances","dismissal_approved_by":null},{"number":1408,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1408","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1408","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable encoded_message is not used."},"location":{"path":"backup/tests_integration/test_alert_system.py","start_line":144,"end_line":144,"start_column":9,"end_column":24},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1408/instances","dismissal_approved_by":null},{"number":1407,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1407","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1407","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable encoded_message is not used."},"location":{"path":"archive/backup-20241230/tests_integration/test_alert_system.py","start_line":144,"end_line":144,"start_column":9,"end_column":24},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1407/instances","dismissal_approved_by":null},{"number":1406,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1406","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1406","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Variable encoded_message is not used."},"location":{"path":"tests/integration/test_alert_system.py","start_line":144,"end_line":144,"start_column":9,"end_column":24},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1406/instances","dismissal_approved_by":null},{"number":1405,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1405","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1405","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable result is not used."},"location":{"path":"apps/backend/services/integrations/supabase_vector_store.py","start_line":91,"end_line":91,"start_column":13,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1405/instances","dismissal_approved_by":null},{"number":1404,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1404","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1404","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable result is not used."},"location":{"path":"tools/dev-environment/start_dev_environment.py","start_line":205,"end_line":205,"start_column":17,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1404/instances","dismissal_approved_by":null},{"number":1403,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1403","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1403","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Variable test_class is not used."},"location":{"path":"tests/qa-automation/simple_test_runner.py","start_line":89,"end_line":89,"start_column":13,"end_column":23},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1403/instances","dismissal_approved_by":null},{"number":1402,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1402","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1402","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable suggestions is not used."},"location":{"path":"apps/backend/simple_predictive_test.py","start_line":207,"end_line":207,"start_column":9,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1402/instances","dismissal_approved_by":null},{"number":1401,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1401","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1401","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Variable rapid_requests is not used."},"location":{"path":"tests/qa-automation/test_scenarios/security_validation.py","start_line":441,"end_line":441,"start_column":9,"end_column":23},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1401/instances","dismissal_approved_by":null},{"number":1400,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1400","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1400","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable data is not used."},"location":{"path":"scripts/migration/run_migration.py","start_line":33,"end_line":33,"start_column":13,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1400/instances","dismissal_approved_by":null},{"number":1399,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1399","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1399","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable response is not used."},"location":{"path":"tools/qa-validation/qa_validation_suite.py","start_line":258,"end_line":258,"start_column":21,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1399/instances","dismissal_approved_by":null},{"number":1398,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1398","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1398","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Variable failed_results is not used."},"location":{"path":"tests/qa-automation/test_scenarios/performance_load.py","start_line":240,"end_line":240,"start_column":9,"end_column":23},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1398/instances","dismissal_approved_by":null},{"number":1397,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1397","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1397","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable client is not used."},"location":{"path":"apps/backend/services/ai/openai_integration.py","start_line":33,"end_line":33,"start_column":9,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1397/instances","dismissal_approved_by":null},{"number":1396,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1396","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1396","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Variable has_scope_indication is not used."},"location":{"path":"tests/qa-automation/test_scenarios/medical_accuracy.py","start_line":623,"end_line":623,"start_column":37,"end_column":57},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1396/instances","dismissal_approved_by":null},{"number":1395,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1395","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1395","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Variable time2 is not used."},"location":{"path":"tests/qa-automation/test_scenarios/integration_e2e.py","start_line":335,"end_line":335,"start_column":21,"end_column":26},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1395/instances","dismissal_approved_by":null},{"number":1394,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1394","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1394","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Variable time1 is not used."},"location":{"path":"tests/qa-automation/test_scenarios/integration_e2e.py","start_line":327,"end_line":327,"start_column":21,"end_column":26},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1394/instances","dismissal_approved_by":null},{"number":1393,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1393","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1393","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable report is not used."},"location":{"path":"scripts/migration/init_embeddings.py","start_line":252,"end_line":252,"start_column":5,"end_column":11},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1393/instances","dismissal_approved_by":null},{"number":1392,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1392","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1392","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable metadata is not used."},"location":{"path":"scripts/migration/init_embeddings.py","start_line":143,"end_line":143,"start_column":37,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1392/instances","dismissal_approved_by":null},{"number":1391,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1391","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1391","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable window_start is not used."},"location":{"path":"apps/backend/core/performance/firestore_rate_limiter.py","start_line":93,"end_line":93,"start_column":9,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1391/instances","dismissal_approved_by":null},{"number":1390,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1390","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1390","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable test_chars is not used."},"location":{"path":"apps/backend/security-tests/final_security_validation.py","start_line":171,"end_line":171,"start_column":9,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1390/instances","dismissal_approved_by":null},{"number":1389,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1389","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1389","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable response is not used."},"location":{"path":"tools/diagnostics/diagnostic_ai_system.py","start_line":129,"end_line":129,"start_column":13,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1389/instances","dismissal_approved_by":null},{"number":1388,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1388","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1388","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable total_levels is not used."},"location":{"path":"apps/backend/services/cache/cloud_native_cache.py","start_line":174,"end_line":174,"start_column":9,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1388/instances","dismissal_approved_by":null},{"number":1387,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1387","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1387","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable success is not used."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":1250,"end_line":1250,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1387/instances","dismissal_approved_by":null},{"number":1386,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1386","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1386","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable ai_health is not used."},"location":{"path":"apps/backend/tasks/chat_tasks.py","start_line":403,"end_line":403,"start_column":17,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1386/instances","dismissal_approved_by":null},{"number":1385,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1385","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1385","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable config is not used."},"location":{"path":"apps/backend/tasks/chat_tasks.py","start_line":385,"end_line":385,"start_column":17,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1385/instances","dismissal_approved_by":null},{"number":1384,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1384","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1384","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable config is not used."},"location":{"path":"apps/backend/tasks/chat_tasks.py","start_line":51,"end_line":51,"start_column":9,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1384/instances","dismissal_approved_by":null},{"number":1383,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1383","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1383","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable ttl_enhanced is not used."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":481,"end_line":481,"start_column":13,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1383/instances","dismissal_approved_by":null},{"number":1382,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1382","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1382","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable config is not used."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":260,"end_line":260,"start_column":5,"end_column":11},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1382/instances","dismissal_approved_by":null},{"number":1381,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1381","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1381","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable analytics_collection is not used."},"location":{"path":"apps/backend/services/integrations/astra_setup_astrapy.py","start_line":183,"end_line":183,"start_column":17,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1381/instances","dismissal_approved_by":null},{"number":1380,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1380","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1380","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/undefined-export","severity":"error","description":"Explicit export is not defined","name":"py/undefined-export","tags":["correctness","quality","reliability"],"full_description":"Including an undefined attribute in `__all__` causes an exception when the module is imported using '*'","help":"# Explicit export is not defined\nWhen a module is imported using `import *`, all attributes listed in `__all__` are imported. If `__all__` includes attributes that are not defined in the module then an exception is triggered. This usually indicates a typographic error in the attributes in `__all__` or in the name of the object.\n\n\n## Recommendation\nCorrect any typographic errors, either in the name of the object or in the string in `__all__`. If there are no typographic errors, either delete the name from `__all__` or add the object to the module.\n\n\n## Example\nIn the example, the function name `spam` has been misspelled in the `__all__` list. This will result in `spamm` being highlighted as an undefined export. Correcting the spelling will fix the defect.\n\n\n```python\n__all__ = ['spamm', 'troll', 'paywall']\n\ndef spam(): return 'Spam'\ndef troll(): return 'Troll'\ndef paywall(): return 'Pay wall'\n\n```\n\n## References\n* Python Language Reference: [The import statement](http://docs.python.org/2/reference/simple_stmts.html#import).\n* Python Tutorial: [Importing \\* from a Package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"The name 'SemanticSearch' is exported by __all__ but is not defined."},"location":{"path":"apps/backend/services/rag/__init__.py","start_line":12,"end_line":12,"start_column":5,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1380/instances","dismissal_approved_by":null},{"number":1379,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1379","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1379","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/undefined-export","severity":"error","description":"Explicit export is not defined","name":"py/undefined-export","tags":["correctness","quality","reliability"],"full_description":"Including an undefined attribute in `__all__` causes an exception when the module is imported using '*'","help":"# Explicit export is not defined\nWhen a module is imported using `import *`, all attributes listed in `__all__` are imported. If `__all__` includes attributes that are not defined in the module then an exception is triggered. This usually indicates a typographic error in the attributes in `__all__` or in the name of the object.\n\n\n## Recommendation\nCorrect any typographic errors, either in the name of the object or in the string in `__all__`. If there are no typographic errors, either delete the name from `__all__` or add the object to the module.\n\n\n## Example\nIn the example, the function name `spam` has been misspelled in the `__all__` list. This will result in `spamm` being highlighted as an undefined export. Correcting the spelling will fix the defect.\n\n\n```python\n__all__ = ['spamm', 'troll', 'paywall']\n\ndef spam(): return 'Spam'\ndef troll(): return 'Troll'\ndef paywall(): return 'Pay wall'\n\n```\n\n## References\n* Python Language Reference: [The import statement](http://docs.python.org/2/reference/simple_stmts.html#import).\n* Python Tutorial: [Importing \\* from a Package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"The name 'VectorStore' is exported by __all__ but is not defined."},"location":{"path":"apps/backend/services/rag/__init__.py","start_line":11,"end_line":11,"start_column":5,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1379/instances","dismissal_approved_by":null},{"number":1378,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1378","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1378","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/undefined-export","severity":"error","description":"Explicit export is not defined","name":"py/undefined-export","tags":["correctness","quality","reliability"],"full_description":"Including an undefined attribute in `__all__` causes an exception when the module is imported using '*'","help":"# Explicit export is not defined\nWhen a module is imported using `import *`, all attributes listed in `__all__` are imported. If `__all__` includes attributes that are not defined in the module then an exception is triggered. This usually indicates a typographic error in the attributes in `__all__` or in the name of the object.\n\n\n## Recommendation\nCorrect any typographic errors, either in the name of the object or in the string in `__all__`. If there are no typographic errors, either delete the name from `__all__` or add the object to the module.\n\n\n## Example\nIn the example, the function name `spam` has been misspelled in the `__all__` list. This will result in `spamm` being highlighted as an undefined export. Correcting the spelling will fix the defect.\n\n\n```python\n__all__ = ['spamm', 'troll', 'paywall']\n\ndef spam(): return 'Spam'\ndef troll(): return 'Troll'\ndef paywall(): return 'Pay wall'\n\n```\n\n## References\n* Python Language Reference: [The import statement](http://docs.python.org/2/reference/simple_stmts.html#import).\n* Python Tutorial: [Importing \\* from a Package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"The name 'EmbeddingService' is exported by __all__ but is not defined."},"location":{"path":"apps/backend/services/rag/__init__.py","start_line":10,"end_line":10,"start_column":5,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1378/instances","dismissal_approved_by":null},{"number":1377,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1377","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1377","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/undefined-export","severity":"error","description":"Explicit export is not defined","name":"py/undefined-export","tags":["correctness","quality","reliability"],"full_description":"Including an undefined attribute in `__all__` causes an exception when the module is imported using '*'","help":"# Explicit export is not defined\nWhen a module is imported using `import *`, all attributes listed in `__all__` are imported. If `__all__` includes attributes that are not defined in the module then an exception is triggered. This usually indicates a typographic error in the attributes in `__all__` or in the name of the object.\n\n\n## Recommendation\nCorrect any typographic errors, either in the name of the object or in the string in `__all__`. If there are no typographic errors, either delete the name from `__all__` or add the object to the module.\n\n\n## Example\nIn the example, the function name `spam` has been misspelled in the `__all__` list. This will result in `spamm` being highlighted as an undefined export. Correcting the spelling will fix the defect.\n\n\n```python\n__all__ = ['spamm', 'troll', 'paywall']\n\ndef spam(): return 'Spam'\ndef troll(): return 'Troll'\ndef paywall(): return 'Pay wall'\n\n```\n\n## References\n* Python Language Reference: [The import statement](http://docs.python.org/2/reference/simple_stmts.html#import).\n* Python Tutorial: [Importing \\* from a Package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"The name 'RAGSystem' is exported by __all__ but is not defined."},"location":{"path":"apps/backend/services/rag/__init__.py","start_line":9,"end_line":9,"start_column":5,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1377/instances","dismissal_approved_by":null},{"number":1376,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1376","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1376","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/uninitialized-local-variable","severity":"error","description":"Potentially uninitialized local variable","name":"py/uninitialized-local-variable","tags":["correctness","reliability"],"full_description":"Using a local variable before it is initialized causes an UnboundLocalError.","help":"# Potentially uninitialized local variable\nThis local variable may be used before it is defined. If a variable is assigned to in a function and not explicitly declared `global` or `nonlocal` then it is assumed to be a local variable. If it is used before it is defined then an `UnboundLocalError` will be raised.\n\n\n## Recommendation\nReview the code and consider the intended scope of the variable. Determine whether the variable should be global or local in scope. If a global variable is required then add a `global` statement, or in Python 3 you can use a `nonlocal` statement if the variable occurs in an enclosing function. Otherwise, ensure that the variable is defined before it is used.\n\n\n## Example\nThe following code includes different functions that use variables. `test1()` fails with an `UnboundLocalError` because the local variable `var` is used before it is initialized.\n\n\n```python\ndef test():\n    var = 1 \n    def print_var():\n        print var      # Use variable from outer scope\n    print_var()\n    print var \n\n\ndef test1():\n    var = 2 \n    def print_var():\n        print var       # Attempt to use variable from local scope. \n        var = 3         # Since this is not initialized yet, this results\n    print_var()         # in an UnboundLocalError\n    print var \n\n\ndef test2():\n    var = 2 \n    def print_var():\n        var = 3         # Initialize local version of the variable\n        print var       # Use variable from local scope.\n    print_var()         # Note that this local variable \"shadows\" the variable from\n    print var           # outer scope which makes code more difficult to interpret.\n\n\ndef test3():\n    var = 4\n    def print_var():\n        nonlocal var    # Use non-local variable from outer scope.\n        print var\n    print_var()\n    print var\n```\n\n## References\n* Python Standard Library: [Built-in Exceptions: UnboundLocalError](http://docs.python.org/library/exceptions.html#exceptions.UnboundLocalError).\n* Python Frequently Asked Questions: [Why am I getting an UnboundLocalError when the variable has a value?](http://docs.python.org/2/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value).\n* Python Course: [Global and Local Variables](http://www.python-course.eu/global_vs_local_variables.php).\n* Python Language Reference: [The global statement](http://docs.python.org/2.7/reference/simple_stmts.html#index-54), [The nonlocal statement](http://docs.python.org/3.3/reference/simple_stmts.html#index-43).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Local variable 'config' may be used before it is initialized."},"location":{"path":"scripts/migration/test_semantic_simple.py","start_line":70,"end_line":70,"start_column":46,"end_column":52},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1376/instances","dismissal_approved_by":null},{"number":1375,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1375","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1375","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/uninitialized-local-variable","severity":"error","description":"Potentially uninitialized local variable","name":"py/uninitialized-local-variable","tags":["correctness","reliability"],"full_description":"Using a local variable before it is initialized causes an UnboundLocalError.","help":"# Potentially uninitialized local variable\nThis local variable may be used before it is defined. If a variable is assigned to in a function and not explicitly declared `global` or `nonlocal` then it is assumed to be a local variable. If it is used before it is defined then an `UnboundLocalError` will be raised.\n\n\n## Recommendation\nReview the code and consider the intended scope of the variable. Determine whether the variable should be global or local in scope. If a global variable is required then add a `global` statement, or in Python 3 you can use a `nonlocal` statement if the variable occurs in an enclosing function. Otherwise, ensure that the variable is defined before it is used.\n\n\n## Example\nThe following code includes different functions that use variables. `test1()` fails with an `UnboundLocalError` because the local variable `var` is used before it is initialized.\n\n\n```python\ndef test():\n    var = 1 \n    def print_var():\n        print var      # Use variable from outer scope\n    print_var()\n    print var \n\n\ndef test1():\n    var = 2 \n    def print_var():\n        print var       # Attempt to use variable from local scope. \n        var = 3         # Since this is not initialized yet, this results\n    print_var()         # in an UnboundLocalError\n    print var \n\n\ndef test2():\n    var = 2 \n    def print_var():\n        var = 3         # Initialize local version of the variable\n        print var       # Use variable from local scope.\n    print_var()         # Note that this local variable \"shadows\" the variable from\n    print var           # outer scope which makes code more difficult to interpret.\n\n\ndef test3():\n    var = 4\n    def print_var():\n        nonlocal var    # Use non-local variable from outer scope.\n        print var\n    print_var()\n    print var\n```\n\n## References\n* Python Standard Library: [Built-in Exceptions: UnboundLocalError](http://docs.python.org/library/exceptions.html#exceptions.UnboundLocalError).\n* Python Frequently Asked Questions: [Why am I getting an UnboundLocalError when the variable has a value?](http://docs.python.org/2/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value).\n* Python Course: [Global and Local Variables](http://www.python-course.eu/global_vs_local_variables.php).\n* Python Language Reference: [The global statement](http://docs.python.org/2.7/reference/simple_stmts.html#index-54), [The nonlocal statement](http://docs.python.org/3.3/reference/simple_stmts.html#index-43).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Local variable 'cache_key' may be used before it is initialized."},"location":{"path":"apps/backend/services/rag/supabase_rag_system.py","start_line":220,"end_line":220,"start_column":28,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1375/instances","dismissal_approved_by":null},{"number":1374,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1374","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1374","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/uninitialized-local-variable","severity":"error","description":"Potentially uninitialized local variable","name":"py/uninitialized-local-variable","tags":["correctness","reliability"],"full_description":"Using a local variable before it is initialized causes an UnboundLocalError.","help":"# Potentially uninitialized local variable\nThis local variable may be used before it is defined. If a variable is assigned to in a function and not explicitly declared `global` or `nonlocal` then it is assumed to be a local variable. If it is used before it is defined then an `UnboundLocalError` will be raised.\n\n\n## Recommendation\nReview the code and consider the intended scope of the variable. Determine whether the variable should be global or local in scope. If a global variable is required then add a `global` statement, or in Python 3 you can use a `nonlocal` statement if the variable occurs in an enclosing function. Otherwise, ensure that the variable is defined before it is used.\n\n\n## Example\nThe following code includes different functions that use variables. `test1()` fails with an `UnboundLocalError` because the local variable `var` is used before it is initialized.\n\n\n```python\ndef test():\n    var = 1 \n    def print_var():\n        print var      # Use variable from outer scope\n    print_var()\n    print var \n\n\ndef test1():\n    var = 2 \n    def print_var():\n        print var       # Attempt to use variable from local scope. \n        var = 3         # Since this is not initialized yet, this results\n    print_var()         # in an UnboundLocalError\n    print var \n\n\ndef test2():\n    var = 2 \n    def print_var():\n        var = 3         # Initialize local version of the variable\n        print var       # Use variable from local scope.\n    print_var()         # Note that this local variable \"shadows\" the variable from\n    print var           # outer scope which makes code more difficult to interpret.\n\n\ndef test3():\n    var = 4\n    def print_var():\n        nonlocal var    # Use non-local variable from outer scope.\n        print var\n    print_var()\n    print var\n```\n\n## References\n* Python Standard Library: [Built-in Exceptions: UnboundLocalError](http://docs.python.org/library/exceptions.html#exceptions.UnboundLocalError).\n* Python Frequently Asked Questions: [Why am I getting an UnboundLocalError when the variable has a value?](http://docs.python.org/2/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value).\n* Python Course: [Global and Local Variables](http://www.python-course.eu/global_vs_local_variables.php).\n* Python Language Reference: [The global statement](http://docs.python.org/2.7/reference/simple_stmts.html#index-54), [The nonlocal statement](http://docs.python.org/3.3/reference/simple_stmts.html#index-43).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Local variable 'personality_id' may be used before it is initialized."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":579,"end_line":579,"start_column":36,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1374/instances","dismissal_approved_by":null},{"number":1373,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1373","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1373","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-global-variable","severity":"note","description":"Unused global variable","name":"py/unused-global-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Global variable is defined but not used","help":"# Unused global variable\nA global (module-level) variable is defined (by an assignment) but never used and is not explicitly made public by inclusion in the `__all__` list.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to only remove the left hand side of the assignment in line 9.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\nrandom_no = write_random_to_file()\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements), [The import statement](http://docs.python.org/reference/simple_stmts.html#the-import-statement).\n* Python Tutorial: [Importing \\* from a package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"The global variable 'results' is not used."},"location":{"path":"backup/tests_backend/test_endpoints.py","start_line":103,"end_line":103,"start_column":9,"end_column":16},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1373/instances","dismissal_approved_by":null},{"number":1372,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1372","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1372","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-global-variable","severity":"note","description":"Unused global variable","name":"py/unused-global-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Global variable is defined but not used","help":"# Unused global variable\nA global (module-level) variable is defined (by an assignment) but never used and is not explicitly made public by inclusion in the `__all__` list.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to only remove the left hand side of the assignment in line 9.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\nrandom_no = write_random_to_file()\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements), [The import statement](http://docs.python.org/reference/simple_stmts.html#the-import-statement).\n* Python Tutorial: [Importing \\* from a package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"The global variable 'results' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_endpoints.py","start_line":103,"end_line":103,"start_column":9,"end_column":16},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1372/instances","dismissal_approved_by":null},{"number":1371,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1371","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1371","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/repeated-import","severity":"note","description":"Module is imported more than once","name":"py/repeated-import","tags":["maintainability","quality","useless-code"],"full_description":"Importing a module a second time has no effect and impairs readability","help":"# Module is imported more than once\nImporting the same module more than once has no effect as each module is only loaded once. It also confuses readers of the code.\n\n\n## Recommendation\nRemove the second import.\n\n\n## Example\n\n```python\nimport module1\nimport module2\nimport module1 # Duplicate import\n\n```\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This import of module re is redundant, as it was previously imported on line 615."},"location":{"path":"apps/backend/main.py","start_line":337,"end_line":337,"start_column":5,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1371/instances","dismissal_approved_by":null},{"number":1370,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1370","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1370","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/repeated-import","severity":"note","description":"Module is imported more than once","name":"py/repeated-import","tags":["maintainability","quality","useless-code"],"full_description":"Importing a module a second time has no effect and impairs readability","help":"# Module is imported more than once\nImporting the same module more than once has no effect as each module is only loaded once. It also confuses readers of the code.\n\n\n## Recommendation\nRemove the second import.\n\n\n## Example\n\n```python\nimport module1\nimport module2\nimport module1 # Duplicate import\n\n```\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This import of module re is redundant, as it was previously imported on line 615."},"location":{"path":"apps/backend/main.py","start_line":301,"end_line":301,"start_column":17,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1370/instances","dismissal_approved_by":null},{"number":1369,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1369","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1369","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/repeated-import","severity":"note","description":"Module is imported more than once","name":"py/repeated-import","tags":["maintainability","quality","useless-code"],"full_description":"Importing a module a second time has no effect and impairs readability","help":"# Module is imported more than once\nImporting the same module more than once has no effect as each module is only loaded once. It also confuses readers of the code.\n\n\n## Recommendation\nRemove the second import.\n\n\n## Example\n\n```python\nimport module1\nimport module2\nimport module1 # Duplicate import\n\n```\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This import of module re is redundant, as it was previously imported on line 615."},"location":{"path":"apps/backend/main.py","start_line":269,"end_line":269,"start_column":17,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1369/instances","dismissal_approved_by":null},{"number":1368,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1368","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1368","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/syntax-error","severity":"error","description":"Syntax error","name":"py/syntax-error","tags":["correctness","quality","reliability"],"full_description":"Syntax errors cause failures at runtime and prevent analysis of the code.","help":"# Syntax error\nSyntax errors prevent a module being evaluated and thus imported. An attempt to import a module with invalid syntax will fail; a `SyntaxError` will be raised.\n\nA common cause of syntax errors is the difference in syntax between Python 2 and Python 3. In particular, a syntax error may be alerted if a Python 3 file is assumed to be compatible with Python 2 (or vice versa). Explicitly specifying the expected Python version can help prevent this.\n\nThe existence of a syntax error in a module may suggest other problems as well. Either the module is never imported in practice and could be deleted or a `try` statement around the import is mistakenly discarding the `SyntaxError`.\n\n\n## Recommendation\nFixing the syntax error is the obvious fix. However, it is worth investigating why a module containing a syntax error was able to persist and address that problem as well.\n\nIf you suspect that the syntax error is caused by the analysis using the wrong version of Python, consider specifying the version explicitly. When you run code scanning using the CodeQL action, you can configure the Python version to use. For more information, see [Analyzing Python dependencies](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#analyzing-python-dependencies).\n\n\n## References\n* Python Tutorial: [SyntaxErrors.](http://docs.python.org/tutorial/errors.html#syntax-errors)\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Syntax Error (in Python 3)."},"location":{"path":"scripts/windows_encoding_fix.py","start_line":1,"end_line":1,"start_column":1,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1368/instances","dismissal_approved_by":null},{"number":1367,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1367","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1367","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Dict' is not used.\nImport of 'Any' is not used."},"location":{"path":"apps/backend/core/logging/windows_safe_logger.py","start_line":10,"end_line":10,"start_column":1,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1367/instances","dismissal_approved_by":null},{"number":1366,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1366","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1366","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used."},"location":{"path":"data/training/validate_data.py","start_line":12,"end_line":12,"start_column":1,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1366/instances","dismissal_approved_by":null},{"number":1365,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1365","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1365","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"data/training/validate_data.py","start_line":8,"end_line":8,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1365/instances","dismissal_approved_by":null},{"number":1364,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1364","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1364","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'SimpleStatement' is not used."},"location":{"path":"apps/backend/services/rag/vector_store.py","start_line":37,"end_line":37,"start_column":5,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1364/instances","dismissal_approved_by":null},{"number":1363,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1363","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1363","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'SUPABASE_AVAILABLE' is not used."},"location":{"path":"apps/backend/services/rag/vector_store.py","start_line":22,"end_line":22,"start_column":5,"end_column":87},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1363/instances","dismissal_approved_by":null},{"number":1362,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1362","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1362","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'hashlib' is not used."},"location":{"path":"apps/backend/services/rag/vector_store.py","start_line":10,"end_line":10,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1362/instances","dismissal_approved_by":null},{"number":1361,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1361","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1361","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/services/rag/vector_store.py","start_line":7,"end_line":7,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1361/instances","dismissal_approved_by":null},{"number":1360,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1360","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1360","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'importlib' is not used."},"location":{"path":"apps/backend/security-tests/validate_security_config.py","start_line":18,"end_line":18,"start_column":1,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1360/instances","dismissal_approved_by":null},{"number":1359,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1359","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1359","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used.\nImport of 'Tuple' is not used."},"location":{"path":"apps/backend/security-tests/validate_security_config.py","start_line":17,"end_line":17,"start_column":1,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1359/instances","dismissal_approved_by":null},{"number":1358,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1358","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1358","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used.\nImport of 'Optional' is not used.\nImport of 'Dict' is not used.\nImport of 'Any' is not used."},"location":{"path":"scripts/migration/test_supabase_integration.py","start_line":19,"end_line":19,"start_column":1,"end_column":45},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1358/instances","dismissal_approved_by":null},{"number":1357,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1357","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1357","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'asyncio' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_suite_complete.py","start_line":22,"end_line":22,"start_column":1,"end_column":15},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1357/instances","dismissal_approved_by":null},{"number":1356,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1356","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1356","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'MagicMock' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_suite_complete.py","start_line":21,"end_line":21,"start_column":1,"end_column":49},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1356/instances","dismissal_approved_by":null},{"number":1355,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1355","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1355","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used.\nImport of 'Dict' is not used.\nImport of 'Any' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_suite_complete.py","start_line":20,"end_line":20,"start_column":1,"end_column":35},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1355/instances","dismissal_approved_by":null},{"number":1354,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1354","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1354","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'requests' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_suite_complete.py","start_line":17,"end_line":17,"start_column":1,"end_column":16},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1354/instances","dismissal_approved_by":null},{"number":1353,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1353","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1353","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'pytest' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_suite_complete.py","start_line":12,"end_line":12,"start_column":1,"end_column":14},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1353/instances","dismissal_approved_by":null},{"number":1352,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1352","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1352","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'asyncio' is not used."},"location":{"path":"backup/tests_backend/test_suite_complete.py","start_line":22,"end_line":22,"start_column":1,"end_column":15},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1352/instances","dismissal_approved_by":null},{"number":1351,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1351","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1351","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'MagicMock' is not used."},"location":{"path":"backup/tests_backend/test_suite_complete.py","start_line":21,"end_line":21,"start_column":1,"end_column":49},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1351/instances","dismissal_approved_by":null},{"number":1350,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1350","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1350","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used.\nImport of 'Dict' is not used.\nImport of 'Any' is not used."},"location":{"path":"backup/tests_backend/test_suite_complete.py","start_line":20,"end_line":20,"start_column":1,"end_column":35},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1350/instances","dismissal_approved_by":null},{"number":1349,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1349","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1349","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'requests' is not used."},"location":{"path":"backup/tests_backend/test_suite_complete.py","start_line":17,"end_line":17,"start_column":1,"end_column":16},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1349/instances","dismissal_approved_by":null},{"number":1348,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1348","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1348","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'pytest' is not used."},"location":{"path":"backup/tests_backend/test_suite_complete.py","start_line":12,"end_line":12,"start_column":1,"end_column":14},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1348/instances","dismissal_approved_by":null},{"number":1347,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1347","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1347","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'MagicMock' is not used."},"location":{"path":"tests/security/test_stack_trace_exposure.py","start_line":12,"end_line":12,"start_column":1,"end_column":43},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1347/instances","dismissal_approved_by":null},{"number":1346,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1346","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1346","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'sys' is not used."},"location":{"path":"tests/security/test_stack_trace_exposure.py","start_line":11,"end_line":11,"start_column":1,"end_column":11},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1346/instances","dismissal_approved_by":null},{"number":1345,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1345","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1345","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'MagicMock' is not used."},"location":{"path":"archive/backup-20241230/tests_security/test_stack_trace_exposure.py","start_line":12,"end_line":12,"start_column":1,"end_column":43},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1345/instances","dismissal_approved_by":null},{"number":1344,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1344","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1344","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'sys' is not used."},"location":{"path":"archive/backup-20241230/tests_security/test_stack_trace_exposure.py","start_line":11,"end_line":11,"start_column":1,"end_column":11},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1344/instances","dismissal_approved_by":null},{"number":1343,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1343","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1343","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'MagicMock' is not used."},"location":{"path":"backup/tests_security/test_stack_trace_exposure.py","start_line":12,"end_line":12,"start_column":1,"end_column":43},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1343/instances","dismissal_approved_by":null},{"number":1342,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1342","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1342","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'sys' is not used."},"location":{"path":"backup/tests_security/test_stack_trace_exposure.py","start_line":11,"end_line":11,"start_column":1,"end_column":11},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1342/instances","dismissal_approved_by":null},{"number":1341,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1341","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1341","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'SemanticSearchEngine' is not used."},"location":{"path":"scripts/migration/test_semantic_search.py","start_line":21,"end_line":21,"start_column":1,"end_column":58},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1341/instances","dismissal_approved_by":null},{"number":1340,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1340","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1340","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'timedelta' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_security_validation.py","start_line":18,"end_line":18,"start_column":1,"end_column":41},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1340/instances","dismissal_approved_by":null},{"number":1339,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1339","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1339","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_security_validation.py","start_line":17,"end_line":17,"start_column":1,"end_column":35},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1339/instances","dismissal_approved_by":null},{"number":1338,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1338","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1338","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'time' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_security_validation.py","start_line":15,"end_line":15,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1338/instances","dismissal_approved_by":null},{"number":1337,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1337","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1337","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'secrets' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_security_validation.py","start_line":14,"end_line":14,"start_column":1,"end_column":15},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1337/instances","dismissal_approved_by":null},{"number":1336,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1336","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1336","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'hashlib' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_security_validation.py","start_line":13,"end_line":13,"start_column":1,"end_column":15},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1336/instances","dismissal_approved_by":null},{"number":1335,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1335","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1335","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 're' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_security_validation.py","start_line":12,"end_line":12,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1335/instances","dismissal_approved_by":null},{"number":1334,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1334","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1334","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_security_validation.py","start_line":9,"end_line":9,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1334/instances","dismissal_approved_by":null},{"number":1333,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1333","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1333","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'timedelta' is not used."},"location":{"path":"backup/tests_backend/test_security_validation.py","start_line":18,"end_line":18,"start_column":1,"end_column":41},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1333/instances","dismissal_approved_by":null},{"number":1332,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1332","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1332","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used."},"location":{"path":"backup/tests_backend/test_security_validation.py","start_line":17,"end_line":17,"start_column":1,"end_column":35},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1332/instances","dismissal_approved_by":null},{"number":1331,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1331","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1331","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'time' is not used."},"location":{"path":"backup/tests_backend/test_security_validation.py","start_line":15,"end_line":15,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1331/instances","dismissal_approved_by":null},{"number":1330,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1330","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1330","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'secrets' is not used."},"location":{"path":"backup/tests_backend/test_security_validation.py","start_line":14,"end_line":14,"start_column":1,"end_column":15},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1330/instances","dismissal_approved_by":null},{"number":1329,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1329","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1329","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'hashlib' is not used."},"location":{"path":"backup/tests_backend/test_security_validation.py","start_line":13,"end_line":13,"start_column":1,"end_column":15},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1329/instances","dismissal_approved_by":null},{"number":1328,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1328","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1328","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 're' is not used."},"location":{"path":"backup/tests_backend/test_security_validation.py","start_line":12,"end_line":12,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1328/instances","dismissal_approved_by":null},{"number":1327,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1327","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1327","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"backup/tests_backend/test_security_validation.py","start_line":9,"end_line":9,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1327/instances","dismissal_approved_by":null},{"number":1326,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1326","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1326","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 're' is not used."},"location":{"path":"backup/tests_backend/test_security_simple.py","start_line":12,"end_line":12,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1326/instances","dismissal_approved_by":null},{"number":1325,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1325","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1325","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"backup/tests_backend/test_security_simple.py","start_line":9,"end_line":9,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1325/instances","dismissal_approved_by":null},{"number":1324,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1324","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1324","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 're' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_security_simple.py","start_line":12,"end_line":12,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1324/instances","dismissal_approved_by":null},{"number":1323,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1323","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1323","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_security_simple.py","start_line":9,"end_line":9,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1323/instances","dismissal_approved_by":null},{"number":1322,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1322","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1322","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"archive/backup-20241230/tests_integration/test_scope_detection.py","start_line":12,"end_line":12,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1322/instances","dismissal_approved_by":null},{"number":1321,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1321","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1321","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"backup/tests_integration/test_scope_detection.py","start_line":12,"end_line":12,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1321/instances","dismissal_approved_by":null},{"number":1320,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1320","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1320","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'json' is not used."},"location":{"path":"tests/integration/test_scope_detection.py","start_line":12,"end_line":12,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1320/instances","dismissal_approved_by":null},{"number":1319,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1319","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1319","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"archive/backup-20241230/tests_integration/test_scientific_validation.py","start_line":15,"end_line":15,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1319/instances","dismissal_approved_by":null},{"number":1318,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1318","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1318","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'json' is not used."},"location":{"path":"tests/integration/test_scientific_validation.py","start_line":15,"end_line":15,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1318/instances","dismissal_approved_by":null},{"number":1317,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1317","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1317","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"backup/tests_integration/test_scientific_validation.py","start_line":15,"end_line":15,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1317/instances","dismissal_approved_by":null},{"number":1316,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1316","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1316","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 're' is not used."},"location":{"path":"archive/backup-20241230/tests_integration/development/test_rigorous_criteria.py","start_line":17,"end_line":17,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1316/instances","dismissal_approved_by":null},{"number":1315,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1315","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1315","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"archive/backup-20241230/tests_integration/development/test_rigorous_criteria.py","start_line":13,"end_line":13,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1315/instances","dismissal_approved_by":null},{"number":1314,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1314","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1314","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 're' is not used."},"location":{"path":"backup/tests_integration/development/test_rigorous_criteria.py","start_line":17,"end_line":17,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1314/instances","dismissal_approved_by":null},{"number":1313,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1313","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1313","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"backup/tests_integration/development/test_rigorous_criteria.py","start_line":13,"end_line":13,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1313/instances","dismissal_approved_by":null},{"number":1312,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1312","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1312","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'PredictionRule' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_predictive_system.py","start_line":21,"end_line":24,"start_column":1,"end_column":2},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1312/instances","dismissal_approved_by":null},{"number":1311,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1311","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1311","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_predictive_system.py","start_line":10,"end_line":10,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1311/instances","dismissal_approved_by":null},{"number":1310,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1310","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1310","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_predictive_system.py","start_line":8,"end_line":8,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1310/instances","dismissal_approved_by":null},{"number":1309,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1309","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1309","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'PredictionRule' is not used."},"location":{"path":"backup/tests_backend/test_predictive_system.py","start_line":21,"end_line":24,"start_column":1,"end_column":2},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1309/instances","dismissal_approved_by":null},{"number":1308,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1308","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1308","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"backup/tests_backend/test_predictive_system.py","start_line":10,"end_line":10,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1308/instances","dismissal_approved_by":null},{"number":1307,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1307","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1307","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"backup/tests_backend/test_predictive_system.py","start_line":8,"end_line":8,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1307/instances","dismissal_approved_by":null},{"number":1306,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1306","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1306","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 're' is not used."},"location":{"path":"backup/tests_integration/test_persona_coherence.py","start_line":16,"end_line":16,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1306/instances","dismissal_approved_by":null},{"number":1305,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1305","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1305","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"backup/tests_integration/test_persona_coherence.py","start_line":12,"end_line":12,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1305/instances","dismissal_approved_by":null},{"number":1304,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1304","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1304","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 're' is not used."},"location":{"path":"tests/integration/test_persona_coherence.py","start_line":16,"end_line":16,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1304/instances","dismissal_approved_by":null},{"number":1303,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1303","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1303","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'json' is not used."},"location":{"path":"tests/integration/test_persona_coherence.py","start_line":12,"end_line":12,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1303/instances","dismissal_approved_by":null},{"number":1302,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1302","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1302","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 're' is not used."},"location":{"path":"archive/backup-20241230/tests_integration/test_persona_coherence.py","start_line":16,"end_line":16,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1302/instances","dismissal_approved_by":null},{"number":1301,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1301","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1301","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"archive/backup-20241230/tests_integration/test_persona_coherence.py","start_line":12,"end_line":12,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1301/instances","dismissal_approved_by":null},{"number":1300,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1300","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1300","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'np' is not used."},"location":{"path":"backup/tests_backend/test_multimodal_system.py","start_line":25,"end_line":25,"start_column":5,"end_column":23},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1300/instances","dismissal_approved_by":null},{"number":1299,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1299","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1299","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'datetime' is not used."},"location":{"path":"backup/tests_backend/test_multimodal_system.py","start_line":15,"end_line":15,"start_column":1,"end_column":30},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1299/instances","dismissal_approved_by":null},{"number":1298,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1298","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1298","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"backup/tests_backend/test_multimodal_system.py","start_line":11,"end_line":11,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1298/instances","dismissal_approved_by":null},{"number":1297,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1297","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1297","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'np' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_multimodal_system.py","start_line":25,"end_line":25,"start_column":5,"end_column":23},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1297/instances","dismissal_approved_by":null},{"number":1296,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1296","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1296","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'datetime' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_multimodal_system.py","start_line":15,"end_line":15,"start_column":1,"end_column":30},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1296/instances","dismissal_approved_by":null},{"number":1295,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1295","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1295","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_multimodal_system.py","start_line":11,"end_line":11,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1295/instances","dismissal_approved_by":null},{"number":1294,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1294","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1294","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Dict' is not used.\nImport of 'Any' is not used."},"location":{"path":"backup/tests_backend/test_migration_dry_run.py","start_line":14,"end_line":14,"start_column":1,"end_column":35},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1294/instances","dismissal_approved_by":null},{"number":1293,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1293","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1293","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'logging' is not used."},"location":{"path":"backup/tests_backend/test_migration_dry_run.py","start_line":12,"end_line":12,"start_column":1,"end_column":15},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1293/instances","dismissal_approved_by":null},{"number":1292,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1292","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1292","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"backup/tests_backend/test_migration_dry_run.py","start_line":9,"end_line":9,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1292/instances","dismissal_approved_by":null},{"number":1291,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1291","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1291","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Dict' is not used.\nImport of 'Any' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_migration_dry_run.py","start_line":14,"end_line":14,"start_column":1,"end_column":35},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1291/instances","dismissal_approved_by":null},{"number":1290,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1290","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1290","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'logging' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_migration_dry_run.py","start_line":12,"end_line":12,"start_column":1,"end_column":15},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1290/instances","dismissal_approved_by":null},{"number":1289,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1289","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1289","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_migration_dry_run.py","start_line":9,"end_line":9,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1289/instances","dismissal_approved_by":null},{"number":1288,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1288","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1288","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"archive/backup-20241230/tests_integration/test_medical_protocols.py","start_line":12,"end_line":12,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1288/instances","dismissal_approved_by":null},{"number":1287,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1287","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1287","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'json' is not used."},"location":{"path":"tests/integration/test_medical_protocols.py","start_line":12,"end_line":12,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1287/instances","dismissal_approved_by":null},{"number":1286,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1286","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1286","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"backup/tests_integration/test_medical_protocols.py","start_line":12,"end_line":12,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1286/instances","dismissal_approved_by":null},{"number":1285,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1285","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1285","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'MagicMock' is not used."},"location":{"path":"archive/backup-20241230/tests_security/test_log_injection_prevention.py","start_line":13,"end_line":13,"start_column":1,"end_column":43},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1285/instances","dismissal_approved_by":null},{"number":1284,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1284","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1284","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'MagicMock' is not used."},"location":{"path":"tests/security/test_log_injection_prevention.py","start_line":13,"end_line":13,"start_column":1,"end_column":43},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1284/instances","dismissal_approved_by":null},{"number":1283,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1283","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1283","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'Mock' is not used.\nImport of 'patch' is not used."},"location":{"path":"tests/security/test_log_injection_fix.py","start_line":12,"end_line":12,"start_column":1,"end_column":38},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1283/instances","dismissal_approved_by":null},{"number":1282,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1282","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1282","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'MagicMock' is not used."},"location":{"path":"backup/tests_security/test_log_injection_prevention.py","start_line":13,"end_line":13,"start_column":1,"end_column":43},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1282/instances","dismissal_approved_by":null},{"number":1281,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1281","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1281","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'subprocess' is not used."},"location":{"path":"archive/backup-20241230/tests_integration/test_frontend_build.py","start_line":9,"end_line":9,"start_column":1,"end_column":18},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1281/instances","dismissal_approved_by":null},{"number":1280,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1280","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1280","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'subprocess' is not used."},"location":{"path":"tests/integration/test_frontend_build.py","start_line":9,"end_line":9,"start_column":1,"end_column":18},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1280/instances","dismissal_approved_by":null},{"number":1279,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1279","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1279","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'subprocess' is not used."},"location":{"path":"backup/tests_integration/test_frontend_build.py","start_line":9,"end_line":9,"start_column":1,"end_column":18},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1279/instances","dismissal_approved_by":null},{"number":1278,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1278","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1278","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 're' is not used."},"location":{"path":"backup/tests_integration/development/test_flexible_criteria.py","start_line":17,"end_line":17,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1278/instances","dismissal_approved_by":null},{"number":1277,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1277","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1277","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"backup/tests_integration/development/test_flexible_criteria.py","start_line":13,"end_line":13,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1277/instances","dismissal_approved_by":null},{"number":1276,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1276","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1276","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 're' is not used."},"location":{"path":"archive/backup-20241230/tests_integration/development/test_flexible_criteria.py","start_line":17,"end_line":17,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1276/instances","dismissal_approved_by":null},{"number":1275,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1275","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1275","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"archive/backup-20241230/tests_integration/development/test_flexible_criteria.py","start_line":13,"end_line":13,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1275/instances","dismissal_approved_by":null},{"number":1274,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1274","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1274","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"archive/backup-20241230/tests_integration/test_error_handling.py","start_line":9,"end_line":9,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1274/instances","dismissal_approved_by":null},{"number":1273,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1273","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1273","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'json' is not used."},"location":{"path":"tests/integration/test_error_handling.py","start_line":9,"end_line":9,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1273/instances","dismissal_approved_by":null},{"number":1272,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1272","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1272","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"backup/tests_integration/test_error_handling.py","start_line":9,"end_line":9,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1272/instances","dismissal_approved_by":null},{"number":1271,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1271","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1271","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"backup/tests_backend/test_endpoints.py","start_line":8,"end_line":8,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1271/instances","dismissal_approved_by":null},{"number":1270,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1270","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1270","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"archive/backup-20241230/tests_backend/test_endpoints.py","start_line":8,"end_line":8,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1270/instances","dismissal_approved_by":null},{"number":1269,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1269","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1269","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'asyncio' is not used."},"location":{"path":"scripts/migration/test_cache_system.py","start_line":9,"end_line":9,"start_column":1,"end_column":15},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1269/instances","dismissal_approved_by":null},{"number":1268,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1268","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1268","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'List' is not used.\nImport of 'Optional' is not used."},"location":{"path":"tests/integration/test_backend_frontend.py","start_line":17,"end_line":17,"start_column":1,"end_column":45},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1268/instances","dismissal_approved_by":null},{"number":1267,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1267","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1267","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used.\nImport of 'Optional' is not used."},"location":{"path":"archive/backup-20241230/tests_integration/test_backend_frontend.py","start_line":17,"end_line":17,"start_column":1,"end_column":45},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1267/instances","dismissal_approved_by":null},{"number":1266,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1266","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1266","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used.\nImport of 'Optional' is not used."},"location":{"path":"backup/tests_integration/test_backend_frontend.py","start_line":17,"end_line":17,"start_column":1,"end_column":45},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1266/instances","dismissal_approved_by":null},{"number":1265,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1265","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1265","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"backup/tests_integration/test_alert_system.py","start_line":28,"end_line":28,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1265/instances","dismissal_approved_by":null},{"number":1264,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1264","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1264","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"archive/backup-20241230/tests_integration/test_alert_system.py","start_line":28,"end_line":28,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1264/instances","dismissal_approved_by":null},{"number":1263,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1263","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1263","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'json' is not used."},"location":{"path":"tests/integration/test_alert_system.py","start_line":28,"end_line":28,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1263/instances","dismissal_approved_by":null},{"number":1262,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1262","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1262","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Tuple' is not used.\nImport of 'Optional' is not used."},"location":{"path":"system_audit.py","start_line":15,"end_line":15,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1262/instances","dismissal_approved_by":null},{"number":1261,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1261","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1261","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'sys' is not used."},"location":{"path":"system_audit.py","start_line":12,"end_line":12,"start_column":1,"end_column":11},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1261/instances","dismissal_approved_by":null},{"number":1260,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1260","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1260","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'hashlib' is not used."},"location":{"path":"system_audit.py","start_line":11,"end_line":11,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1260/instances","dismissal_approved_by":null},{"number":1259,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1259","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1259","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"system_audit.py","start_line":8,"end_line":8,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1259/instances","dismissal_approved_by":null},{"number":1258,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1258","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1258","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'psycopg2' is not used."},"location":{"path":"apps/backend/services/integrations/supabase_vector_store.py","start_line":23,"end_line":23,"start_column":5,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1258/instances","dismissal_approved_by":null},{"number":1257,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1257","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1257","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Path' is not used."},"location":{"path":"apps/backend/services/integrations/supabase_vector_store.py","start_line":13,"end_line":13,"start_column":1,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1257/instances","dismissal_approved_by":null},{"number":1256,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1256","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1256","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/services/integrations/supabase_vector_store.py","start_line":8,"end_line":8,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1256/instances","dismissal_approved_by":null},{"number":1255,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1255","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1255","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/services/integrations/supabase_vector_store.py","start_line":7,"end_line":7,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1255/instances","dismissal_approved_by":null},{"number":1254,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1254","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1254","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'is_openrouter_available' is not used."},"location":{"path":"apps/backend/services/rag/supabase_rag_system.py","start_line":31,"end_line":31,"start_column":5,"end_column":91},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1254/instances","dismissal_approved_by":null},{"number":1253,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1253","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1253","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'ChunkPriority' is not used."},"location":{"path":"apps/backend/services/rag/supabase_rag_system.py","start_line":23,"end_line":23,"start_column":5,"end_column":70},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1253/instances","dismissal_approved_by":null},{"number":1252,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1252","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1252","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'CloudNativeCache' is not used."},"location":{"path":"apps/backend/services/rag/supabase_rag_system.py","start_line":22,"end_line":22,"start_column":5,"end_column":78},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1252/instances","dismissal_approved_by":null},{"number":1251,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1251","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1251","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'SupabaseVectorStore' is not used.\nImport of 'VectorDocument' is not used."},"location":{"path":"apps/backend/services/rag/supabase_rag_system.py","start_line":20,"end_line":20,"start_column":5,"end_column":101},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1251/instances","dismissal_approved_by":null},{"number":1250,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1250","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1250","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'np' is not used."},"location":{"path":"apps/backend/services/rag/supabase_rag_system.py","start_line":14,"end_line":14,"start_column":1,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1250/instances","dismissal_approved_by":null},{"number":1249,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1249","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1249","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/services/rag/supabase_rag_system.py","start_line":8,"end_line":8,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1249/instances","dismissal_approved_by":null},{"number":1248,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1248","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1248","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/services/rag/supabase_rag_system.py","start_line":7,"end_line":7,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1248/instances","dismissal_approved_by":null},{"number":1247,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1247","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1247","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'datetime' is not used."},"location":{"path":"scripts/migration/simple_test.py","start_line":10,"end_line":10,"start_column":1,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1247/instances","dismissal_approved_by":null},{"number":1246,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1246","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1246","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"scripts/migration/simple_test.py","start_line":9,"end_line":9,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1246/instances","dismissal_approved_by":null},{"number":1245,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1245","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1245","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/simple_predictive_test.py","start_line":8,"end_line":8,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1245/instances","dismissal_approved_by":null},{"number":1244,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1244","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1244","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'ChunkPriority' is not used."},"location":{"path":"apps/backend/services/rag/semantic_search.py","start_line":27,"end_line":27,"start_column":5,"end_column":70},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1244/instances","dismissal_approved_by":null},{"number":1243,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1243","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1243","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Union' is not used."},"location":{"path":"apps/backend/services/rag/semantic_search.py","start_line":10,"end_line":10,"start_column":1,"end_column":59},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1243/instances","dismissal_approved_by":null},{"number":1242,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1242","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1242","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'json' is not used."},"location":{"path":"tests/qa-automation/test_scenarios/security_validation.py","start_line":25,"end_line":25,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1242/instances","dismissal_approved_by":null},{"number":1241,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1241","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1241","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'List' is not used.\nImport of 'Optional' is not used."},"location":{"path":"tests/qa-automation/test_scenarios/security_validation.py","start_line":24,"end_line":24,"start_column":1,"end_column":45},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1241/instances","dismissal_approved_by":null},{"number":1240,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1240","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1240","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"scripts/automation/security_issues_safe.py","start_line":10,"end_line":10,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1240/instances","dismissal_approved_by":null},{"number":1239,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1239","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1239","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used."},"location":{"path":"apps/backend/services/integrations/scope_detection_system.py","start_line":7,"end_line":7,"start_column":1,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1239/instances","dismissal_approved_by":null},{"number":1238,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1238","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1238","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 're' is not used."},"location":{"path":"apps/backend/services/integrations/scope_detection_system.py","start_line":6,"end_line":6,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1238/instances","dismissal_approved_by":null},{"number":1237,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1237","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1237","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'json' is not used."},"location":{"path":"tests/qa-automation/run_tests_with_secrets.py","start_line":17,"end_line":17,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1237/instances","dismissal_approved_by":null},{"number":1236,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1236","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1236","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Path' is not used."},"location":{"path":"scripts/migration/run_migration_with_gh_cli.py","start_line":12,"end_line":12,"start_column":1,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1236/instances","dismissal_approved_by":null},{"number":1235,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1235","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1235","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"archive/backup-20241230/tests_integration/run_full_scientific_validation.py","start_line":14,"end_line":14,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1235/instances","dismissal_approved_by":null},{"number":1234,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1234","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1234","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"backup/tests_integration/run_full_scientific_validation.py","start_line":14,"end_line":14,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1234/instances","dismissal_approved_by":null},{"number":1233,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1233","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1233","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'json' is not used."},"location":{"path":"tests/integration/run_full_scientific_validation.py","start_line":14,"end_line":14,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1233/instances","dismissal_approved_by":null},{"number":1232,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1232","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1232","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Optional' is not used.\nImport of 'Dict' is not used."},"location":{"path":"tools/security/run-security-checks.py","start_line":32,"end_line":32,"start_column":1,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1232/instances","dismissal_approved_by":null},{"number":1231,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1231","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1231","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"tools/security/run-security-checks.py","start_line":26,"end_line":26,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1231/instances","dismissal_approved_by":null},{"number":1230,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1230","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1230","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'Optional' is not used."},"location":{"path":"tests/qa-automation/utils/report_generator.py","start_line":18,"end_line":18,"start_column":1,"end_column":45},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1230/instances","dismissal_approved_by":null},{"number":1229,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1229","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1229","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'timedelta' is not used."},"location":{"path":"tests/qa-automation/utils/report_generator.py","start_line":17,"end_line":17,"start_column":1,"end_column":41},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1229/instances","dismissal_approved_by":null},{"number":1228,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1228","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1228","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'asyncio' is not used."},"location":{"path":"tests/qa-automation/utils/report_generator.py","start_line":15,"end_line":15,"start_column":1,"end_column":15},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1228/instances","dismissal_approved_by":null},{"number":1227,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1227","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1227","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'json' is not used."},"location":{"path":"tests/qa-automation/utils/report_generator.py","start_line":14,"end_line":14,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1227/instances","dismissal_approved_by":null},{"number":1226,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1226","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1226","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'os' is not used."},"location":{"path":"tests/qa-automation/utils/report_generator.py","start_line":13,"end_line":13,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1226/instances","dismissal_approved_by":null},{"number":1225,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1225","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1225","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'threading' is not used."},"location":{"path":"tools/qa-validation/qa_validation_suite.py","start_line":16,"end_line":16,"start_column":1,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1225/instances","dismissal_approved_by":null},{"number":1224,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1224","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1224","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'concurrent' is not used."},"location":{"path":"tools/qa-validation/qa_validation_suite.py","start_line":15,"end_line":15,"start_column":1,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1224/instances","dismissal_approved_by":null},{"number":1223,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1223","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1223","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used.\nImport of 'Tuple' is not used.\nImport of 'Any' is not used."},"location":{"path":"tools/qa-validation/qa_validation_suite.py","start_line":14,"end_line":14,"start_column":1,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1223/instances","dismissal_approved_by":null},{"number":1222,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1222","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1222","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'asdict' is not used."},"location":{"path":"apps/backend/services/integrations/predictive_system.py","start_line":16,"end_line":16,"start_column":1,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1222/instances","dismissal_approved_by":null},{"number":1221,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1221","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1221","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/services/integrations/predictive_system.py","start_line":9,"end_line":9,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1221/instances","dismissal_approved_by":null},{"number":1220,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1220","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1220","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'os' is not used."},"location":{"path":"tests/qa-automation/test_scenarios/performance_load.py","start_line":25,"end_line":25,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1220/instances","dismissal_approved_by":null},{"number":1219,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1219","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1219","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'List' is not used.\nImport of 'Optional' is not used."},"location":{"path":"tests/qa-automation/test_scenarios/performance_load.py","start_line":23,"end_line":23,"start_column":1,"end_column":45},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1219/instances","dismissal_approved_by":null},{"number":1218,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1218","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1218","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'httpx' is not used."},"location":{"path":"apps/backend/services/ai/openai_integration.py","start_line":14,"end_line":14,"start_column":5,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1218/instances","dismissal_approved_by":null},{"number":1217,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1217","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1217","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used.\nImport of 'Dict' is not used.\nImport of 'Any' is not used."},"location":{"path":"apps/backend/blueprints/observability.py","start_line":11,"end_line":11,"start_column":1,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1217/instances","dismissal_approved_by":null},{"number":1216,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1216","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1216","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'ImageDraw' is not used.\nImport of 'ImageFont' is not used."},"location":{"path":"apps/backend/services/integrations/multimodal_processor.py","start_line":24,"end_line":24,"start_column":5,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1216/instances","dismissal_approved_by":null},{"number":1215,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1215","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1215","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'np' is not used."},"location":{"path":"apps/backend/services/integrations/multimodal_processor.py","start_line":23,"end_line":23,"start_column":5,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1215/instances","dismissal_approved_by":null},{"number":1214,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1214","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1214","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'MIMEMultipart' is not used."},"location":{"path":"apps/backend/core/security/monitoring.py","start_line":40,"end_line":40,"start_column":1,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1214/instances","dismissal_approved_by":null},{"number":1213,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1213","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1213","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'MIMEText' is not used."},"location":{"path":"apps/backend/core/security/monitoring.py","start_line":39,"end_line":39,"start_column":1,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1213/instances","dismissal_approved_by":null},{"number":1212,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1212","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1212","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'smtplib' is not used."},"location":{"path":"apps/backend/core/security/monitoring.py","start_line":38,"end_line":38,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1212/instances","dismissal_approved_by":null},{"number":1211,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1211","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1211","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'ChunkPriority' is not used."},"location":{"path":"scripts/migration/migrate_json_to_supabase.py","start_line":28,"end_line":28,"start_column":1,"end_column":68},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1211/instances","dismissal_approved_by":null},{"number":1210,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1210","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1210","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Any' is not used."},"location":{"path":"scripts/migration/migrate_json_to_supabase.py","start_line":14,"end_line":14,"start_column":1,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1210/instances","dismissal_approved_by":null},{"number":1209,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1209","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1209","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'get_vector_store' is not used.\nImport of 'is_vector_store_available' is not used."},"location":{"path":"apps/backend/services/integrations/migrate_to_astra.py","start_line":26,"end_line":29,"start_column":1,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1209/instances","dismissal_approved_by":null},{"number":1208,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1208","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1208","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Tuple' is not used.\nImport of 'Optional' is not used.\nImport of 'Dict' is not used."},"location":{"path":"apps/backend/services/integrations/migrate_to_astra.py","start_line":16,"end_line":16,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1208/instances","dismissal_approved_by":null},{"number":1207,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1207","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1207","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'hashlib' is not used."},"location":{"path":"apps/backend/services/integrations/migrate_to_astra.py","start_line":15,"end_line":15,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1207/instances","dismissal_approved_by":null},{"number":1206,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1206","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1206","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'uuid' is not used."},"location":{"path":"apps/backend/services/integrations/migrate_to_astra.py","start_line":12,"end_line":12,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1206/instances","dismissal_approved_by":null},{"number":1205,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1205","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1205","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/services/integrations/migrate_to_astra.py","start_line":9,"end_line":9,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1205/instances","dismissal_approved_by":null},{"number":1204,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1204","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1204","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'config' is not used."},"location":{"path":"apps/backend/services/rag/medical_rag_integration.py","start_line":24,"end_line":24,"start_column":1,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1204/instances","dismissal_approved_by":null},{"number":1203,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1203","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1203","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'asdict' is not used."},"location":{"path":"apps/backend/services/rag/medical_rag_integration.py","start_line":10,"end_line":10,"start_column":1,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1203/instances","dismissal_approved_by":null},{"number":1202,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1202","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1202","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Tuple' is not used.\nImport of 'Optional' is not used."},"location":{"path":"apps/backend/services/rag/medical_rag_integration.py","start_line":9,"end_line":9,"start_column":1,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1202/instances","dismissal_approved_by":null},{"number":1201,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1201","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1201","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Optional' is not used.\nImport of 'Any' is not used."},"location":{"path":"apps/backend/services/rag/medical_chunking.py","start_line":8,"end_line":8,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1201/instances","dismissal_approved_by":null},{"number":1200,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1200","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1200","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'List' is not used.\nImport of 'Optional' is not used."},"location":{"path":"tests/qa-automation/test_scenarios/medical_accuracy.py","start_line":25,"end_line":25,"start_column":1,"end_column":45},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1200/instances","dismissal_approved_by":null},{"number":1199,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1199","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1199","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 're' is not used."},"location":{"path":"tests/qa-automation/test_scenarios/medical_accuracy.py","start_line":23,"end_line":23,"start_column":1,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1199/instances","dismissal_approved_by":null},{"number":1198,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1198","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1198","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'json' is not used."},"location":{"path":"tests/qa-automation/test_scenarios/medical_accuracy.py","start_line":20,"end_line":20,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1198/instances","dismissal_approved_by":null},{"number":1197,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1197","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1197","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'Optional' is not used."},"location":{"path":"tests/qa-automation/main_test_runner.py","start_line":28,"end_line":28,"start_column":1,"end_column":45},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1197/instances","dismissal_approved_by":null},{"number":1196,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1196","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1196","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'string' is not used."},"location":{"path":"apps/backend/security-tests/main_security_test_suite.py","start_line":29,"end_line":29,"start_column":1,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1196/instances","dismissal_approved_by":null},{"number":1195,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1195","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1195","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'random' is not used."},"location":{"path":"apps/backend/security-tests/main_security_test_suite.py","start_line":28,"end_line":28,"start_column":1,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1195/instances","dismissal_approved_by":null},{"number":1194,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1194","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1194","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'timedelta' is not used."},"location":{"path":"apps/backend/security-tests/main_security_test_suite.py","start_line":25,"end_line":25,"start_column":1,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1194/instances","dismissal_approved_by":null},{"number":1193,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1193","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1193","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Tuple' is not used.\nImport of 'Optional' is not used."},"location":{"path":"apps/backend/security-tests/main_security_test_suite.py","start_line":23,"end_line":23,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1193/instances","dismissal_approved_by":null},{"number":1192,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1192","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1192","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'threading' is not used."},"location":{"path":"apps/backend/security-tests/main_security_test_suite.py","start_line":22,"end_line":22,"start_column":1,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1192/instances","dismissal_approved_by":null},{"number":1191,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1191","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1191","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'List' is not used.\nImport of 'Optional' is not used."},"location":{"path":"tests/qa-automation/test_scenarios/integration_e2e.py","start_line":24,"end_line":24,"start_column":1,"end_column":45},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1191/instances","dismissal_approved_by":null},{"number":1190,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1190","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1190","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'json' is not used."},"location":{"path":"tests/qa-automation/test_scenarios/integration_e2e.py","start_line":20,"end_line":20,"start_column":1,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1190/instances","dismissal_approved_by":null},{"number":1189,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1189","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1189","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'firebase_admin' is not used."},"location":{"path":"apps/backend/core/performance/firestore_rate_limiter.py","start_line":31,"end_line":31,"start_column":5,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1189/instances","dismissal_approved_by":null},{"number":1188,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1188","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1188","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/core/performance/firestore_rate_limiter.py","start_line":27,"end_line":27,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1188/instances","dismissal_approved_by":null},{"number":1187,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1187","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1187","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'time' is not used."},"location":{"path":"apps/backend/core/performance/firestore_rate_limiter.py","start_line":26,"end_line":26,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1187/instances","dismissal_approved_by":null},{"number":1186,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1186","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1186","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Set' is not used."},"location":{"path":"apps/backend/core/performance/firestore_rate_limiter.py","start_line":22,"end_line":22,"start_column":1,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1186/instances","dismissal_approved_by":null},{"number":1185,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1185","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1185","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Import of 'urlparse' is not used."},"location":{"path":"tests/qa-automation/utils/environment_detector.py","start_line":18,"end_line":18,"start_column":1,"end_column":34},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1185/instances","dismissal_approved_by":null},{"number":1184,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1184","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1184","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/services/rag/enhanced_rag_system.py","start_line":9,"end_line":9,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1184/instances","dismissal_approved_by":null},{"number":1183,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1183","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1183","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used."},"location":{"path":"apps/backend/services/rag/enhanced_rag_system.py","start_line":6,"end_line":6,"start_column":1,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1183/instances","dismissal_approved_by":null},{"number":1182,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1182","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1182","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Tuple' is not used."},"location":{"path":"tools/validation/endpoint-compatibility-test.py","start_line":16,"end_line":16,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1182/instances","dismissal_approved_by":null},{"number":1181,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1181","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1181","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"tools/validation/endpoint-compatibility-test.py","start_line":13,"end_line":13,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1181/instances","dismissal_approved_by":null},{"number":1180,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1180","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1180","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'asyncio' is not used."},"location":{"path":"tools/validation/endpoint-compatibility-test.py","start_line":11,"end_line":11,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1180/instances","dismissal_approved_by":null},{"number":1179,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1179","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1179","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'timedelta' is not used."},"location":{"path":"apps/backend/services/rag/embedding_service.py","start_line":13,"end_line":13,"start_column":1,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1179/instances","dismissal_approved_by":null},{"number":1178,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1178","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1178","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/services/rag/embedding_service.py","start_line":8,"end_line":8,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1178/instances","dismissal_approved_by":null},{"number":1177,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1177","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1177","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'sys' is not used."},"location":{"path":"tools/diagnostics/diagnostic_ai_system.py","start_line":11,"end_line":11,"start_column":1,"end_column":11},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1177/instances","dismissal_approved_by":null},{"number":1176,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1176","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1176","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"tools/diagnostics/diagnostic_ai_system.py","start_line":10,"end_line":10,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1176/instances","dismissal_approved_by":null},{"number":1175,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1175","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1175","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"tools/diagnostics/diagnostic_ai_system.py","start_line":9,"end_line":9,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1175/instances","dismissal_approved_by":null},{"number":1174,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1174","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1174","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 're' is not used."},"location":{"path":"data_quality_analysis.py","start_line":15,"end_line":15,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1174/instances","dismissal_approved_by":null},{"number":1173,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1173","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1173","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Tuple' is not used.\nImport of 'Optional' is not used.\nImport of 'Set' is not used."},"location":{"path":"data_quality_analysis.py","start_line":14,"end_line":14,"start_column":1,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1173/instances","dismissal_approved_by":null},{"number":1172,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1172","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1172","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"data_quality_analysis.py","start_line":8,"end_line":8,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1172/instances","dismissal_approved_by":null},{"number":1171,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1171","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1171","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'firebase_admin' is not used."},"location":{"path":"apps/backend/services/cache/cloud_native_cache.py","start_line":22,"end_line":22,"start_column":5,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1171/instances","dismissal_approved_by":null},{"number":1170,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1170","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1170","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Path' is not used."},"location":{"path":"cleanup_legacy_tests.py","start_line":16,"end_line":16,"start_column":1,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1170/instances","dismissal_approved_by":null},{"number":1169,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1169","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1169","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Path' is not used."},"location":{"path":"apps/backend/services/cache/cloud_native_cache.py","start_line":14,"end_line":14,"start_column":1,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1169/instances","dismissal_approved_by":null},{"number":1168,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1168","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1168","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used."},"location":{"path":"apps/backend/services/cache/cloud_native_cache.py","start_line":12,"end_line":12,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1168/instances","dismissal_approved_by":null},{"number":1167,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1167","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1167","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/services/cache/cloud_native_cache.py","start_line":8,"end_line":8,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1167/instances","dismissal_approved_by":null},{"number":1166,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1166","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1166","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"check_deployment_status.py","start_line":10,"end_line":10,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1166/instances","dismissal_approved_by":null},{"number":1165,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1165","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1165","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'time' is not used."},"location":{"path":"check_deployment_status.py","start_line":9,"end_line":9,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1165/instances","dismissal_approved_by":null},{"number":1164,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1164","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1164","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used."},"location":{"path":"apps/backend/check_astra_env_fixed.py","start_line":11,"end_line":11,"start_column":1,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1164/instances","dismissal_approved_by":null},{"number":1163,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1163","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1163","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used."},"location":{"path":"apps/backend/check_astra_env.py","start_line":11,"end_line":11,"start_column":1,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1163/instances","dismissal_approved_by":null},{"number":1162,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1162","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1162","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'timedelta' is not used."},"location":{"path":"scripts/automation/check-vulnerabilities.py","start_line":11,"end_line":11,"start_column":1,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1162/instances","dismissal_approved_by":null},{"number":1161,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1161","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1161","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Tuple' is not used."},"location":{"path":"apps/backend/services/ai/chatbot.py","start_line":5,"end_line":5,"start_column":1,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1161/instances","dismissal_approved_by":null},{"number":1160,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1160","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1160","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'detect_question_scope' is not used.\nImport of 'get_limitation_response' is not used."},"location":{"path":"apps/backend/tasks/chat_tasks.py","start_line":20,"end_line":20,"start_column":5,"end_column":95},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1160/instances","dismissal_approved_by":null},{"number":1159,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1159","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1159","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Tuple' is not used.\nImport of 'Optional' is not used."},"location":{"path":"apps/backend/tasks/chat_tasks.py","start_line":12,"end_line":12,"start_column":1,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1159/instances","dismissal_approved_by":null},{"number":1158,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1158","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1158","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'global_zero_trust_manager' is not used.\nImport of 'ResourceType' is not used."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":96,"end_line":99,"start_column":5,"end_column":6},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1158/instances","dismissal_approved_by":null},{"number":1157,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1157","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1157","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'config' is not used."},"location":{"path":"apps/backend/celery_config.py","start_line":10,"end_line":10,"start_column":1,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1157/instances","dismissal_approved_by":null},{"number":1156,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1156","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1156","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'timedelta' is not used."},"location":{"path":"apps/backend/blueprints/cache_blueprint.py","start_line":12,"end_line":12,"start_column":1,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1156/instances","dismissal_approved_by":null},{"number":1155,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1155","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1155","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'current_app' is not used."},"location":{"path":"apps/backend/blueprints/cache_blueprint.py","start_line":7,"end_line":7,"start_column":1,"end_column":59},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1155/instances","dismissal_approved_by":null},{"number":1154,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1154","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1154","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'requests' is not used."},"location":{"path":"apps/backend/services/integrations/astra_setup_astrapy.py","start_line":22,"end_line":22,"start_column":5,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1154/instances","dismissal_approved_by":null},{"number":1153,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1153","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1153","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'DataAPIException' is not used."},"location":{"path":"apps/backend/services/integrations/astra_setup_astrapy.py","start_line":21,"end_line":21,"start_column":5,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1153/instances","dismissal_approved_by":null},{"number":1152,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1152","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1152","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used.\nImport of 'Optional' is not used."},"location":{"path":"apps/backend/services/integrations/astra_setup_astrapy.py","start_line":14,"end_line":14,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1152/instances","dismissal_approved_by":null},{"number":1151,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1151","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1151","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/services/integrations/astra_setup_astrapy.py","start_line":11,"end_line":11,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1151/instances","dismissal_approved_by":null},{"number":1150,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1150","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1150","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/services/integrations/astra_setup_astrapy.py","start_line":9,"end_line":9,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1150/instances","dismissal_approved_by":null},{"number":1149,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1149","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1149","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'requests' is not used."},"location":{"path":"apps/backend/services/integrations/astra_setup.py","start_line":26,"end_line":26,"start_column":5,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1149/instances","dismissal_approved_by":null},{"number":1148,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1148","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1148","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'SimpleStatement' is not used."},"location":{"path":"apps/backend/services/integrations/astra_setup.py","start_line":25,"end_line":25,"start_column":5,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1148/instances","dismissal_approved_by":null},{"number":1147,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1147","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1147","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'ConsistencyLevel' is not used."},"location":{"path":"apps/backend/services/integrations/astra_setup.py","start_line":24,"end_line":24,"start_column":5,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1147/instances","dismissal_approved_by":null},{"number":1146,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1146","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1146","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used.\nImport of 'Optional' is not used."},"location":{"path":"apps/backend/services/integrations/astra_setup.py","start_line":15,"end_line":15,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1146/instances","dismissal_approved_by":null},{"number":1145,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1145","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1145","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'asyncio' is not used."},"location":{"path":"apps/backend/services/integrations/astra_setup.py","start_line":13,"end_line":13,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1145/instances","dismissal_approved_by":null},{"number":1144,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1144","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1144","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/services/integrations/astra_setup.py","start_line":11,"end_line":11,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1144/instances","dismissal_approved_by":null},{"number":1143,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1143","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1143","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/services/integrations/astra_setup.py","start_line":9,"end_line":9,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1143/instances","dismissal_approved_by":null},{"number":1142,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1142","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1142","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Tuple' is not used."},"location":{"path":"apps/backend/analyze_data_for_migration.py","start_line":13,"end_line":13,"start_column":1,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1142/instances","dismissal_approved_by":null},{"number":1141,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1141","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1141","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'logging' is not used."},"location":{"path":"apps/backend/analyze_data_for_migration.py","start_line":11,"end_line":11,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1141/instances","dismissal_approved_by":null},{"number":1140,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1140","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1140","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/analyze_data_for_migration.py","start_line":8,"end_line":8,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1140/instances","dismissal_approved_by":null},{"number":1139,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1139","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1139","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Union' is not used."},"location":{"path":"apps/backend/services/ai/ai_provider_manager.py","start_line":11,"end_line":11,"start_column":1,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1139/instances","dismissal_approved_by":null},{"number":1138,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1138","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1138","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'asyncio' is not used."},"location":{"path":"apps/backend/services/ai/ai_provider_manager.py","start_line":10,"end_line":10,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1138/instances","dismissal_approved_by":null},{"number":1137,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1137","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1137","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/services/cache/advanced_cache.py","start_line":11,"end_line":11,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1137/instances","dismissal_approved_by":null},{"number":1136,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1136","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1136","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/mismatched-multiple-assignment","severity":"error","description":"Mismatch in multiple assignment","name":"py/mismatched-multiple-assignment","tags":["correctness","quality","reliability"],"full_description":"Assigning multiple variables without ensuring that you define a value for each variable causes an exception at runtime.","help":"# Mismatch in multiple assignment\nAn assignment statement evaluates a sequence expression and assigns each item of the sequence to one of the variables on the left. If there is a mismatch between the number of variables on the left and the values in the sequence on the right of the statement, then an exception is raised at runtime.\n\n\n## Recommendation\nEnsure that the number of variables on either side of the assignment match.\n\n\n## Example\nThe following examples show a simple definition of the Fibonacci series. In the first example, one of the values in the assignment has been duplicated, causing an exception at runtime.\n\n\n```python\n# Fibonacci series 1:\n# the sum of two elements defines the next\n\na, b = 0, 1, 1  # Assignment fails: accidentally put three values on right\nwhile b < 10:\n     print b\n     a, b = b, a+b\n\n# Fibonacci series 2:\n# the sum of two elements defines the next\na, b = 0, 1   # Assignment succeeds: two variables on left and two values on right\nwhile b < 10:\n     print b\n     a, b = b, a+b\n\n```\n\n## References\n* Python Language Reference: [ Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#grammar-token-assignment_stmt).\n* Python Tutorial: [ First steps towards programming](http://docs.python.org/2/tutorial/introduction.html#first-steps-towards-programming).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Left hand side of assignment contains 2 variables, but right hand side is a tuple of length 3.\nLeft hand side of assignment contains 2 variables, but right hand side is a tuple of length 3."},"location":{"path":"apps/backend/services/rag/semantic_search.py","start_line":96,"end_line":96,"start_column":9,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1136/instances","dismissal_approved_by":null},{"number":1135,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1135","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1135","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unnecessary-pass","severity":"warning","description":"Unnecessary pass","name":"py/unnecessary-pass","tags":["maintainability","quality","useless-code"],"full_description":"Unnecessary 'pass' statement","help":"# Unnecessary pass\nA `pass` statement is only necessary when it is the only statement in a block (the list of statements forming part of a compound statement). This is because the purpose of the ` pass` statement is to allow empty blocks where they would otherwise be syntactically invalid. If the block already contains other statements then the `pass` statement is unnecessary.\n\n\n## Recommendation\nRemove the `pass` statement.\n\n\n## References\n* Python: [pass](http://docs.python.org/2/tutorial/controlflow.html#pass-statements).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unnecessary 'pass' statement."},"location":{"path":"apps/backend/services/rag/embedding_service.py","start_line":497,"end_line":497,"start_column":21,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1135/instances","dismissal_approved_by":null},{"number":1134,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1134","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1134","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unreachable-statement","severity":"warning","description":"Unreachable code","name":"py/unreachable-statement","tags":["external/cwe/cwe-561","maintainability","quality","useless-code"],"full_description":"Code is unreachable","help":"# Unreachable code\nUnreachable code makes the code more difficult to understand and may slow down loading of modules.\n\n\n## Recommendation\nDeleting the unreachable code will make the code clearer and preserve the meaning of the code. However, it is possible that the original intention was that the code should execute and that it is unreachable signifies some other error.\n\n\n## Example\nIn this example the assignment to `remainder` is never reached because there is a ` return` statement on the previous line.\n\n\n```python\nimport math\n\ndef my_div(x, y):\n    return math.floor(x / y)\n    remainder = x - math.floor(x / y) * y\n\n```\n\n## References\n* Wikipedia: [Unreachable Code](http://en.wikipedia.org/wiki/Unreachable_code).\n* Common Weakness Enumeration: [CWE-561](https://cwe.mitre.org/data/definitions/561.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This statement is unreachable."},"location":{"path":"scripts/migration/test_supabase_integration.py","start_line":438,"end_line":438,"start_column":9,"end_column":26},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1134/instances","dismissal_approved_by":null},{"number":1133,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1133","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1133","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unreachable-statement","severity":"warning","description":"Unreachable code","name":"py/unreachable-statement","tags":["external/cwe/cwe-561","maintainability","quality","useless-code"],"full_description":"Code is unreachable","help":"# Unreachable code\nUnreachable code makes the code more difficult to understand and may slow down loading of modules.\n\n\n## Recommendation\nDeleting the unreachable code will make the code clearer and preserve the meaning of the code. However, it is possible that the original intention was that the code should execute and that it is unreachable signifies some other error.\n\n\n## Example\nIn this example the assignment to `remainder` is never reached because there is a ` return` statement on the previous line.\n\n\n```python\nimport math\n\ndef my_div(x, y):\n    return math.floor(x / y)\n    remainder = x - math.floor(x / y) * y\n\n```\n\n## References\n* Wikipedia: [Unreachable Code](http://en.wikipedia.org/wiki/Unreachable_code).\n* Common Weakness Enumeration: [CWE-561](https://cwe.mitre.org/data/definitions/561.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This statement is unreachable."},"location":{"path":"apps/backend/main.py","start_line":310,"end_line":310,"start_column":21,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1133/instances","dismissal_approved_by":null},{"number":1132,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1132","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1132","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unreachable-statement","severity":"warning","description":"Unreachable code","name":"py/unreachable-statement","tags":["external/cwe/cwe-561","maintainability","quality","useless-code"],"full_description":"Code is unreachable","help":"# Unreachable code\nUnreachable code makes the code more difficult to understand and may slow down loading of modules.\n\n\n## Recommendation\nDeleting the unreachable code will make the code clearer and preserve the meaning of the code. However, it is possible that the original intention was that the code should execute and that it is unreachable signifies some other error.\n\n\n## Example\nIn this example the assignment to `remainder` is never reached because there is a ` return` statement on the previous line.\n\n\n```python\nimport math\n\ndef my_div(x, y):\n    return math.floor(x / y)\n    remainder = x - math.floor(x / y) * y\n\n```\n\n## References\n* Wikipedia: [Unreachable Code](http://en.wikipedia.org/wiki/Unreachable_code).\n* Common Weakness Enumeration: [CWE-561](https://cwe.mitre.org/data/definitions/561.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This statement is unreachable."},"location":{"path":"apps/backend/main.py","start_line":278,"end_line":278,"start_column":21,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1132/instances","dismissal_approved_by":null},{"number":1131,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1131","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1131","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/services/rag/vector_store.py","start_line":513,"end_line":513,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1131/instances","dismissal_approved_by":null},{"number":1130,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1130","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1130","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"archive/backup-20241230/tests_backend/test_suite_complete.py","start_line":721,"end_line":721,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1130/instances","dismissal_approved_by":null},{"number":1129,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1129","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1129","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"backup/tests_backend/test_suite_complete.py","start_line":721,"end_line":721,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1129/instances","dismissal_approved_by":null},{"number":1128,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1128","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1128","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tests/security/test_stack_trace_exposure.py","start_line":93,"end_line":93,"start_column":17,"end_column":24},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1128/instances","dismissal_approved_by":null},{"number":1127,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1127","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1127","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"archive/backup-20241230/tests_security/test_stack_trace_exposure.py","start_line":93,"end_line":93,"start_column":17,"end_column":24},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1127/instances","dismissal_approved_by":null},{"number":1126,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1126","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1126","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"backup/tests_security/test_stack_trace_exposure.py","start_line":93,"end_line":93,"start_column":17,"end_column":24},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1126/instances","dismissal_approved_by":null},{"number":1125,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1125","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1125","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"archive/backup-20241230/tests_integration/test_scientific_validation.py","start_line":168,"end_line":168,"start_column":9,"end_column":16},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1125/instances","dismissal_approved_by":null},{"number":1124,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1124","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1124","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"archive/backup-20241230/tests_integration/test_scientific_validation.py","start_line":146,"end_line":146,"start_column":9,"end_column":16},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1124/instances","dismissal_approved_by":null},{"number":1123,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1123","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1123","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tests/integration/test_scientific_validation.py","start_line":168,"end_line":168,"start_column":9,"end_column":16},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1123/instances","dismissal_approved_by":null},{"number":1122,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1122","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1122","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tests/integration/test_scientific_validation.py","start_line":146,"end_line":146,"start_column":9,"end_column":16},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1122/instances","dismissal_approved_by":null},{"number":1121,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1121","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1121","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"backup/tests_integration/test_scientific_validation.py","start_line":168,"end_line":168,"start_column":9,"end_column":16},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1121/instances","dismissal_approved_by":null},{"number":1120,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1120","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1120","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"backup/tests_integration/test_scientific_validation.py","start_line":146,"end_line":146,"start_column":9,"end_column":16},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1120/instances","dismissal_approved_by":null},{"number":1119,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1119","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1119","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"backup/tests_backend/test_multimodal_system.py","start_line":44,"end_line":44,"start_column":5,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1119/instances","dismissal_approved_by":null},{"number":1118,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1118","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1118","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"archive/backup-20241230/tests_backend/test_multimodal_system.py","start_line":44,"end_line":44,"start_column":5,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1118/instances","dismissal_approved_by":null},{"number":1117,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1117","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1117","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"archive/backup-20241230/tests_integration/test_error_handling.py","start_line":97,"end_line":97,"start_column":21,"end_column":28},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1117/instances","dismissal_approved_by":null},{"number":1116,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1116","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1116","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tests/integration/test_error_handling.py","start_line":97,"end_line":97,"start_column":21,"end_column":28},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1116/instances","dismissal_approved_by":null},{"number":1115,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1115","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1115","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"backup/tests_integration/test_error_handling.py","start_line":97,"end_line":97,"start_column":21,"end_column":28},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1115/instances","dismissal_approved_by":null},{"number":1114,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1114","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1114","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tests/integration/test_backend_frontend.py","start_line":428,"end_line":428,"start_column":21,"end_column":28},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1114/instances","dismissal_approved_by":null},{"number":1113,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1113","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1113","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"archive/backup-20241230/tests_integration/test_backend_frontend.py","start_line":428,"end_line":428,"start_column":21,"end_column":28},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1113/instances","dismissal_approved_by":null},{"number":1112,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1112","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1112","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"backup/tests_integration/test_backend_frontend.py","start_line":428,"end_line":428,"start_column":21,"end_column":28},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1112/instances","dismissal_approved_by":null},{"number":1111,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1111","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1111","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tools/dev-environment/start_dev_environment.py","start_line":308,"end_line":308,"start_column":17,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1111/instances","dismissal_approved_by":null},{"number":1110,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1110","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1110","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tools/dev-environment/start_dev_environment.py","start_line":304,"end_line":304,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1110/instances","dismissal_approved_by":null},{"number":1109,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1109","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1109","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tools/dev-environment/start_dev_environment.py","start_line":296,"end_line":296,"start_column":17,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1109/instances","dismissal_approved_by":null},{"number":1108,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1108","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1108","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tools/dev-environment/start_dev_environment.py","start_line":292,"end_line":292,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1108/instances","dismissal_approved_by":null},{"number":1107,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1107","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1107","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tools/dev-environment/start_dev_environment.py","start_line":239,"end_line":239,"start_column":17,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1107/instances","dismissal_approved_by":null},{"number":1106,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1106","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1106","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tools/dev-environment/start_dev_environment.py","start_line":209,"end_line":209,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1106/instances","dismissal_approved_by":null},{"number":1105,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1105","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1105","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tools/dev-environment/start_dev_environment.py","start_line":181,"end_line":181,"start_column":17,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1105/instances","dismissal_approved_by":null},{"number":1104,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1104","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1104","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tests/qa-automation/run_with_github_actions.py","start_line":294,"end_line":294,"start_column":9,"end_column":16},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1104/instances","dismissal_approved_by":null},{"number":1103,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1103","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1103","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tests/qa-automation/run_with_github_actions.py","start_line":282,"end_line":282,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1103/instances","dismissal_approved_by":null},{"number":1102,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1102","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1102","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tests/qa-automation/run_with_github_actions.py","start_line":128,"end_line":128,"start_column":17,"end_column":24},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1102/instances","dismissal_approved_by":null},{"number":1101,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1101","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1101","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tests/qa-automation/run_with_github_actions.py","start_line":104,"end_line":104,"start_column":9,"end_column":16},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1101/instances","dismissal_approved_by":null},{"number":1100,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1100","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1100","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tests/qa-automation/run_with_github_actions.py","start_line":92,"end_line":92,"start_column":9,"end_column":16},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1100/instances","dismissal_approved_by":null},{"number":1099,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1099","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1099","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tests/qa-automation/run_tests_with_secrets.py","start_line":96,"end_line":96,"start_column":5,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1099/instances","dismissal_approved_by":null},{"number":1098,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1098","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1098","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"scripts/migration/run_migration_github.py","start_line":75,"end_line":75,"start_column":5,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1098/instances","dismissal_approved_by":null},{"number":1097,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1097","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1097","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"scripts/migration/run_migration_github.py","start_line":63,"end_line":63,"start_column":5,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1097/instances","dismissal_approved_by":null},{"number":1096,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1096","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1096","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"scripts/migration/run_migration_with_gh_cli.py","start_line":42,"end_line":42,"start_column":5,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1096/instances","dismissal_approved_by":null},{"number":1095,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1095","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1095","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"scripts/migration/run_migration_with_gh_cli.py","start_line":29,"end_line":29,"start_column":5,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1095/instances","dismissal_approved_by":null},{"number":1094,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1094","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1094","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"archive/backup-20241230/tests_integration/run_full_scientific_validation.py","start_line":109,"end_line":109,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1094/instances","dismissal_approved_by":null},{"number":1093,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1093","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1093","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"archive/backup-20241230/tests_integration/run_full_scientific_validation.py","start_line":103,"end_line":103,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1093/instances","dismissal_approved_by":null},{"number":1092,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1092","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1092","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"archive/backup-20241230/tests_integration/run_full_scientific_validation.py","start_line":97,"end_line":97,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1092/instances","dismissal_approved_by":null},{"number":1091,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1091","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1091","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"backup/tests_integration/run_full_scientific_validation.py","start_line":109,"end_line":109,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1091/instances","dismissal_approved_by":null},{"number":1090,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1090","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1090","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"backup/tests_integration/run_full_scientific_validation.py","start_line":103,"end_line":103,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1090/instances","dismissal_approved_by":null},{"number":1089,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1089","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1089","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"backup/tests_integration/run_full_scientific_validation.py","start_line":97,"end_line":97,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1089/instances","dismissal_approved_by":null},{"number":1088,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1088","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1088","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tests/integration/run_full_scientific_validation.py","start_line":109,"end_line":109,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1088/instances","dismissal_approved_by":null},{"number":1087,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1087","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1087","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tests/integration/run_full_scientific_validation.py","start_line":103,"end_line":103,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1087/instances","dismissal_approved_by":null},{"number":1086,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1086","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1086","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tests/integration/run_full_scientific_validation.py","start_line":97,"end_line":97,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1086/instances","dismissal_approved_by":null},{"number":1085,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1085","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1085","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tests/qa-automation/test_scenarios/performance_load.py","start_line":382,"end_line":382,"start_column":9,"end_column":16},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1085/instances","dismissal_approved_by":null},{"number":1084,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1084","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1084","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/services/integrations/multimodal_processor.py","start_line":680,"end_line":680,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1084/instances","dismissal_approved_by":null},{"number":1083,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1083","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1083","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/services/integrations/multimodal_processor.py","start_line":124,"end_line":124,"start_column":9,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1083/instances","dismissal_approved_by":null},{"number":1082,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1082","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1082","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tests/qa-automation/test_scenarios/integration_e2e.py","start_line":480,"end_line":480,"start_column":21,"end_column":28},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1082/instances","dismissal_approved_by":null},{"number":1081,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1081","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1081","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"tools/validation/endpoint-compatibility-test.py","start_line":346,"end_line":346,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1081/instances","dismissal_approved_by":null},{"number":1080,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1080","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1080","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/tasks/chat_tasks.py","start_line":405,"end_line":405,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1080/instances","dismissal_approved_by":null},{"number":1079,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1079","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1079","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/tasks/chat_tasks.py","start_line":399,"end_line":399,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1079/instances","dismissal_approved_by":null},{"number":1078,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1078","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1078","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/tasks/chat_tasks.py","start_line":393,"end_line":393,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1078/instances","dismissal_approved_by":null},{"number":1077,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1077","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1077","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/tasks/chat_tasks.py","start_line":387,"end_line":387,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1077/instances","dismissal_approved_by":null},{"number":1076,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1076","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1076","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/tasks/chat_tasks.py","start_line":103,"end_line":103,"start_column":25,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1076/instances","dismissal_approved_by":null},{"number":1075,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1075","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1075","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":297,"end_line":297,"start_column":21,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1075/instances","dismissal_approved_by":null},{"number":1074,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1074","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1074","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/blueprints/cache_blueprint.py","start_line":98,"end_line":98,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1074/instances","dismissal_approved_by":null},{"number":1073,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1073","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1073","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/services/rag/vector_store.py","start_line":513,"end_line":513,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1073/instances","dismissal_approved_by":null},{"number":1072,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1072","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1072","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"archive/backup-20241230/tests_backend/test_suite_complete.py","start_line":571,"end_line":571,"start_column":13,"end_column":32},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1072/instances","dismissal_approved_by":null},{"number":1071,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1071","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1071","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"backup/tests_backend/test_suite_complete.py","start_line":571,"end_line":571,"start_column":13,"end_column":32},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1071/instances","dismissal_approved_by":null},{"number":1070,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1070","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1070","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tools/dev-environment/start_dev_environment.py","start_line":239,"end_line":239,"start_column":17,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1070/instances","dismissal_approved_by":null},{"number":1069,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1069","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1069","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tools/dev-environment/start_dev_environment.py","start_line":181,"end_line":181,"start_column":17,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1069/instances","dismissal_approved_by":null},{"number":1068,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1068","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1068","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/qa-automation/test_scenarios/security_validation.py","start_line":585,"end_line":585,"start_column":13,"end_column":30},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1068/instances","dismissal_approved_by":null},{"number":1067,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1067","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1067","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/qa-automation/run_with_github_actions.py","start_line":294,"end_line":294,"start_column":9,"end_column":16},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1067/instances","dismissal_approved_by":null},{"number":1066,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1066","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1066","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/qa-automation/run_with_github_actions.py","start_line":128,"end_line":128,"start_column":17,"end_column":24},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1066/instances","dismissal_approved_by":null},{"number":1065,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1065","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1065","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/qa-automation/run_with_github_actions.py","start_line":104,"end_line":104,"start_column":9,"end_column":16},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1065/instances","dismissal_approved_by":null},{"number":1064,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1064","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1064","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/qa-automation/run_with_github_actions.py","start_line":92,"end_line":92,"start_column":9,"end_column":16},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1064/instances","dismissal_approved_by":null},{"number":1063,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1063","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1063","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/qa-automation/run_tests_with_secrets.py","start_line":96,"end_line":96,"start_column":5,"end_column":12},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1063/instances","dismissal_approved_by":null},{"number":1062,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1062","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1062","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"archive/backup-20241230/tests_integration/run_full_scientific_validation.py","start_line":109,"end_line":109,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1062/instances","dismissal_approved_by":null},{"number":1061,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1061","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1061","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"archive/backup-20241230/tests_integration/run_full_scientific_validation.py","start_line":103,"end_line":103,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1061/instances","dismissal_approved_by":null},{"number":1060,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1060","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1060","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"archive/backup-20241230/tests_integration/run_full_scientific_validation.py","start_line":97,"end_line":97,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1060/instances","dismissal_approved_by":null},{"number":1059,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1059","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1059","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"backup/tests_integration/run_full_scientific_validation.py","start_line":109,"end_line":109,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1059/instances","dismissal_approved_by":null},{"number":1058,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1058","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1058","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"backup/tests_integration/run_full_scientific_validation.py","start_line":103,"end_line":103,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1058/instances","dismissal_approved_by":null},{"number":1057,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1057","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1057","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"backup/tests_integration/run_full_scientific_validation.py","start_line":97,"end_line":97,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1057/instances","dismissal_approved_by":null},{"number":1056,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1056","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1056","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/integration/run_full_scientific_validation.py","start_line":109,"end_line":109,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1056/instances","dismissal_approved_by":null},{"number":1055,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1055","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1055","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/integration/run_full_scientific_validation.py","start_line":103,"end_line":103,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1055/instances","dismissal_approved_by":null},{"number":1054,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1054","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1054","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/integration/run_full_scientific_validation.py","start_line":97,"end_line":97,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1054/instances","dismissal_approved_by":null},{"number":1053,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1053","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1053","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/qa-automation/test_scenarios/performance_load.py","start_line":700,"end_line":700,"start_column":17,"end_column":34},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1053/instances","dismissal_approved_by":null},{"number":1052,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1052","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1052","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/qa-automation/test_scenarios/performance_load.py","start_line":663,"end_line":663,"start_column":17,"end_column":34},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1052/instances","dismissal_approved_by":null},{"number":1051,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1051","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1051","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/qa-automation/test_scenarios/performance_load.py","start_line":548,"end_line":548,"start_column":17,"end_column":34},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1051/instances","dismissal_approved_by":null},{"number":1050,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1050","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1050","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/qa-automation/test_scenarios/performance_load.py","start_line":425,"end_line":425,"start_column":21,"end_column":38},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1050/instances","dismissal_approved_by":null},{"number":1049,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1049","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1049","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/qa-automation/test_scenarios/performance_load.py","start_line":371,"end_line":371,"start_column":17,"end_column":34},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1049/instances","dismissal_approved_by":null},{"number":1048,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1048","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1048","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/qa-automation/test_scenarios/performance_load.py","start_line":163,"end_line":163,"start_column":21,"end_column":38},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1048/instances","dismissal_approved_by":null},{"number":1047,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1047","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1047","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/qa-automation/test_scenarios/integration_e2e.py","start_line":574,"end_line":574,"start_column":13,"end_column":30},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1047/instances","dismissal_approved_by":null},{"number":1046,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1046","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1046","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/qa-automation/test_scenarios/integration_e2e.py","start_line":535,"end_line":535,"start_column":17,"end_column":34},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1046/instances","dismissal_approved_by":null},{"number":1045,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T12:54:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1045","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1045","state":"fixed","fixed_at":"2025-08-31T12:54:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"tests/qa-automation/test_scenarios/integration_e2e.py","start_line":480,"end_line":480,"start_column":21,"end_column":28},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1045/instances","dismissal_approved_by":null},{"number":1044,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1044","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1044","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"scripts/automation/check-vulnerabilities.py","start_line":158,"end_line":158,"start_column":13,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1044/instances","dismissal_approved_by":null},{"number":1043,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1043","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1043","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"scripts/automation/check-vulnerabilities.py","start_line":134,"end_line":134,"start_column":9,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1043/instances","dismissal_approved_by":null},{"number":1042,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1042","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1042","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"scripts/automation/check-vulnerabilities.py","start_line":112,"end_line":112,"start_column":9,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1042/instances","dismissal_approved_by":null},{"number":1041,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1041","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1041","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/tasks/chat_tasks.py","start_line":405,"end_line":405,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1041/instances","dismissal_approved_by":null},{"number":1040,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1040","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1040","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/tasks/chat_tasks.py","start_line":399,"end_line":399,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1040/instances","dismissal_approved_by":null},{"number":1039,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1039","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1039","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/tasks/chat_tasks.py","start_line":393,"end_line":393,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1039/instances","dismissal_approved_by":null},{"number":1038,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1038","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1038","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/tasks/chat_tasks.py","start_line":387,"end_line":387,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1038/instances","dismissal_approved_by":null},{"number":1037,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1037","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1037","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/tasks/chat_tasks.py","start_line":103,"end_line":103,"start_column":25,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1037/instances","dismissal_approved_by":null},{"number":1036,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1036","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1036","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/analyze_data_for_migration.py","start_line":203,"end_line":203,"start_column":9,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1036/instances","dismissal_approved_by":null},{"number":1035,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1035","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1035","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/duplicate-key-dict-literal","severity":"warning","description":"Duplicate key in dict literal","name":"py/duplicate-key-dict-literal","tags":["external/cwe/cwe-561","maintainability","quality","useless-code"],"full_description":"Duplicate key in dict literal. All but the last will be lost.","help":"# Duplicate key in dict literal\nDictionary literals are constructed in the order given in the source. This means that if a key is duplicated, the second key-value pair will overwrite the first; as a dictionary can only have one value per key.\n\n\n## Recommendation\nCheck for typos to ensure that the keys are supposed to be the same. If they are then decide which value is wanted and delete the other one.\n\n\n## Example\nThe following example will output `\"c\"`, because the mapping between 2 and `\"b\"` is overwritten by the mapping from 2 to `\"c\"`. The programmer may have meant to map 3 to `\"c\"` instead.\n\n\n```python\ndictionary = {1:\"a\", 2:\"b\", 2:\"c\"} # BAD: The `2` key is duplicated.\nprint(dictionary[2])\n```\n\n## References\n* Python: [Dictionary literals](http://docs.python.org/3/reference/expressions.html#dictionary-displays).\n* Common Weakness Enumeration: [CWE-561](https://cwe.mitre.org/data/definitions/561.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Dictionary key '\\[STAR\\]' is subsequently overwritten."},"location":{"path":"apps/backend/core/logging/windows_safe_logger.py","start_line":40,"end_line":40,"start_column":5,"end_column":13},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1035/instances","dismissal_approved_by":null},{"number":1034,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1034","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1034","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/observability.py","start_line":162,"end_line":162,"start_column":33,"end_column":81},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1034/instances","dismissal_approved_by":null},{"number":1033,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1033","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1033","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/observability.py","start_line":116,"end_line":116,"start_column":36,"end_column":63},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1033/instances","dismissal_approved_by":null},{"number":1032,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1032","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1032","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/observability.py","start_line":67,"end_line":67,"start_column":33,"end_column":118},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1032/instances","dismissal_approved_by":null},{"number":1031,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1031","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1031","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/observability.py","start_line":52,"end_line":52,"start_column":36,"end_column":69},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1031/instances","dismissal_approved_by":null},{"number":1030,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1030","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1030","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/core/security/enhanced_security.py","start_line":175,"end_line":175,"start_column":32,"end_column":90},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1030/instances","dismissal_approved_by":null},{"number":1029,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1029","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1029","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":2016,"end_line":2016,"start_column":22,"end_column":61},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1029/instances","dismissal_approved_by":null},{"number":1028,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1028","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1028","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":1966,"end_line":1966,"start_column":22,"end_column":72},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1028/instances","dismissal_approved_by":null},{"number":1027,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1027","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1027","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":1843,"end_line":1843,"start_column":21,"end_column":101},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1027/instances","dismissal_approved_by":null},{"number":1026,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1026","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1026","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":1422,"end_line":1422,"start_column":21,"end_column":104},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1026/instances","dismissal_approved_by":null},{"number":1025,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1025","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1025","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":1257,"end_line":1257,"start_column":25,"end_column":105},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1025/instances","dismissal_approved_by":null},{"number":1024,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1024","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1024","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":764,"end_line":764,"start_column":33,"end_column":130},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1024/instances","dismissal_approved_by":null},{"number":1023,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1023","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1023","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value.\nThis log entry depends on a user-provided value.\nThis log entry depends on a user-provided value.\nThis log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":329,"end_line":329,"start_column":25,"end_column":87},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1023/instances","dismissal_approved_by":null},{"number":1022,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1022","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1022","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value.\nThis log entry depends on a user-provided value.\nThis log entry depends on a user-provided value.\nThis log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":447,"end_line":447,"start_column":21,"end_column":87},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1022/instances","dismissal_approved_by":null},{"number":1021,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1021","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1021","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":250,"end_line":250,"start_column":24,"end_column":102},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1021/instances","dismissal_approved_by":null},{"number":1020,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-08-31T00:30:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1020","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1020","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":216,"end_line":216,"start_column":36,"end_column":109},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1020/instances","dismissal_approved_by":null},{"number":1019,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1019","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1019","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/incomplete-url-substring-sanitization","severity":"warning","description":"Incomplete URL substring sanitization","name":"py/incomplete-url-substring-sanitization","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.","help":"# Incomplete URL substring sanitization\nSanitizing untrusted URLs is a common technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain.\n\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n# Not safe, as \"evil-example.net/example.com\" would be accepted\n\n@app.route('/some/path/bad1')\ndef unsafe1(request):\n    target = request.args.get('target', '')\n    if \"example.com\" in target:\n        return redirect(target)\n\n# Not safe, as \"benign-looking-prefix-example.com\" would be accepted\n\n@app.route('/some/path/bad2')\ndef unsafe2(request):\n    target = request.args.get('target', '')\n    if target.endswith(\"example.com\"):\n        return redirect(target)\n\n\n\n#Simplest and safest approach is to use an allowlist\n\n@app.route('/some/path/good1')\ndef safe1(request):\n    allowlist = [\n        \"example.com/home\",\n        \"example.com/login\",\n    ]\n    target = request.args.get('target', '')\n    if target in allowlist:\n        return redirect(target)\n\n#More complex example allowing sub-domains.\n\n@app.route('/some/path/good2')\ndef safe2(request):\n    target = request.args.get('target', '')\n    host = urlparse(target).hostname\n    #Note the '.' preceding example.com\n    if host and host.endswith(\".example.com\"):\n        return redirect(target)\n\n\n```\nThe first two examples show unsafe checks that are easily bypassed. In `unsafe1` the attacker can simply add `example.com` anywhere in the url. For example, `http://evil-example.net/example.com`.\n\nIn `unsafe2` the attacker must use a hostname ending in `example.com`, but that is easy to do. For example, `http://benign-looking-prefix-example.com`.\n\nThe second two examples show safe checks. In `safe1`, an allowlist is used. Although fairly inflexible, this is easy to get right and is most likely to be safe.\n\nIn `safe2`, `urlparse` is used to parse the URL, then the hostname is checked to make sure it ends with `.example.com`.\n\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"The string example.com may be at an arbitrary position in the sanitized URL."},"location":{"path":"archive/backup-20241230/tests_security/test_log_injection_prevention.py","start_line":211,"end_line":211,"start_column":24,"end_column":50},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1019/instances","dismissal_approved_by":null},{"number":1018,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1018","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1018","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/incomplete-url-substring-sanitization","severity":"warning","description":"Incomplete URL substring sanitization","name":"py/incomplete-url-substring-sanitization","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.","help":"# Incomplete URL substring sanitization\nSanitizing untrusted URLs is a common technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain.\n\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n# Not safe, as \"evil-example.net/example.com\" would be accepted\n\n@app.route('/some/path/bad1')\ndef unsafe1(request):\n    target = request.args.get('target', '')\n    if \"example.com\" in target:\n        return redirect(target)\n\n# Not safe, as \"benign-looking-prefix-example.com\" would be accepted\n\n@app.route('/some/path/bad2')\ndef unsafe2(request):\n    target = request.args.get('target', '')\n    if target.endswith(\"example.com\"):\n        return redirect(target)\n\n\n\n#Simplest and safest approach is to use an allowlist\n\n@app.route('/some/path/good1')\ndef safe1(request):\n    allowlist = [\n        \"example.com/home\",\n        \"example.com/login\",\n    ]\n    target = request.args.get('target', '')\n    if target in allowlist:\n        return redirect(target)\n\n#More complex example allowing sub-domains.\n\n@app.route('/some/path/good2')\ndef safe2(request):\n    target = request.args.get('target', '')\n    host = urlparse(target).hostname\n    #Note the '.' preceding example.com\n    if host and host.endswith(\".example.com\"):\n        return redirect(target)\n\n\n```\nThe first two examples show unsafe checks that are easily bypassed. In `unsafe1` the attacker can simply add `example.com` anywhere in the url. For example, `http://evil-example.net/example.com`.\n\nIn `unsafe2` the attacker must use a hostname ending in `example.com`, but that is easy to do. For example, `http://benign-looking-prefix-example.com`.\n\nThe second two examples show safe checks. In `safe1`, an allowlist is used. Although fairly inflexible, this is easy to get right and is most likely to be safe.\n\nIn `safe2`, `urlparse` is used to parse the URL, then the hostname is checked to make sure it ends with `.example.com`.\n\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"The string example.com may be at an arbitrary position in the sanitized URL."},"location":{"path":"tests/security/test_log_injection_prevention.py","start_line":211,"end_line":211,"start_column":24,"end_column":50},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1018/instances","dismissal_approved_by":null},{"number":1017,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1017","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1017","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/incomplete-url-substring-sanitization","severity":"warning","description":"Incomplete URL substring sanitization","name":"py/incomplete-url-substring-sanitization","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.","help":"# Incomplete URL substring sanitization\nSanitizing untrusted URLs is a common technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain.\n\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n# Not safe, as \"evil-example.net/example.com\" would be accepted\n\n@app.route('/some/path/bad1')\ndef unsafe1(request):\n    target = request.args.get('target', '')\n    if \"example.com\" in target:\n        return redirect(target)\n\n# Not safe, as \"benign-looking-prefix-example.com\" would be accepted\n\n@app.route('/some/path/bad2')\ndef unsafe2(request):\n    target = request.args.get('target', '')\n    if target.endswith(\"example.com\"):\n        return redirect(target)\n\n\n\n#Simplest and safest approach is to use an allowlist\n\n@app.route('/some/path/good1')\ndef safe1(request):\n    allowlist = [\n        \"example.com/home\",\n        \"example.com/login\",\n    ]\n    target = request.args.get('target', '')\n    if target in allowlist:\n        return redirect(target)\n\n#More complex example allowing sub-domains.\n\n@app.route('/some/path/good2')\ndef safe2(request):\n    target = request.args.get('target', '')\n    host = urlparse(target).hostname\n    #Note the '.' preceding example.com\n    if host and host.endswith(\".example.com\"):\n        return redirect(target)\n\n\n```\nThe first two examples show unsafe checks that are easily bypassed. In `unsafe1` the attacker can simply add `example.com` anywhere in the url. For example, `http://evil-example.net/example.com`.\n\nIn `unsafe2` the attacker must use a hostname ending in `example.com`, but that is easy to do. For example, `http://benign-looking-prefix-example.com`.\n\nThe second two examples show safe checks. In `safe1`, an allowlist is used. Although fairly inflexible, this is easy to get right and is most likely to be safe.\n\nIn `safe2`, `urlparse` is used to parse the URL, then the hostname is checked to make sure it ends with `.example.com`.\n\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"The string example.com may be at an arbitrary position in the sanitized URL."},"location":{"path":"backup/tests_security/test_log_injection_prevention.py","start_line":211,"end_line":211,"start_column":24,"end_column":50},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1017/instances","dismissal_approved_by":null},{"number":1016,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1016","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1016","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"backup/tests_backend/test_multimodal_system.py","start_line":233,"end_line":233,"start_column":23,"end_column":85},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1016/instances","dismissal_approved_by":null},{"number":1015,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1015","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1015","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"archive/backup-20241230/tests_backend/test_multimodal_system.py","start_line":233,"end_line":233,"start_column":23,"end_column":85},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1015/instances","dismissal_approved_by":null},{"number":1014,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1014","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1014","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"tests/security/test_enhanced_security.py","start_line":61,"end_line":61,"start_column":15,"end_column":84},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1014/instances","dismissal_approved_by":null},{"number":1013,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1013","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1013","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."},"location":{"path":"scripts/migration/setup_with_github_secrets.py","start_line":273,"end_line":273,"start_column":23,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1013/instances","dismissal_approved_by":null},{"number":1012,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1012","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1012","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."},"location":{"path":"scripts/migration/setup_with_github_secrets.py","start_line":112,"end_line":112,"start_column":23,"end_column":77},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1012/instances","dismissal_approved_by":null},{"number":1011,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1011","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1011","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."},"location":{"path":"scripts/migration/setup_with_github_secrets.py","start_line":109,"end_line":109,"start_column":27,"end_column":78},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1011/instances","dismissal_approved_by":null},{"number":1010,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1010","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1010","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."},"location":{"path":"scripts/migration/setup_with_github_secrets.py","start_line":104,"end_line":104,"start_column":23,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1010/instances","dismissal_approved_by":null},{"number":1009,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1009","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1009","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."},"location":{"path":"scripts/migration/setup_with_github_secrets.py","start_line":82,"end_line":82,"start_column":15,"end_column":80},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1009/instances","dismissal_approved_by":null},{"number":1008,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1008","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1008","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."},"location":{"path":"scripts/migration/setup_with_github_secrets.py","start_line":81,"end_line":81,"start_column":15,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1008/instances","dismissal_approved_by":null},{"number":1007,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1007","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1007","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."},"location":{"path":"tests/qa-automation/run_tests_with_secrets.py","start_line":82,"end_line":82,"start_column":11,"end_column":81},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1007/instances","dismissal_approved_by":null},{"number":1006,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1006","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1006","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text."},"location":{"path":"tests/qa-automation/run_tests_with_secrets.py","start_line":69,"end_line":69,"start_column":19,"end_column":50},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1006/instances","dismissal_approved_by":null},{"number":1005,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1005","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1005","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text."},"location":{"path":"tests/qa-automation/run_tests_with_secrets.py","start_line":67,"end_line":67,"start_column":19,"end_column":45},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1005/instances","dismissal_approved_by":null},{"number":1004,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1004","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1004","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."},"location":{"path":"tests/qa-automation/run_tests_with_secrets.py","start_line":37,"end_line":37,"start_column":15,"end_column":61},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1004/instances","dismissal_approved_by":null},{"number":1003,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1003","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1003","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."},"location":{"path":"scripts/migration/run_migration_github.py","start_line":89,"end_line":89,"start_column":19,"end_column":63},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1003/instances","dismissal_approved_by":null},{"number":1002,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1002","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1002","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text."},"location":{"path":"scripts/migration/run_migration_with_gh_cli.py","start_line":70,"end_line":70,"start_column":19,"end_column":98},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1002/instances","dismissal_approved_by":null},{"number":1001,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1001","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1001","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text."},"location":{"path":"scripts/migration/run_migration_with_gh_cli.py","start_line":67,"end_line":67,"start_column":23,"end_column":66},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1001/instances","dismissal_approved_by":null},{"number":1000,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1000","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1000","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text."},"location":{"path":"scripts/migration/run_migration_with_gh_cli.py","start_line":62,"end_line":62,"start_column":19,"end_column":71},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1000/instances","dismissal_approved_by":null},{"number":999,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/999","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/999","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."},"location":{"path":"scripts/migration/run_migration_github.py","start_line":38,"end_line":38,"start_column":19,"end_column":65},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/999/instances","dismissal_approved_by":null},{"number":998,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/998","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/998","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."},"location":{"path":"scripts/migration/run_migration_github.py","start_line":34,"end_line":34,"start_column":19,"end_column":58},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/998/instances","dismissal_approved_by":null},{"number":997,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-19T23:35:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/997","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/997","state":"dismissed","fixed_at":null,"dismissed_by":{"login":"AnalineS","id":11664545,"node_id":"MDQ6VXNlcjExNjY0NTQ1","avatar_url":"https://avatars.githubusercontent.com/u/11664545?v=4","gravatar_id":"","url":"https://api.github.com/users/AnalineS","html_url":"https://github.com/AnalineS","followers_url":"https://api.github.com/users/AnalineS/followers","following_url":"https://api.github.com/users/AnalineS/following{/other_user}","gists_url":"https://api.github.com/users/AnalineS/gists{/gist_id}","starred_url":"https://api.github.com/users/AnalineS/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AnalineS/subscriptions","organizations_url":"https://api.github.com/users/AnalineS/orgs","repos_url":"https://api.github.com/users/AnalineS/repos","events_url":"https://api.github.com/users/AnalineS/events{/privacy}","received_events_url":"https://api.github.com/users/AnalineS/received_events","type":"User","user_view_type":"public","site_admin":false},"dismissed_at":"2025-09-19T23:35:06Z","dismissed_reason":"won't fix","dismissed_comment":"Código Redis removido - arquivo estava órfão e não utilizado em lugar algum do sistema","rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"dismissed","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (password) as clear text."},"location":{"path":"apps/backend/core/performance/redis_rate_limiter.py","start_line":77,"end_line":77,"start_column":29,"end_column":118},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/997/instances","dismissal_approved_by":null},{"number":996,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/996","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/996","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"tests/qa-automation/test_scenarios/medical_accuracy.py","start_line":125,"end_line":125,"start_column":21,"end_column":123},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/996/instances","dismissal_approved_by":null},{"number":995,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/995","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/995","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"tests/qa-automation/test_scenarios/medical_accuracy.py","start_line":108,"end_line":108,"start_column":30,"end_column":67},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/995/instances","dismissal_approved_by":null},{"number":994,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/994","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/994","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"tests/qa-automation/test_scenarios/medical_accuracy.py","start_line":103,"end_line":103,"start_column":34,"end_column":82},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/994/instances","dismissal_approved_by":null},{"number":993,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/993","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/993","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"tests/qa-automation/test_scenarios/medical_accuracy.py","start_line":101,"end_line":101,"start_column":33,"end_column":85},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/993/instances","dismissal_approved_by":null},{"number":992,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/992","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/992","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"tests/qa-automation/test_scenarios/medical_accuracy.py","start_line":87,"end_line":87,"start_column":29,"end_column":57},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/992/instances","dismissal_approved_by":null},{"number":991,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/991","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/991","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"tests/qa-automation/main_test_runner.py","start_line":158,"end_line":158,"start_column":30,"end_column":72},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/991/instances","dismissal_approved_by":null},{"number":990,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/990","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/990","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"tests/qa-automation/main_test_runner.py","start_line":155,"end_line":155,"start_column":29,"end_column":105},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/990/instances","dismissal_approved_by":null},{"number":989,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/989","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/989","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"tests/qa-automation/main_test_runner.py","start_line":144,"end_line":144,"start_column":25,"end_column":67},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/989/instances","dismissal_approved_by":null},{"number":988,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/988","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/988","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"tests/qa-automation/test_scenarios/integration_e2e.py","start_line":103,"end_line":103,"start_column":21,"end_column":119},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/988/instances","dismissal_approved_by":null},{"number":987,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/987","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/987","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"tests/qa-automation/test_scenarios/integration_e2e.py","start_line":86,"end_line":86,"start_column":30,"end_column":67},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/987/instances","dismissal_approved_by":null},{"number":986,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/986","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/986","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"tests/qa-automation/test_scenarios/integration_e2e.py","start_line":81,"end_line":81,"start_column":34,"end_column":82},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/986/instances","dismissal_approved_by":null},{"number":985,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/985","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/985","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"tests/qa-automation/test_scenarios/integration_e2e.py","start_line":79,"end_line":79,"start_column":33,"end_column":85},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/985/instances","dismissal_approved_by":null},{"number":984,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/984","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/984","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"tests/qa-automation/test_scenarios/integration_e2e.py","start_line":66,"end_line":66,"start_column":29,"end_column":59},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/984/instances","dismissal_approved_by":null},{"number":983,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/983","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/983","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text."},"location":{"path":"apps/backend/check_astra_env_fixed.py","start_line":95,"end_line":95,"start_column":15,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/983/instances","dismissal_approved_by":null},{"number":982,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/982","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/982","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text."},"location":{"path":"apps/backend/check_astra_env_fixed.py","start_line":94,"end_line":94,"start_column":15,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/982/instances","dismissal_approved_by":null},{"number":981,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/981","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/981","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text."},"location":{"path":"apps/backend/check_astra_env.py","start_line":95,"end_line":95,"start_column":15,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/981/instances","dismissal_approved_by":null},{"number":980,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/980","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/980","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text."},"location":{"path":"apps/backend/check_astra_env.py","start_line":94,"end_line":94,"start_column":15,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/980/instances","dismissal_approved_by":null},{"number":979,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/979","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/979","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/observability.py","start_line":245,"end_line":249,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/979/instances","dismissal_approved_by":null},{"number":978,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/978","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/978","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/multimodal_blueprint.py","start_line":126,"end_line":133,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/978/instances","dismissal_approved_by":null},{"number":977,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/977","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/977","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":1816,"end_line":1820,"start_column":28,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/977/instances","dismissal_approved_by":null},{"number":976,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/976","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/976","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":1581,"end_line":1585,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/976/instances","dismissal_approved_by":null},{"number":975,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/975","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/975","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":1527,"end_line":1531,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/975/instances","dismissal_approved_by":null},{"number":974,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/974","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/974","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":1357,"end_line":1361,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/974/instances","dismissal_approved_by":null},{"number":973,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/973","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/973","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":1268,"end_line":1272,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/973/instances","dismissal_approved_by":null},{"number":972,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/972","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/972","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":1204,"end_line":1208,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/972/instances","dismissal_approved_by":null},{"number":971,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/971","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/971","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":1157,"end_line":1161,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/971/instances","dismissal_approved_by":null},{"number":970,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/970","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/970","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":1132,"end_line":1136,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/970/instances","dismissal_approved_by":null},{"number":969,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/969","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/969","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":1070,"end_line":1074,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/969/instances","dismissal_approved_by":null},{"number":968,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/968","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/968","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":1042,"end_line":1046,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/968/instances","dismissal_approved_by":null},{"number":967,"created_at":"2025-08-31T00:23:17Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/967","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/967","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/cache_blueprint.py","start_line":325,"end_line":329,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/967/instances","dismissal_approved_by":null},{"number":966,"created_at":"2025-08-31T00:21:04Z","updated_at":"2025-08-31T00:28:24Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/966","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/966","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable key."},"location":{"path":"apps/frontend-nextjs/src/utils/apiCache.ts","start_line":172,"end_line":172,"start_column":11,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/966/instances","dismissal_approved_by":null},{"number":965,"created_at":"2025-08-31T00:21:04Z","updated_at":"2025-08-31T00:28:24Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/965","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/965","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable key."},"location":{"path":"apps/frontend-nextjs/src/utils/apiCache.ts","start_line":115,"end_line":115,"start_column":11,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/965/instances","dismissal_approved_by":null},{"number":964,"created_at":"2025-08-31T00:21:04Z","updated_at":"2025-08-31T00:28:24Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/964","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/964","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable hybridKey."},"location":{"path":"apps/frontend-nextjs/src/utils/apiCache.ts","start_line":84,"end_line":84,"start_column":15,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/964/instances","dismissal_approved_by":null},{"number":963,"created_at":"2025-08-31T00:21:04Z","updated_at":"2025-08-31T00:28:24Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/963","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/963","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import FirestoreCacheUtils."},"location":{"path":"apps/frontend-nextjs/src/services/hybridCache.ts","start_line":8,"end_line":8,"start_column":1,"end_column":86},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/963/instances","dismissal_approved_by":null},{"number":962,"created_at":"2025-08-31T00:21:04Z","updated_at":"2025-08-31T00:28:24Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/962","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/962","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import AstraResponse."},"location":{"path":"apps/frontend-nextjs/src/services/fallbackSystem.ts","start_line":7,"end_line":7,"start_column":1,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/962/instances","dismissal_approved_by":null},{"number":961,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T10:17:35Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/961","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/961","state":"fixed","fixed_at":"2025-08-31T10:17:33Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/duplicate-property","severity":"warning","description":"Duplicate property","name":"js/duplicate-property","tags":["external/cwe/cwe-563","maintainability","quality","readability"],"full_description":"Listing the same property twice in one object literal is redundant and may indicate a copy-paste mistake.","help":"# Duplicate property\nIn ECMAScript 2015 and above, as well as ECMAScript 5 non-strict mode, an object literal may define the same property multiple times, with later definitions overwriting earlier ones. If all definitions assign the same value to the property, this will not to lead to problems at runtime, but it makes the code harder to read and maintain.\n\n\n## Recommendation\nEliminate the spurious redefinition.\n\n\n## Example\nIn the following example, the object literal passed to method `css` has two definitions of property `backgroundColor`, both setting it to value `\"orange\"`.\n\n\n```javascript\n$(\".alert\").css({\n  backgroundColor: \"orange\",\n  fontWeight: \"bold\",\n  backgroundColor: \"orange\"\n});\n```\nThe second definition is spurious and should be removed:\n\n\n```javascript\n$(\".alert\").css({\n  backgroundColor: \"orange\",\n  fontWeight: \"bold\"\n});\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Annex C. ECMA, 2011.\n* Ecma International, *ECMAScript Language Definition*, 6th Edition, Annex E. ECMA, 2015.\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"84f8d31f0f67b1861ad26d0dc5584bcb2f1ad67d","message":{"text":"This property is duplicated in a later property."},"location":{"path":"apps/frontend-nextjs/next.config.js","start_line":13,"end_line":13,"start_column":3,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/961/instances","dismissal_approved_by":null},{"number":960,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/960","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/960","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/superfluous-trailing-arguments","severity":"warning","description":"Superfluous trailing arguments","name":"js/superfluous-trailing-arguments","tags":["correctness","external/cwe/cwe-685","language-features","quality","reliability"],"full_description":"A function is invoked with extra trailing arguments that are ignored.","help":"# Superfluous trailing arguments\nFunction calls in JavaScript may pass an arbitrary number of arguments to the invoked function. If the invoked function declares fewer parameters than arguments were passed, the remaining arguments can only be accessed through the `arguments` object. Hence, if a function is passed too many arguments but does *not* use the `arguments` object, the remaining arguments are useless. Such calls often indicate incomplete refactorings, or may point to a misunderstanding of the functionality of the invoked function.\n\n\n## Recommendation\nRemove the extra parameters if they are unnecessary. Otherwise, further investigation may be necessary to determine how to update the function call.\n\n\n## Example\nThe following code snippet defines a function `f` that does not declare any parameters and does not use the `arguments` object. The only call to `f` passes it a single argument `42`, which is not used by `f` in any way and thus can be removed.\n\n\n```javascript\nfunction f() {\n\tvar x = 23;\n\treturn x+19;\n}\n\nf(42);\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 10. ECMA, 2011.\n* Common Weakness Enumeration: [CWE-685](https://cwe.mitre.org/data/definitions/685.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Superfluous arguments passed to constructor of class IntersectionObserver."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/index.ts","start_line":277,"end_line":286,"start_column":9,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/960/instances","dismissal_approved_by":null},{"number":959,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/959","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/959","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/superfluous-trailing-arguments","severity":"warning","description":"Superfluous trailing arguments","name":"js/superfluous-trailing-arguments","tags":["correctness","external/cwe/cwe-685","language-features","quality","reliability"],"full_description":"A function is invoked with extra trailing arguments that are ignored.","help":"# Superfluous trailing arguments\nFunction calls in JavaScript may pass an arbitrary number of arguments to the invoked function. If the invoked function declares fewer parameters than arguments were passed, the remaining arguments can only be accessed through the `arguments` object. Hence, if a function is passed too many arguments but does *not* use the `arguments` object, the remaining arguments are useless. Such calls often indicate incomplete refactorings, or may point to a misunderstanding of the functionality of the invoked function.\n\n\n## Recommendation\nRemove the extra parameters if they are unnecessary. Otherwise, further investigation may be necessary to determine how to update the function call.\n\n\n## Example\nThe following code snippet defines a function `f` that does not declare any parameters and does not use the `arguments` object. The only call to `f` passes it a single argument `42`, which is not used by `f` in any way and thus can be removed.\n\n\n```javascript\nfunction f() {\n\tvar x = 23;\n\treturn x+19;\n}\n\nf(42);\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 10. ECMA, 2011.\n* Common Weakness Enumeration: [CWE-685](https://cwe.mitre.org/data/definitions/685.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Superfluous argument passed to constructor of class ResizeObserver."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":120,"end_line":123,"start_column":47,"end_column":6},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/959/instances","dismissal_approved_by":null},{"number":958,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/958","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/958","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/superfluous-trailing-arguments","severity":"warning","description":"Superfluous trailing arguments","name":"js/superfluous-trailing-arguments","tags":["correctness","external/cwe/cwe-685","language-features","quality","reliability"],"full_description":"A function is invoked with extra trailing arguments that are ignored.","help":"# Superfluous trailing arguments\nFunction calls in JavaScript may pass an arbitrary number of arguments to the invoked function. If the invoked function declares fewer parameters than arguments were passed, the remaining arguments can only be accessed through the `arguments` object. Hence, if a function is passed too many arguments but does *not* use the `arguments` object, the remaining arguments are useless. Such calls often indicate incomplete refactorings, or may point to a misunderstanding of the functionality of the invoked function.\n\n\n## Recommendation\nRemove the extra parameters if they are unnecessary. Otherwise, further investigation may be necessary to determine how to update the function call.\n\n\n## Example\nThe following code snippet defines a function `f` that does not declare any parameters and does not use the `arguments` object. The only call to `f` passes it a single argument `42`, which is not used by `f` in any way and thus can be removed.\n\n\n```javascript\nfunction f() {\n\tvar x = 23;\n\treturn x+19;\n}\n\nf(42);\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 10. ECMA, 2011.\n* Common Weakness Enumeration: [CWE-685](https://cwe.mitre.org/data/definitions/685.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Superfluous arguments passed to constructor of class IntersectionObserver."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":85,"end_line":92,"start_column":7,"end_column":8},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/958/instances","dismissal_approved_by":null},{"number":957,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/957","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/957","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/superfluous-trailing-arguments","severity":"warning","description":"Superfluous trailing arguments","name":"js/superfluous-trailing-arguments","tags":["correctness","external/cwe/cwe-685","language-features","quality","reliability"],"full_description":"A function is invoked with extra trailing arguments that are ignored.","help":"# Superfluous trailing arguments\nFunction calls in JavaScript may pass an arbitrary number of arguments to the invoked function. If the invoked function declares fewer parameters than arguments were passed, the remaining arguments can only be accessed through the `arguments` object. Hence, if a function is passed too many arguments but does *not* use the `arguments` object, the remaining arguments are useless. Such calls often indicate incomplete refactorings, or may point to a misunderstanding of the functionality of the invoked function.\n\n\n## Recommendation\nRemove the extra parameters if they are unnecessary. Otherwise, further investigation may be necessary to determine how to update the function call.\n\n\n## Example\nThe following code snippet defines a function `f` that does not declare any parameters and does not use the `arguments` object. The only call to `f` passes it a single argument `42`, which is not used by `f` in any way and thus can be removed.\n\n\n```javascript\nfunction f() {\n\tvar x = 23;\n\treturn x+19;\n}\n\nf(42);\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 10. ECMA, 2011.\n* Common Weakness Enumeration: [CWE-685](https://cwe.mitre.org/data/definitions/685.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Superfluous arguments passed to constructor of class IntersectionObserver."},"location":{"path":"apps/frontend-nextjs/src/hooks/useScrollAnimation.ts","start_line":35,"end_line":53,"start_column":7,"end_column":8},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/957/instances","dismissal_approved_by":null},{"number":956,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/956","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/956","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/superfluous-trailing-arguments","severity":"warning","description":"Superfluous trailing arguments","name":"js/superfluous-trailing-arguments","tags":["correctness","external/cwe/cwe-685","language-features","quality","reliability"],"full_description":"A function is invoked with extra trailing arguments that are ignored.","help":"# Superfluous trailing arguments\nFunction calls in JavaScript may pass an arbitrary number of arguments to the invoked function. If the invoked function declares fewer parameters than arguments were passed, the remaining arguments can only be accessed through the `arguments` object. Hence, if a function is passed too many arguments but does *not* use the `arguments` object, the remaining arguments are useless. Such calls often indicate incomplete refactorings, or may point to a misunderstanding of the functionality of the invoked function.\n\n\n## Recommendation\nRemove the extra parameters if they are unnecessary. Otherwise, further investigation may be necessary to determine how to update the function call.\n\n\n## Example\nThe following code snippet defines a function `f` that does not declare any parameters and does not use the `arguments` object. The only call to `f` passes it a single argument `42`, which is not used by `f` in any way and thus can be removed.\n\n\n```javascript\nfunction f() {\n\tvar x = 23;\n\treturn x+19;\n}\n\nf(42);\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 10. ECMA, 2011.\n* Common Weakness Enumeration: [CWE-685](https://cwe.mitre.org/data/definitions/685.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Superfluous arguments passed to constructor of class IntersectionObserver."},"location":{"path":"apps/frontend-nextjs/src/components/ui/AnimationSystem.tsx","start_line":78,"end_line":81,"start_column":7,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/956/instances","dismissal_approved_by":null},{"number":955,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/955","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/955","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/superfluous-trailing-arguments","severity":"warning","description":"Superfluous trailing arguments","name":"js/superfluous-trailing-arguments","tags":["correctness","external/cwe/cwe-685","language-features","quality","reliability"],"full_description":"A function is invoked with extra trailing arguments that are ignored.","help":"# Superfluous trailing arguments\nFunction calls in JavaScript may pass an arbitrary number of arguments to the invoked function. If the invoked function declares fewer parameters than arguments were passed, the remaining arguments can only be accessed through the `arguments` object. Hence, if a function is passed too many arguments but does *not* use the `arguments` object, the remaining arguments are useless. Such calls often indicate incomplete refactorings, or may point to a misunderstanding of the functionality of the invoked function.\n\n\n## Recommendation\nRemove the extra parameters if they are unnecessary. Otherwise, further investigation may be necessary to determine how to update the function call.\n\n\n## Example\nThe following code snippet defines a function `f` that does not declare any parameters and does not use the `arguments` object. The only call to `f` passes it a single argument `42`, which is not used by `f` in any way and thus can be removed.\n\n\n```javascript\nfunction f() {\n\tvar x = 23;\n\treturn x+19;\n}\n\nf(42);\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 10. ECMA, 2011.\n* Common Weakness Enumeration: [CWE-685](https://cwe.mitre.org/data/definitions/685.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Superfluous arguments passed to constructor of class IntersectionObserver."},"location":{"path":"apps/frontend-nextjs/src/components/optimization/LazyComponent.tsx","start_line":212,"end_line":223,"start_column":7,"end_column":8},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/955/instances","dismissal_approved_by":null},{"number":954,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/954","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/954","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/superfluous-trailing-arguments","severity":"warning","description":"Superfluous trailing arguments","name":"js/superfluous-trailing-arguments","tags":["correctness","external/cwe/cwe-685","language-features","quality","reliability"],"full_description":"A function is invoked with extra trailing arguments that are ignored.","help":"# Superfluous trailing arguments\nFunction calls in JavaScript may pass an arbitrary number of arguments to the invoked function. If the invoked function declares fewer parameters than arguments were passed, the remaining arguments can only be accessed through the `arguments` object. Hence, if a function is passed too many arguments but does *not* use the `arguments` object, the remaining arguments are useless. Such calls often indicate incomplete refactorings, or may point to a misunderstanding of the functionality of the invoked function.\n\n\n## Recommendation\nRemove the extra parameters if they are unnecessary. Otherwise, further investigation may be necessary to determine how to update the function call.\n\n\n## Example\nThe following code snippet defines a function `f` that does not declare any parameters and does not use the `arguments` object. The only call to `f` passes it a single argument `42`, which is not used by `f` in any way and thus can be removed.\n\n\n```javascript\nfunction f() {\n\tvar x = 23;\n\treturn x+19;\n}\n\nf(42);\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 10. ECMA, 2011.\n* Common Weakness Enumeration: [CWE-685](https://cwe.mitre.org/data/definitions/685.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Superfluous argument passed to constructor of class ResizeObserver."},"location":{"path":"apps/frontend-nextjs/src/components/performance/LayoutStabilizer.tsx","start_line":28,"end_line":35,"start_column":41,"end_column":6},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/954/instances","dismissal_approved_by":null},{"number":953,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/953","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/953","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/superfluous-trailing-arguments","severity":"warning","description":"Superfluous trailing arguments","name":"js/superfluous-trailing-arguments","tags":["correctness","external/cwe/cwe-685","language-features","quality","reliability"],"full_description":"A function is invoked with extra trailing arguments that are ignored.","help":"# Superfluous trailing arguments\nFunction calls in JavaScript may pass an arbitrary number of arguments to the invoked function. If the invoked function declares fewer parameters than arguments were passed, the remaining arguments can only be accessed through the `arguments` object. Hence, if a function is passed too many arguments but does *not* use the `arguments` object, the remaining arguments are useless. Such calls often indicate incomplete refactorings, or may point to a misunderstanding of the functionality of the invoked function.\n\n\n## Recommendation\nRemove the extra parameters if they are unnecessary. Otherwise, further investigation may be necessary to determine how to update the function call.\n\n\n## Example\nThe following code snippet defines a function `f` that does not declare any parameters and does not use the `arguments` object. The only call to `f` passes it a single argument `42`, which is not used by `f` in any way and thus can be removed.\n\n\n```javascript\nfunction f() {\n\tvar x = 23;\n\treturn x+19;\n}\n\nf(42);\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 10. ECMA, 2011.\n* Common Weakness Enumeration: [CWE-685](https://cwe.mitre.org/data/definitions/685.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Superfluous arguments passed to constructor of class IntersectionObserver."},"location":{"path":"apps/frontend-nextjs/src/components/common/OptimizedImage.tsx","start_line":52,"end_line":62,"start_column":7,"end_column":8},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/953/instances","dismissal_approved_by":null},{"number":952,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/952","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/952","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/superfluous-trailing-arguments","severity":"warning","description":"Superfluous trailing arguments","name":"js/superfluous-trailing-arguments","tags":["correctness","external/cwe/cwe-685","language-features","quality","reliability"],"full_description":"A function is invoked with extra trailing arguments that are ignored.","help":"# Superfluous trailing arguments\nFunction calls in JavaScript may pass an arbitrary number of arguments to the invoked function. If the invoked function declares fewer parameters than arguments were passed, the remaining arguments can only be accessed through the `arguments` object. Hence, if a function is passed too many arguments but does *not* use the `arguments` object, the remaining arguments are useless. Such calls often indicate incomplete refactorings, or may point to a misunderstanding of the functionality of the invoked function.\n\n\n## Recommendation\nRemove the extra parameters if they are unnecessary. Otherwise, further investigation may be necessary to determine how to update the function call.\n\n\n## Example\nThe following code snippet defines a function `f` that does not declare any parameters and does not use the `arguments` object. The only call to `f` passes it a single argument `42`, which is not used by `f` in any way and thus can be removed.\n\n\n```javascript\nfunction f() {\n\tvar x = 23;\n\treturn x+19;\n}\n\nf(42);\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 10. ECMA, 2011.\n* Common Weakness Enumeration: [CWE-685](https://cwe.mitre.org/data/definitions/685.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Superfluous arguments passed to constructor of class IntersectionObserver."},"location":{"path":"apps/frontend-nextjs/src/components/animations/PageTransition.tsx","start_line":350,"end_line":355,"start_column":7,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/952/instances","dismissal_approved_by":null},{"number":951,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/951","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/951","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/superfluous-trailing-arguments","severity":"warning","description":"Superfluous trailing arguments","name":"js/superfluous-trailing-arguments","tags":["correctness","external/cwe/cwe-685","language-features","quality","reliability"],"full_description":"A function is invoked with extra trailing arguments that are ignored.","help":"# Superfluous trailing arguments\nFunction calls in JavaScript may pass an arbitrary number of arguments to the invoked function. If the invoked function declares fewer parameters than arguments were passed, the remaining arguments can only be accessed through the `arguments` object. Hence, if a function is passed too many arguments but does *not* use the `arguments` object, the remaining arguments are useless. Such calls often indicate incomplete refactorings, or may point to a misunderstanding of the functionality of the invoked function.\n\n\n## Recommendation\nRemove the extra parameters if they are unnecessary. Otherwise, further investigation may be necessary to determine how to update the function call.\n\n\n## Example\nThe following code snippet defines a function `f` that does not declare any parameters and does not use the `arguments` object. The only call to `f` passes it a single argument `42`, which is not used by `f` in any way and thus can be removed.\n\n\n```javascript\nfunction f() {\n\tvar x = 23;\n\treturn x+19;\n}\n\nf(42);\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 10. ECMA, 2011.\n* Common Weakness Enumeration: [CWE-685](https://cwe.mitre.org/data/definitions/685.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Superfluous arguments passed to constructor of class IntersectionObserver."},"location":{"path":"apps/frontend-nextjs/src/components/animations/PageTransition.tsx","start_line":175,"end_line":180,"start_column":7,"end_column":58},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/951/instances","dismissal_approved_by":null},{"number":950,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/950","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/950","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":612,"end_line":612,"start_column":1,"end_column":2},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/950/instances","dismissal_approved_by":null},{"number":949,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/949","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/949","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: 'try' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":604,"end_line":604,"start_column":5,"end_column":6},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/949/instances","dismissal_approved_by":null},{"number":948,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/948","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/948","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":604,"end_line":604,"start_column":3,"end_column":4},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/948/instances","dismissal_approved_by":null},{"number":947,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/947","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/947","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":523,"end_line":523,"start_column":5,"end_column":6},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/947/instances","dismissal_approved_by":null},{"number":946,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/946","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/946","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":522,"end_line":522,"start_column":8,"end_column":9},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/946/instances","dismissal_approved_by":null},{"number":945,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/945","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/945","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ':' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":521,"end_line":521,"start_column":24,"end_column":25},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/945/instances","dismissal_approved_by":null},{"number":944,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/944","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/944","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":521,"end_line":521,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/944/instances","dismissal_approved_by":null},{"number":943,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/943","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/943","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":520,"end_line":520,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/943/instances","dismissal_approved_by":null},{"number":942,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/942","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/942","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":519,"end_line":519,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/942/instances","dismissal_approved_by":null},{"number":941,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/941","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/941","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":518,"end_line":518,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/941/instances","dismissal_approved_by":null},{"number":940,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/940","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/940","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":517,"end_line":517,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/940/instances","dismissal_approved_by":null},{"number":939,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/939","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/939","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ':' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":516,"end_line":516,"start_column":31,"end_column":32},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/939/instances","dismissal_approved_by":null},{"number":938,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/938","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/938","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":516,"end_line":516,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/938/instances","dismissal_approved_by":null},{"number":937,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/937","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/937","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":515,"end_line":515,"start_column":41,"end_column":42},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/937/instances","dismissal_approved_by":null},{"number":936,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/936","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/936","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":515,"end_line":515,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/936/instances","dismissal_approved_by":null},{"number":935,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/935","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/935","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":514,"end_line":514,"start_column":17,"end_column":18},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/935/instances","dismissal_approved_by":null},{"number":934,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/934","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/934","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: '>' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":514,"end_line":514,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/934/instances","dismissal_approved_by":null},{"number":933,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/933","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/933","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":499,"end_line":499,"start_column":5,"end_column":6},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/933/instances","dismissal_approved_by":null},{"number":932,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/932","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/932","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Type expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":498,"end_line":498,"start_column":8,"end_column":9},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/932/instances","dismissal_approved_by":null},{"number":931,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/931","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/931","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":497,"end_line":497,"start_column":44,"end_column":45},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/931/instances","dismissal_approved_by":null},{"number":930,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/930","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/930","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ';' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":497,"end_line":497,"start_column":35,"end_column":36},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/930/instances","dismissal_approved_by":null},{"number":929,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/929","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/929","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ';' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":497,"end_line":497,"start_column":14,"end_column":15},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/929/instances","dismissal_approved_by":null},{"number":928,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/928","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/928","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":496,"end_line":496,"start_column":77,"end_column":78},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/928/instances","dismissal_approved_by":null},{"number":927,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/927","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/927","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":496,"end_line":496,"start_column":76,"end_column":77},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/927/instances","dismissal_approved_by":null},{"number":926,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/926","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/926","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Property assignment expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":496,"end_line":496,"start_column":19,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/926/instances","dismissal_approved_by":null},{"number":925,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/925","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/925","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":496,"end_line":496,"start_column":17,"end_column":18},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/925/instances","dismissal_approved_by":null},{"number":924,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/924","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/924","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: '>' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":496,"end_line":496,"start_column":12,"end_column":13},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/924/instances","dismissal_approved_by":null},{"number":923,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/923","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/923","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":482,"end_line":482,"start_column":5,"end_column":6},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/923/instances","dismissal_approved_by":null},{"number":922,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/922","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/922","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Unterminated regular expression literal."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":481,"end_line":481,"start_column":8,"end_column":9},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/922/instances","dismissal_approved_by":null},{"number":921,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/921","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/921","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Type expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":480,"end_line":480,"start_column":38,"end_column":39},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/921/instances","dismissal_approved_by":null},{"number":920,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/920","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/920","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":480,"end_line":480,"start_column":34,"end_column":35},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/920/instances","dismissal_approved_by":null},{"number":919,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/919","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/919","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ';' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":480,"end_line":480,"start_column":26,"end_column":27},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/919/instances","dismissal_approved_by":null},{"number":918,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/918","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/918","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: 'catch' or 'finally' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":479,"end_line":479,"start_column":65,"end_column":66},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/918/instances","dismissal_approved_by":null},{"number":917,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/917","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/917","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":479,"end_line":479,"start_column":64,"end_column":65},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/917/instances","dismissal_approved_by":null},{"number":916,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/916","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/916","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Property assignment expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":479,"end_line":479,"start_column":19,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/916/instances","dismissal_approved_by":null},{"number":915,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/915","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/915","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":479,"end_line":479,"start_column":17,"end_column":18},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/915/instances","dismissal_approved_by":null},{"number":914,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/914","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/914","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: '>' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":479,"end_line":479,"start_column":12,"end_column":13},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/914/instances","dismissal_approved_by":null},{"number":913,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/913","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/913","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":304,"end_line":304,"start_column":5,"end_column":6},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/913/instances","dismissal_approved_by":null},{"number":912,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/912","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/912","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":303,"end_line":303,"start_column":8,"end_column":9},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/912/instances","dismissal_approved_by":null},{"number":911,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/911","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/911","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ':' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":302,"end_line":302,"start_column":24,"end_column":25},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/911/instances","dismissal_approved_by":null},{"number":910,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/910","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/910","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":302,"end_line":302,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/910/instances","dismissal_approved_by":null},{"number":909,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/909","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/909","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":301,"end_line":301,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/909/instances","dismissal_approved_by":null},{"number":908,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/908","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/908","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":300,"end_line":300,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/908/instances","dismissal_approved_by":null},{"number":907,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/907","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/907","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":299,"end_line":299,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/907/instances","dismissal_approved_by":null},{"number":906,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/906","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/906","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":298,"end_line":298,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/906/instances","dismissal_approved_by":null},{"number":905,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/905","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/905","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ':' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":297,"end_line":297,"start_column":31,"end_column":32},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/905/instances","dismissal_approved_by":null},{"number":904,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/904","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/904","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":297,"end_line":297,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/904/instances","dismissal_approved_by":null},{"number":903,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/903","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/903","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":296,"end_line":296,"start_column":41,"end_column":42},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/903/instances","dismissal_approved_by":null},{"number":902,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/902","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/902","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":296,"end_line":296,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/902/instances","dismissal_approved_by":null},{"number":901,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/901","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/901","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":295,"end_line":295,"start_column":17,"end_column":18},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/901/instances","dismissal_approved_by":null},{"number":900,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/900","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/900","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: '>' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":295,"end_line":295,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/900/instances","dismissal_approved_by":null},{"number":899,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/899","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/899","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":170,"end_line":170,"start_column":5,"end_column":6},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/899/instances","dismissal_approved_by":null},{"number":898,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/898","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/898","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":169,"end_line":169,"start_column":8,"end_column":9},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/898/instances","dismissal_approved_by":null},{"number":897,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/897","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/897","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ':' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":168,"end_line":168,"start_column":24,"end_column":25},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/897/instances","dismissal_approved_by":null},{"number":896,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/896","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/896","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":168,"end_line":168,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/896/instances","dismissal_approved_by":null},{"number":895,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/895","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/895","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":167,"end_line":167,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/895/instances","dismissal_approved_by":null},{"number":894,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/894","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/894","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":166,"end_line":166,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/894/instances","dismissal_approved_by":null},{"number":893,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/893","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/893","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":165,"end_line":165,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/893/instances","dismissal_approved_by":null},{"number":892,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/892","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/892","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":164,"end_line":164,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/892/instances","dismissal_approved_by":null},{"number":891,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/891","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/891","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ':' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":163,"end_line":163,"start_column":31,"end_column":32},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/891/instances","dismissal_approved_by":null},{"number":890,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/890","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/890","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":163,"end_line":163,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/890/instances","dismissal_approved_by":null},{"number":889,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/889","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/889","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":162,"end_line":162,"start_column":41,"end_column":42},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/889/instances","dismissal_approved_by":null},{"number":888,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/888","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/888","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":162,"end_line":162,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/888/instances","dismissal_approved_by":null},{"number":887,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/887","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/887","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":161,"end_line":161,"start_column":17,"end_column":18},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/887/instances","dismissal_approved_by":null},{"number":886,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/886","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/886","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: '>' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":161,"end_line":161,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/886/instances","dismissal_approved_by":null},{"number":885,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/885","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/885","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":143,"end_line":143,"start_column":5,"end_column":6},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/885/instances","dismissal_approved_by":null},{"number":884,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/884","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/884","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":142,"end_line":142,"start_column":8,"end_column":9},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/884/instances","dismissal_approved_by":null},{"number":883,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/883","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/883","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ':' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":141,"end_line":141,"start_column":24,"end_column":25},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/883/instances","dismissal_approved_by":null},{"number":882,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/882","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/882","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":141,"end_line":141,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/882/instances","dismissal_approved_by":null},{"number":881,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/881","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/881","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":140,"end_line":140,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/881/instances","dismissal_approved_by":null},{"number":880,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/880","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/880","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":139,"end_line":139,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/880/instances","dismissal_approved_by":null},{"number":879,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/879","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/879","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":138,"end_line":138,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/879/instances","dismissal_approved_by":null},{"number":878,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/878","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/878","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":137,"end_line":137,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/878/instances","dismissal_approved_by":null},{"number":877,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/877","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/877","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ':' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":136,"end_line":136,"start_column":31,"end_column":32},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/877/instances","dismissal_approved_by":null},{"number":876,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/876","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/876","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":136,"end_line":136,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/876/instances","dismissal_approved_by":null},{"number":875,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/875","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/875","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":135,"end_line":135,"start_column":41,"end_column":42},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/875/instances","dismissal_approved_by":null},{"number":874,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/874","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/874","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":135,"end_line":135,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/874/instances","dismissal_approved_by":null},{"number":873,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/873","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/873","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":134,"end_line":134,"start_column":17,"end_column":18},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/873/instances","dismissal_approved_by":null},{"number":872,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/872","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/872","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: '>' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":134,"end_line":134,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/872/instances","dismissal_approved_by":null},{"number":871,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/871","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/871","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":113,"end_line":113,"start_column":5,"end_column":6},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/871/instances","dismissal_approved_by":null},{"number":870,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/870","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/870","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":112,"end_line":112,"start_column":8,"end_column":9},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/870/instances","dismissal_approved_by":null},{"number":869,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/869","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/869","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ':' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":111,"end_line":111,"start_column":23,"end_column":24},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/869/instances","dismissal_approved_by":null},{"number":868,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/868","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/868","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":111,"end_line":111,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/868/instances","dismissal_approved_by":null},{"number":867,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/867","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/867","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":110,"end_line":110,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/867/instances","dismissal_approved_by":null},{"number":866,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/866","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/866","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":109,"end_line":109,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/866/instances","dismissal_approved_by":null},{"number":865,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/865","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/865","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":108,"end_line":108,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/865/instances","dismissal_approved_by":null},{"number":864,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/864","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/864","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":107,"end_line":107,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/864/instances","dismissal_approved_by":null},{"number":863,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/863","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/863","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ':' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":106,"end_line":106,"start_column":31,"end_column":32},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/863/instances","dismissal_approved_by":null},{"number":862,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/862","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/862","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":106,"end_line":106,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/862/instances","dismissal_approved_by":null},{"number":861,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/861","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/861","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":105,"end_line":105,"start_column":41,"end_column":42},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/861/instances","dismissal_approved_by":null},{"number":860,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/860","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/860","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":105,"end_line":105,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/860/instances","dismissal_approved_by":null},{"number":859,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/859","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/859","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":104,"end_line":104,"start_column":17,"end_column":18},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/859/instances","dismissal_approved_by":null},{"number":858,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/858","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/858","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Error: '>' expected."},"location":{"path":"apps/frontend-nextjs/tests/uiux.validation.ts","start_line":104,"end_line":104,"start_column":9,"end_column":10},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/858/instances","dismissal_approved_by":null},{"number":857,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/857","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/857","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Unused variable originalAnalyze."},"location":{"path":"apps/frontend-nextjs/tests/performance.validation.ts","start_line":214,"end_line":214,"start_column":11,"end_column":26},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/857/instances","dismissal_approved_by":null},{"number":856,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/856","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/856","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Unused variable actualCalls."},"location":{"path":"apps/frontend-nextjs/tests/performance.validation.ts","start_line":210,"end_line":210,"start_column":9,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/856/instances","dismissal_approved_by":null},{"number":855,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/855","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/855","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable infos."},"location":{"path":"apps/frontend-nextjs/src/utils/typography/fluidTypographyAuditor.ts","start_line":368,"end_line":368,"start_column":11,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/855/instances","dismissal_approved_by":null},{"number":854,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/854","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/854","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable totalIssues."},"location":{"path":"apps/frontend-nextjs/src/utils/accessibility/headingHierarchyAudit.ts","start_line":433,"end_line":433,"start_column":11,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/854/instances","dismissal_approved_by":null},{"number":853,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/853","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/853","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable passes."},"location":{"path":"apps/frontend-nextjs/src/utils/accessibility/contrastRatioChecker.ts","start_line":260,"end_line":260,"start_column":41,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/853/instances","dismissal_approved_by":null},{"number":852,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T10:25:47Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/852","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/852","state":"fixed","fixed_at":"2025-08-31T10:25:44Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"6854da1e3be9037e73f3ac693edf9631fdfc04f7","message":{"text":"Unused variable stepIds."},"location":{"path":"apps/frontend-nextjs/src/tests/educational/clinicalCasesQA.test.ts","start_line":339,"end_line":339,"start_column":13,"end_column":20},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/852/instances","dismissal_approved_by":null},{"number":851,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/851","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/851","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Unused imports fireEvent, render, screen, waitFor."},"location":{"path":"apps/frontend-nextjs/src/tests/educational/interactiveComponentsQA.test.ts","start_line":10,"end_line":10,"start_column":1,"end_column":77},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/851/instances","dismissal_approved_by":null},{"number":850,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/850","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/850","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Unused import afterEach."},"location":{"path":"apps/frontend-nextjs/src/tests/educational/interactiveComponentsQA.test.ts","start_line":9,"end_line":9,"start_column":1,"end_column":85},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/850/instances","dismissal_approved_by":null},{"number":849,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T10:25:47Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/849","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/849","state":"fixed","fixed_at":"2025-08-31T10:25:44Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"6854da1e3be9037e73f3ac693edf9631fdfc04f7","message":{"text":"Unused variable expectedPhases."},"location":{"path":"apps/frontend-nextjs/src/tests/educational/clinicalCasesQA.test.ts","start_line":193,"end_line":193,"start_column":13,"end_column":27},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/849/instances","dismissal_approved_by":null},{"number":848,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T12:52:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/848","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/848","state":"fixed","fixed_at":"2025-08-31T12:52:50Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"c065321db8dc7d7e1ae231c4cc5d935bb797e138","message":{"text":"Unused variable requiredRatio."},"location":{"path":"apps/frontend-nextjs/src/tests/accessibility.test.ts","start_line":339,"end_line":339,"start_column":15,"end_column":28},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/848/instances","dismissal_approved_by":null},{"number":847,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T10:25:47Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/847","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/847","state":"fixed","fixed_at":"2025-08-31T10:25:44Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"6854da1e3be9037e73f3ac693edf9631fdfc04f7","message":{"text":"Unused variable difficultyOrder."},"location":{"path":"apps/frontend-nextjs/src/tests/educational/clinicalCasesQA.test.ts","start_line":132,"end_line":132,"start_column":13,"end_column":28},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/847/instances","dismissal_approved_by":null},{"number":846,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T10:25:47Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/846","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/846","state":"fixed","fixed_at":"2025-08-31T10:25:44Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"6854da1e3be9037e73f3ac693edf9631fdfc04f7","message":{"text":"Unused imports ClinicalCase, StepResult."},"location":{"path":"apps/frontend-nextjs/src/tests/educational/clinicalCasesQA.test.ts","start_line":12,"end_line":12,"start_column":1,"end_column":66},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/846/instances","dismissal_approved_by":null},{"number":845,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-31T10:25:47Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/845","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/845","state":"fixed","fixed_at":"2025-08-31T10:25:44Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"6854da1e3be9037e73f3ac693edf9631fdfc04f7","message":{"text":"Unused import QAValidationResult."},"location":{"path":"apps/frontend-nextjs/src/tests/educational/clinicalCasesQA.test.ts","start_line":10,"end_line":10,"start_column":1,"end_column":93},"classifications":["test"]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/845/instances","dismissal_approved_by":null},{"number":844,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/844","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/844","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable pathname."},"location":{"path":"apps/frontend-nextjs/src/components/ui/GlobalPersonaFAB.tsx","start_line":22,"end_line":22,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/844/instances","dismissal_approved_by":null},{"number":843,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/843","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/843","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import Heart."},"location":{"path":"apps/frontend-nextjs/src/components/ui/ImprovedFeedbackSystem.tsx","start_line":4,"end_line":15,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/843/instances","dismissal_approved_by":null},{"number":842,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/842","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/842","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable structuredData."},"location":{"path":"apps/frontend-nextjs/src/components/seo/MedicalStructuredData.tsx","start_line":100,"end_line":100,"start_column":9,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/842/instances","dismissal_approved_by":null},{"number":841,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/841","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/841","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable handleOnboardingSkip."},"location":{"path":"apps/frontend-nextjs/src/components/personalization/PersonalizationProvider.tsx","start_line":60,"end_line":60,"start_column":9,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/841/instances","dismissal_approved_by":null},{"number":840,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/840","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/840","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable handleOnboardingComplete."},"location":{"path":"apps/frontend-nextjs/src/components/personalization/PersonalizationProvider.tsx","start_line":55,"end_line":55,"start_column":9,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/840/instances","dismissal_approved_by":null},{"number":839,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/839","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/839","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable showOnboardingModal."},"location":{"path":"apps/frontend-nextjs/src/components/personalization/PersonalizationProvider.tsx","start_line":31,"end_line":31,"start_column":10,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/839/instances","dismissal_approved_by":null},{"number":838,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/838","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/838","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import MessageCircle."},"location":{"path":"apps/frontend-nextjs/src/components/onboarding/QuickStartGuide.tsx","start_line":5,"end_line":5,"start_column":1,"end_column":98},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/838/instances","dismissal_approved_by":null},{"number":837,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/837","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/837","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable router."},"location":{"path":"apps/frontend-nextjs/src/components/onboarding/ExperienceBanner.tsx","start_line":28,"end_line":28,"start_column":9,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/837/instances","dismissal_approved_by":null},{"number":836,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/836","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/836","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import TargetIcon."},"location":{"path":"apps/frontend-nextjs/src/components/onboarding/ExperienceBanner.tsx","start_line":5,"end_line":5,"start_column":1,"end_column":157},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/836/instances","dismissal_approved_by":null},{"number":835,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/835","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/835","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import IntelligentSearchSystem."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/NavigationHeader.tsx","start_line":27,"end_line":27,"start_column":1,"end_column":83},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/835/instances","dismissal_approved_by":null},{"number":834,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/834","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/834","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ThemeToggle."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/NavigationHeader.tsx","start_line":26,"end_line":26,"start_column":1,"end_column":62},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/834/instances","dismissal_approved_by":null},{"number":833,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/833","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/833","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable screenSize."},"location":{"path":"apps/frontend-nextjs/src/components/layout/FABCollisionDetector.tsx","start_line":21,"end_line":21,"start_column":22,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/833/instances","dismissal_approved_by":null},{"number":832,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/832","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/832","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import Image."},"location":{"path":"apps/frontend-nextjs/src/components/home/HeroSection.tsx","start_line":5,"end_line":5,"start_column":1,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/832/instances","dismissal_approved_by":null},{"number":831,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/831","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/831","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable sanitizeUrl."},"location":{"path":"apps/frontend-nextjs/src/components/educational/SmartSearch/index.tsx","start_line":399,"end_line":399,"start_column":9,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/831/instances","dismissal_approved_by":null},{"number":830,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/830","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/830","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable useFormContext."},"location":{"path":"apps/frontend-nextjs/src/components/forms/OptimizedForm.tsx","start_line":72,"end_line":72,"start_column":7,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/830/instances","dismissal_approved_by":null},{"number":829,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/829","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/829","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import Calendar."},"location":{"path":"apps/frontend-nextjs/src/components/forms/OptimizedForm.tsx","start_line":4,"end_line":15,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/829/instances","dismissal_approved_by":null},{"number":828,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/828","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/828","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable generateSrcSet."},"location":{"path":"apps/frontend-nextjs/src/components/common/OptimizedImage.tsx","start_line":75,"end_line":75,"start_column":9,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/828/instances","dismissal_approved_by":null},{"number":827,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/827","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/827","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable focusLastMessage."},"location":{"path":"apps/frontend-nextjs/src/components/chat/modern/ModernChatContainer.tsx","start_line":88,"end_line":88,"start_column":53,"end_column":69},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/827/instances","dismissal_approved_by":null},{"number":826,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/826","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/826","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable announceSystemStatus."},"location":{"path":"apps/frontend-nextjs/src/components/chat/modern/ModernChatContainer.tsx","start_line":88,"end_line":88,"start_column":31,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/826/instances","dismissal_approved_by":null},{"number":825,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/825","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/825","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable announceNewMessage."},"location":{"path":"apps/frontend-nextjs/src/components/chat/modern/ModernChatContainer.tsx","start_line":88,"end_line":88,"start_column":11,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/825/instances","dismissal_approved_by":null},{"number":824,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/824","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/824","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import MessageBubble."},"location":{"path":"apps/frontend-nextjs/src/components/chat/modern/ModernChatContainer.tsx","start_line":13,"end_line":13,"start_column":1,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/824/instances","dismissal_approved_by":null},{"number":823,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/823","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/823","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ModernChatInput."},"location":{"path":"apps/frontend-nextjs/src/components/chat/modern/ModernChatContainer.tsx","start_line":11,"end_line":11,"start_column":1,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/823/instances","dismissal_approved_by":null},{"number":822,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/822","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/822","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable getSeverityColor."},"location":{"path":"apps/frontend-nextjs/src/components/accessibility/TypographyAuditPanel.tsx","start_line":46,"end_line":46,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/822/instances","dismissal_approved_by":null},{"number":821,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/821","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/821","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable formatRatio."},"location":{"path":"apps/frontend-nextjs/src/components/accessibility/ContrastAuditPanel.tsx","start_line":65,"end_line":65,"start_column":9,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/821/instances","dismissal_approved_by":null},{"number":820,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/820","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/820","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable getWcagIcon."},"location":{"path":"apps/frontend-nextjs/src/components/accessibility/ContrastAuditPanel.tsx","start_line":54,"end_line":54,"start_column":9,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/820/instances","dismissal_approved_by":null},{"number":819,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/819","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/819","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable getWcagColor."},"location":{"path":"apps/frontend-nextjs/src/components/accessibility/ContrastAuditPanel.tsx","start_line":43,"end_line":43,"start_column":9,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/819/instances","dismissal_approved_by":null},{"number":818,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/818","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/818","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable setSelectedAudience."},"location":{"path":"apps/frontend-nextjs/src/app/search/page.tsx","start_line":10,"end_line":10,"start_column":28,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/818/instances","dismissal_approved_by":null},{"number":817,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/817","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/817","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable isMobile."},"location":{"path":"apps/frontend-nextjs/src/app/page.tsx","start_line":96,"end_line":96,"start_column":11,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/817/instances","dismissal_approved_by":null},{"number":816,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/816","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/816","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable getValidPersonasCount."},"location":{"path":"apps/frontend-nextjs/src/app/page.tsx","start_line":94,"end_line":94,"start_column":57,"end_column":78},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/816/instances","dismissal_approved_by":null},{"number":815,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/815","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/815","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable personas."},"location":{"path":"apps/frontend-nextjs/src/app/page.tsx","start_line":94,"end_line":94,"start_column":11,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/815/instances","dismissal_approved_by":null},{"number":814,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/814","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/814","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import dynamic."},"location":{"path":"apps/frontend-nextjs/src/app/page.tsx","start_line":65,"end_line":65,"start_column":1,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/814/instances","dismissal_approved_by":null},{"number":813,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/813","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/813","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import MedicalLoadingSpinner."},"location":{"path":"apps/frontend-nextjs/src/app/page.tsx","start_line":64,"end_line":64,"start_column":1,"end_column":71},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/813/instances","dismissal_approved_by":null},{"number":812,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/812","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/812","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports AlertIcon, BookIcon, BulbIcon, ChatIcon, ClipboardIcon, DoctorIcon, EmailIcon, PillIcon, SupportIcon, TargetIcon."},"location":{"path":"apps/frontend-nextjs/src/app/page.tsx","start_line":45,"end_line":63,"start_column":1,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/812/instances","dismissal_approved_by":null},{"number":811,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/811","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/811","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports createEducationalContentChunk, createMedicalContentChunk."},"location":{"path":"apps/frontend-nextjs/src/app/page.tsx","start_line":33,"end_line":33,"start_column":1,"end_column":121},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/811/instances","dismissal_approved_by":null},{"number":810,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/810","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/810","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import LoadingSpinner."},"location":{"path":"apps/frontend-nextjs/src/app/page.tsx","start_line":15,"end_line":15,"start_column":1,"end_column":61},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/810/instances","dismissal_approved_by":null},{"number":809,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/809","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/809","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import LazyOnScroll."},"location":{"path":"apps/frontend-nextjs/src/app/page.tsx","start_line":14,"end_line":14,"start_column":1,"end_column":72},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/809/instances","dismissal_approved_by":null},{"number":808,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/808","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/808","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable pwaRequirements."},"location":{"path":"apps/frontend-nextjs/scripts/validatePWA.js","start_line":30,"end_line":30,"start_column":7,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/808/instances","dismissal_approved_by":null},{"number":807,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/807","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/807","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable typeResult."},"location":{"path":"apps/frontend-nextjs/scripts/startQAMonitoring.ts","start_line":58,"end_line":58,"start_column":13,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/807/instances","dismissal_approved_by":null},{"number":806,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/806","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/806","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable lintResult."},"location":{"path":"apps/frontend-nextjs/scripts/startQAMonitoring.ts","start_line":55,"end_line":55,"start_column":13,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/806/instances","dismissal_approved_by":null},{"number":805,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/805","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/805","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import path."},"location":{"path":"apps/frontend-nextjs/scripts/startQAMonitoring.ts","start_line":9,"end_line":9,"start_column":1,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/805/instances","dismissal_approved_by":null},{"number":804,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/804","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/804","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import fs."},"location":{"path":"apps/frontend-nextjs/scripts/startQAMonitoring.ts","start_line":1,"end_line":8,"start_column":1,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/804/instances","dismissal_approved_by":null},{"number":803,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/803","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/803","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import path."},"location":{"path":"apps/frontend-nextjs/scripts/runQA.ts","start_line":10,"end_line":10,"start_column":1,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/803/instances","dismissal_approved_by":null},{"number":802,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/802","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/802","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import fs."},"location":{"path":"apps/frontend-nextjs/scripts/runQA.ts","start_line":9,"end_line":9,"start_column":1,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/802/instances","dismissal_approved_by":null},{"number":801,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/801","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/801","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable favicon16."},"location":{"path":"apps/frontend-nextjs/scripts/generatePWAIcons.js","start_line":143,"end_line":143,"start_column":11,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/801/instances","dismissal_approved_by":null},{"number":800,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/800","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/800","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable spawn."},"location":{"path":"apps/frontend-nextjs/scripts/cleanup-dev.js","start_line":8,"end_line":8,"start_column":19,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/800/instances","dismissal_approved_by":null},{"number":799,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-08-28T02:28:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/799","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/799","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"The value assigned to instrumentation here is unused."},"location":{"path":"apps/frontend-nextjs/src/components/dx/UXInstrumentationPanel.tsx","start_line":21,"end_line":24,"start_column":9,"end_column":11},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/799/instances","dismissal_approved_by":null},{"number":798,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/798","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/798","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-scheme-check","severity":"warning","description":"Incomplete URL scheme check","name":"js/incomplete-url-scheme-check","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-184","security"],"full_description":"Checking for the \"javascript:\" URL scheme without also checking for \"vbscript:\" and \"data:\" suggests a logic error or even a security vulnerability.","help":"# Incomplete URL scheme check\nURLs starting with `javascript:` can be used to encode JavaScript code to be executed when the URL is visited. While this is a powerful mechanism for creating feature-rich and responsive web applications, it is also a potential security risk: if the URL comes from an untrusted source, it might contain harmful JavaScript code. For this reason, many frameworks and libraries first check the URL scheme of any untrusted URL, and reject URLs with the `javascript:` scheme.\n\nHowever, the `data:` and `vbscript:` schemes can be used to represent executable code in a very similar way, so any validation logic that checks against `javascript:`, but not against `data:` and `vbscript:`, is likely to be insufficient.\n\n\n## Recommendation\nAdd checks covering both `data:` and `vbscript:`.\n\n\n## Example\nThe following function validates a (presumably untrusted) URL `url`. If it starts with `javascript:` (case-insensitive and potentially preceded by whitespace), the harmless placeholder URL `about:blank` is returned to prevent code injection; otherwise `url` itself is returned.\n\n\n```javascript\nfunction sanitizeUrl(url) {\n    let u = decodeURI(url).trim().toLowerCase();\n    if (u.startsWith(\"javascript:\"))\n        return \"about:blank\";\n    return url;\n}\n\n```\nWhile this check provides partial projection, it should be extended to cover `data:` and `vbscript:` as well:\n\n\n```javascript\nfunction sanitizeUrl(url) {\n    let u = decodeURI(url).trim().toLowerCase();\n    if (u.startsWith(\"javascript:\") || u.startsWith(\"data:\") || u.startsWith(\"vbscript:\"))\n        return \"about:blank\";\n    return url;\n}\n\n```\n\n## References\n* WHATWG: [URL schemes](https://wiki.whatwg.org/wiki/URL_schemes).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This check does not consider data:."},"location":{"path":"apps/frontend-nextjs/src/utils/sanitization.ts","start_line":62,"end_line":62,"start_column":15,"end_column":81},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/798/instances","dismissal_approved_by":null},{"number":797,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/797","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/797","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"apps/frontend-nextjs/src/utils/dx/uxInstrumentation.ts","start_line":79,"end_line":79,"start_column":22,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/797/instances","dismissal_approved_by":null},{"number":796,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/796","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/796","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"apps/frontend-nextjs/src/lib/analytics/uxTracking.ts","start_line":53,"end_line":53,"start_column":22,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/796/instances","dismissal_approved_by":null},{"number":795,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/795","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/795","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This string may still contain on, which may cause an HTML attribute injection vulnerability."},"location":{"path":"apps/frontend-nextjs/src/utils/sanitization.ts","start_line":47,"end_line":47,"start_column":17,"end_column":53},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/795/instances","dismissal_approved_by":null},{"number":794,"created_at":"2025-08-27T23:58:27Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/794","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/794","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This string may still contain <script, which may cause an HTML element injection vulnerability."},"location":{"path":"apps/frontend-nextjs/src/utils/sanitization.ts","start_line":36,"end_line":36,"start_column":17,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/794/instances","dismissal_approved_by":null},{"number":793,"created_at":"2025-08-19T23:42:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/793","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/793","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":142,"end_line":142,"start_column":20,"end_column":80},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/793/instances","dismissal_approved_by":null},{"number":792,"created_at":"2025-08-19T23:35:31Z","updated_at":"2025-08-19T23:35:55Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/792","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/792","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Union' is not used."},"location":{"path":"apps/backend/core/security/secure_logging.py","start_line":15,"end_line":15,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/792/instances","dismissal_approved_by":null},{"number":791,"created_at":"2025-08-19T23:34:06Z","updated_at":"2025-08-19T23:34:15Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/791","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/791","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import useABTestCore."},"location":{"path":"apps/frontend-nextjs/src/hooks/useABTest.ts","start_line":9,"end_line":9,"start_column":1,"end_column":84},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/791/instances","dismissal_approved_by":null},{"number":790,"created_at":"2025-08-19T03:53:43Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/790","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/790","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"apps/backend/blueprints/health_blueprint.py","start_line":856,"end_line":856,"start_column":21,"end_column":107},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/790/instances","dismissal_approved_by":null},{"number":789,"created_at":"2025-08-19T03:52:04Z","updated_at":"2025-08-28T02:28:45Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/789","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/789","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"This string may still contain <script, which may cause an HTML element injection vulnerability."},"location":{"path":"apps/frontend-nextjs/src/utils/sanitization.ts","start_line":19,"end_line":19,"start_column":12,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/789/instances","dismissal_approved_by":null},{"number":788,"created_at":"2025-08-19T03:52:04Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/788","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/788","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-scheme-check","severity":"warning","description":"Incomplete URL scheme check","name":"js/incomplete-url-scheme-check","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-184","security"],"full_description":"Checking for the \"javascript:\" URL scheme without also checking for \"vbscript:\" and \"data:\" suggests a logic error or even a security vulnerability.","help":"# Incomplete URL scheme check\nURLs starting with `javascript:` can be used to encode JavaScript code to be executed when the URL is visited. While this is a powerful mechanism for creating feature-rich and responsive web applications, it is also a potential security risk: if the URL comes from an untrusted source, it might contain harmful JavaScript code. For this reason, many frameworks and libraries first check the URL scheme of any untrusted URL, and reject URLs with the `javascript:` scheme.\n\nHowever, the `data:` and `vbscript:` schemes can be used to represent executable code in a very similar way, so any validation logic that checks against `javascript:`, but not against `data:` and `vbscript:`, is likely to be insufficient.\n\n\n## Recommendation\nAdd checks covering both `data:` and `vbscript:`.\n\n\n## Example\nThe following function validates a (presumably untrusted) URL `url`. If it starts with `javascript:` (case-insensitive and potentially preceded by whitespace), the harmless placeholder URL `about:blank` is returned to prevent code injection; otherwise `url` itself is returned.\n\n\n```javascript\nfunction sanitizeUrl(url) {\n    let u = decodeURI(url).trim().toLowerCase();\n    if (u.startsWith(\"javascript:\"))\n        return \"about:blank\";\n    return url;\n}\n\n```\nWhile this check provides partial projection, it should be extended to cover `data:` and `vbscript:` as well:\n\n\n```javascript\nfunction sanitizeUrl(url) {\n    let u = decodeURI(url).trim().toLowerCase();\n    if (u.startsWith(\"javascript:\") || u.startsWith(\"data:\") || u.startsWith(\"vbscript:\"))\n        return \"about:blank\";\n    return url;\n}\n\n```\n\n## References\n* WHATWG: [URL schemes](https://wiki.whatwg.org/wiki/URL_schemes).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This check does not consider data: and vbscript:."},"location":{"path":"apps/frontend-nextjs/src/utils/sanitization.ts","start_line":113,"end_line":115,"start_column":22,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/788/instances","dismissal_approved_by":null},{"number":787,"created_at":"2025-08-19T03:28:21Z","updated_at":"2025-08-28T02:28:45Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/787","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/787","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/duplicate-condition","severity":"warning","description":"Duplicate 'if' condition","name":"js/duplicate-condition","tags":["correctness","external/cwe/cwe-561","quality","reliability"],"full_description":"If two conditions in an 'if'-'else if' chain are identical, the second condition will never hold.","help":"# Duplicate 'if' condition\nIf two conditions in an 'if'-'else if' chain are identical, the second condition will never hold. This most likely indicates a copy-paste error where the first condition was copied and then not properly adjusted. Even if the duplication is intentional (relying, for instance, on non-determinism or side effects), such code is confusing and should be avoided.\n\n\n## Recommendation\nExamine the two conditions to find out what they were meant to check. If both the conditions and the branches that depend on them are identical, then the second branch is duplicate code that can be deleted. Otherwise, the second condition needs to be adjusted.\n\n\n## Example\nIn the example below, the function `controller` checks its parameter `msg` to determine what operation it is meant to perform. However, the comparison in the 'else if' is identical to the comparison in the 'if', so this branch will never be taken.\n\n\n```javascript\nfunction controller(msg) {\n\tif (msg == 'start')\n\t\tstart();\n\telse if (msg == 'start')\n\t\tstop();\n\telse\n\t\tthrow new Error(\"Message not understood.\");\n}\n```\nClearly, the 'else if' branch should compare `msg` to `'stop'`:\n\n\n```javascript\nfunction controller(msg) {\n\tif (msg == 'start')\n\t\tstart();\n\telse if (msg == 'stop')\n\t\tstop();\n\telse\n\t\tthrow new Error(\"Message not understood.\");\n}\n```\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"This condition is a duplicate of userCredential.user."},"location":{"path":"apps/frontend-nextjs/src/contexts/AuthContext.tsx","start_line":273,"end_line":273,"start_column":18,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/787/instances","dismissal_approved_by":null},{"number":786,"created_at":"2025-08-19T03:28:21Z","updated_at":"2025-08-19T03:28:25Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/786","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/786","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable rect."},"location":{"path":"apps/frontend-nextjs/src/hooks/useScrollAnimation.ts","start_line":104,"end_line":104,"start_column":15,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/786/instances","dismissal_approved_by":null},{"number":785,"created_at":"2025-08-19T03:28:21Z","updated_at":"2025-08-19T03:28:25Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/785","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/785","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable deleteAccountSecond."},"location":{"path":"apps/frontend-nextjs/src/contexts/AuthContext.tsx","start_line":567,"end_line":567,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/785/instances","dismissal_approved_by":null},{"number":784,"created_at":"2025-08-19T03:28:21Z","updated_at":"2025-08-19T03:28:25Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/784","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/784","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable updateUserProfileSecond."},"location":{"path":"apps/frontend-nextjs/src/contexts/AuthContext.tsx","start_line":522,"end_line":522,"start_column":9,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/784/instances","dismissal_approved_by":null},{"number":783,"created_at":"2025-08-19T03:28:21Z","updated_at":"2025-08-19T03:28:25Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/783","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/783","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import googleProvider."},"location":{"path":"apps/frontend-nextjs/src/contexts/AuthContext.tsx","start_line":30,"end_line":30,"start_column":1,"end_column":89},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/783/instances","dismissal_approved_by":null},{"number":782,"created_at":"2025-08-19T03:28:21Z","updated_at":"2025-08-19T03:28:25Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/782","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/782","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import getRedirectResult."},"location":{"path":"apps/frontend-nextjs/src/contexts/AuthContext.tsx","start_line":14,"end_line":28,"start_column":1,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/782/instances","dismissal_approved_by":null},{"number":781,"created_at":"2025-08-19T03:28:21Z","updated_at":"2025-08-28T02:28:45Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/781","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/781","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Unused import Image."},"location":{"path":"apps/frontend-nextjs/src/components/home/HeroSection.tsx","start_line":5,"end_line":5,"start_column":1,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/781/instances","dismissal_approved_by":null},{"number":780,"created_at":"2025-08-19T03:28:21Z","updated_at":"2025-08-19T03:28:25Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/780","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/780","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable getProviderColor."},"location":{"path":"apps/frontend-nextjs/src/components/auth/SocialAuthButtons.tsx","start_line":90,"end_line":90,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/780/instances","dismissal_approved_by":null},{"number":779,"created_at":"2025-08-19T03:28:21Z","updated_at":"2025-08-19T03:28:25Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/779","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/779","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable getProviderName."},"location":{"path":"apps/frontend-nextjs/src/components/auth/SocialAuthButtons.tsx","start_line":85,"end_line":85,"start_column":9,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/779/instances","dismissal_approved_by":null},{"number":778,"created_at":"2025-08-19T03:28:21Z","updated_at":"2025-08-28T02:28:45Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/778","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/778","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Unused imports CardReveal, ScrollAnimation."},"location":{"path":"apps/frontend-nextjs/src/app/page.tsx","start_line":22,"end_line":22,"start_column":1,"end_column":97},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/778/instances","dismissal_approved_by":null},{"number":777,"created_at":"2025-08-19T03:28:21Z","updated_at":"2025-08-19T03:28:25Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/777","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/777","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable linkSocialAccount."},"location":{"path":"apps/frontend-nextjs/src/app/profile/page.tsx","start_line":43,"end_line":43,"start_column":5,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/777/instances","dismissal_approved_by":null},{"number":776,"created_at":"2025-08-19T03:28:21Z","updated_at":"2025-08-19T03:28:25Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/776","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/776","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports Camera, Mail."},"location":{"path":"apps/frontend-nextjs/src/app/profile/page.tsx","start_line":5,"end_line":17,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/776/instances","dismissal_approved_by":null},{"number":775,"created_at":"2025-08-19T03:28:21Z","updated_at":"2025-08-19T03:28:25Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/775","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/775","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable authLoading."},"location":{"path":"apps/frontend-nextjs/src/app/login/page.tsx","start_line":20,"end_line":20,"start_column":44,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/775/instances","dismissal_approved_by":null},{"number":774,"created_at":"2025-08-18T03:04:49Z","updated_at":"2025-08-18T03:04:51Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/774","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/774","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Markup' is not used.\nImport of 'escape' is not used."},"location":{"path":"apps/backend/core/security/security_patches.py","start_line":15,"end_line":15,"start_column":1,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/774/instances","dismissal_approved_by":null},{"number":773,"created_at":"2025-08-18T03:04:49Z","updated_at":"2025-08-18T03:04:51Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/773","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/773","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'jsonify' is not used."},"location":{"path":"apps/backend/core/security/security_patches.py","start_line":13,"end_line":13,"start_column":1,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/773/instances","dismissal_approved_by":null},{"number":772,"created_at":"2025-08-18T03:04:49Z","updated_at":"2025-08-18T03:04:51Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/772","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/772","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Optional' is not used."},"location":{"path":"apps/backend/core/security/security_patches.py","start_line":11,"end_line":11,"start_column":1,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/772/instances","dismissal_approved_by":null},{"number":771,"created_at":"2025-08-18T03:04:49Z","updated_at":"2025-08-18T03:04:51Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/771","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/771","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/core/security/security_patches.py","start_line":9,"end_line":9,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/771/instances","dismissal_approved_by":null},{"number":770,"created_at":"2025-08-18T03:04:49Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/770","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/770","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'EnhancedInputSanitizer' is not used."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":16,"end_line":16,"start_column":5,"end_column":99},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/770/instances","dismissal_approved_by":null},{"number":769,"created_at":"2025-08-18T03:04:49Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/769","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/769","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'Optional' is not used."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":12,"end_line":12,"start_column":1,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/769/instances","dismissal_approved_by":null},{"number":768,"created_at":"2025-08-18T03:04:49Z","updated_at":"2025-08-18T03:04:51Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/768","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/768","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/core/security/security_patches.py","start_line":412,"end_line":412,"start_column":21,"end_column":91},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/768/instances","dismissal_approved_by":null},{"number":767,"created_at":"2025-08-18T03:02:40Z","updated_at":"2025-08-19T03:52:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/767","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/767","state":"fixed","fixed_at":"2025-08-19T03:52:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"7165d6cd08a09f6a15b03b39b84f60b7113a2c58","message":{"text":"This string may still contain on, which may cause an HTML attribute injection vulnerability."},"location":{"path":"apps/frontend-nextjs/src/utils/sanitization.ts","start_line":28,"end_line":29,"start_column":10,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/767/instances","dismissal_approved_by":null},{"number":766,"created_at":"2025-08-18T03:02:40Z","updated_at":"2025-08-19T03:52:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/766","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/766","state":"fixed","fixed_at":"2025-08-19T03:52:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"7165d6cd08a09f6a15b03b39b84f60b7113a2c58","message":{"text":"This string may still contain <script, which may cause an HTML element injection vulnerability."},"location":{"path":"apps/frontend-nextjs/src/utils/sanitization.ts","start_line":17,"end_line":18,"start_column":14,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/766/instances","dismissal_approved_by":null},{"number":765,"created_at":"2025-08-18T03:02:40Z","updated_at":"2025-08-19T03:52:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/765","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/765","state":"fixed","fixed_at":"2025-08-19T03:52:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"7165d6cd08a09f6a15b03b39b84f60b7113a2c58","message":{"text":"This string may still contain <iframe, which may cause an HTML element injection vulnerability."},"location":{"path":"apps/frontend-nextjs/src/utils/sanitization.ts","start_line":17,"end_line":19,"start_column":14,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/765/instances","dismissal_approved_by":null},{"number":764,"created_at":"2025-08-18T03:02:40Z","updated_at":"2025-08-19T03:52:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/764","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/764","state":"fixed","fixed_at":"2025-08-19T03:52:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/bad-tag-filter","severity":"warning","description":"Bad HTML filtering regexp","name":"js/bad-tag-filter","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","external/cwe/cwe-184","external/cwe/cwe-185","external/cwe/cwe-186","security"],"full_description":"Matching HTML tags using regular expressions is hard to do right, and can easily lead to security issues.","help":"# Bad HTML filtering regexp\nIt is possible to match some single HTML tags using regular expressions (parsing general HTML using regular expressions is impossible). However, if the regular expression is not written well it might be possible to circumvent it, which can lead to cross-site scripting or other security issues.\n\nSome of these mistakes are caused by browsers having very forgiving HTML parsers, and will often render invalid HTML containing syntax errors. Regular expressions that attempt to match HTML should also recognize tags containing such syntax errors.\n\n\n## Recommendation\nUse a well-tested sanitization or parser library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\n\n## Example\nThe following example attempts to filters out all `<script>` tags.\n\n\n```javascript\nfunction filterScript(html) {\n    var scriptRegex = /<script\\b[^>]*>([\\s\\S]*?)<\\/script>/gi;\n    var match;\n    while ((match = scriptRegex.exec(html)) !== null) {\n        html = html.replace(match[0], match[1]);\n    }\n    return html;\n}\n\n```\nThe above sanitizer does not filter out all `<script>` tags. Browsers will not only accept `</script>` as script end tags, but also tags such as `</script foo=\"bar\">` even though it is a parser error. This means that an attack string such as `<script>alert(1)</script foo=\"bar\">` will not be filtered by the function, and `alert(1)` will be executed by a browser if the string is rendered as HTML.\n\nOther corner cases include that HTML comments can end with `--!>`, and that HTML tag names can contain upper case characters.\n\n\n## References\n* Securitum: [The Curious Case of Copy &amp; Paste](https://research.securitum.com/the-curious-case-of-copy-paste/).\n* stackoverflow.com: [You can't parse \\[X\\]HTML with regex](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags#answer-1732454).\n* HTML Standard: [Comment end bang state](https://html.spec.whatwg.org/multipage/parsing.html#comment-end-bang-state).\n* stackoverflow.com: [Why aren't browsers strict about HTML?](https://stackoverflow.com/questions/25559999/why-arent-browsers-strict-about-html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n* Common Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html).\n* Common Weakness Enumeration: [CWE-186](https://cwe.mitre.org/data/definitions/186.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"7165d6cd08a09f6a15b03b39b84f60b7113a2c58","message":{"text":"This regular expression does not match script end tags like </script >."},"location":{"path":"apps/frontend-nextjs/src/utils/sanitization.ts","start_line":12,"end_line":12,"start_column":26,"end_column":75},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/764/instances","dismissal_approved_by":null},{"number":763,"created_at":"2025-08-18T03:02:40Z","updated_at":"2025-08-19T03:52:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/763","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/763","state":"fixed","fixed_at":"2025-08-19T03:52:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-scheme-check","severity":"warning","description":"Incomplete URL scheme check","name":"js/incomplete-url-scheme-check","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-184","security"],"full_description":"Checking for the \"javascript:\" URL scheme without also checking for \"vbscript:\" and \"data:\" suggests a logic error or even a security vulnerability.","help":"# Incomplete URL scheme check\nURLs starting with `javascript:` can be used to encode JavaScript code to be executed when the URL is visited. While this is a powerful mechanism for creating feature-rich and responsive web applications, it is also a potential security risk: if the URL comes from an untrusted source, it might contain harmful JavaScript code. For this reason, many frameworks and libraries first check the URL scheme of any untrusted URL, and reject URLs with the `javascript:` scheme.\n\nHowever, the `data:` and `vbscript:` schemes can be used to represent executable code in a very similar way, so any validation logic that checks against `javascript:`, but not against `data:` and `vbscript:`, is likely to be insufficient.\n\n\n## Recommendation\nAdd checks covering both `data:` and `vbscript:`.\n\n\n## Example\nThe following function validates a (presumably untrusted) URL `url`. If it starts with `javascript:` (case-insensitive and potentially preceded by whitespace), the harmless placeholder URL `about:blank` is returned to prevent code injection; otherwise `url` itself is returned.\n\n\n```javascript\nfunction sanitizeUrl(url) {\n    let u = decodeURI(url).trim().toLowerCase();\n    if (u.startsWith(\"javascript:\"))\n        return \"about:blank\";\n    return url;\n}\n\n```\nWhile this check provides partial projection, it should be extended to cover `data:` and `vbscript:` as well:\n\n\n```javascript\nfunction sanitizeUrl(url) {\n    let u = decodeURI(url).trim().toLowerCase();\n    if (u.startsWith(\"javascript:\") || u.startsWith(\"data:\") || u.startsWith(\"vbscript:\"))\n        return \"about:blank\";\n    return url;\n}\n\n```\n\n## References\n* WHATWG: [URL schemes](https://wiki.whatwg.org/wiki/URL_schemes).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"7165d6cd08a09f6a15b03b39b84f60b7113a2c58","message":{"text":"This check does not consider data: and vbscript:.\nThis check does not consider vbscript:."},"location":{"path":"apps/frontend-nextjs/src/utils/sanitization.ts","start_line":73,"end_line":73,"start_column":7,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/763/instances","dismissal_approved_by":null},{"number":762,"created_at":"2025-08-18T03:02:40Z","updated_at":"2025-08-19T03:52:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/762","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/762","state":"fixed","fixed_at":"2025-08-19T03:52:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-scheme-check","severity":"warning","description":"Incomplete URL scheme check","name":"js/incomplete-url-scheme-check","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-184","security"],"full_description":"Checking for the \"javascript:\" URL scheme without also checking for \"vbscript:\" and \"data:\" suggests a logic error or even a security vulnerability.","help":"# Incomplete URL scheme check\nURLs starting with `javascript:` can be used to encode JavaScript code to be executed when the URL is visited. While this is a powerful mechanism for creating feature-rich and responsive web applications, it is also a potential security risk: if the URL comes from an untrusted source, it might contain harmful JavaScript code. For this reason, many frameworks and libraries first check the URL scheme of any untrusted URL, and reject URLs with the `javascript:` scheme.\n\nHowever, the `data:` and `vbscript:` schemes can be used to represent executable code in a very similar way, so any validation logic that checks against `javascript:`, but not against `data:` and `vbscript:`, is likely to be insufficient.\n\n\n## Recommendation\nAdd checks covering both `data:` and `vbscript:`.\n\n\n## Example\nThe following function validates a (presumably untrusted) URL `url`. If it starts with `javascript:` (case-insensitive and potentially preceded by whitespace), the harmless placeholder URL `about:blank` is returned to prevent code injection; otherwise `url` itself is returned.\n\n\n```javascript\nfunction sanitizeUrl(url) {\n    let u = decodeURI(url).trim().toLowerCase();\n    if (u.startsWith(\"javascript:\"))\n        return \"about:blank\";\n    return url;\n}\n\n```\nWhile this check provides partial projection, it should be extended to cover `data:` and `vbscript:` as well:\n\n\n```javascript\nfunction sanitizeUrl(url) {\n    let u = decodeURI(url).trim().toLowerCase();\n    if (u.startsWith(\"javascript:\") || u.startsWith(\"data:\") || u.startsWith(\"vbscript:\"))\n        return \"about:blank\";\n    return url;\n}\n\n```\n\n## References\n* WHATWG: [URL schemes](https://wiki.whatwg.org/wiki/URL_schemes).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"7165d6cd08a09f6a15b03b39b84f60b7113a2c58","message":{"text":"This check does not consider data: and vbscript:."},"location":{"path":"apps/frontend-nextjs/src/utils/sanitization.ts","start_line":36,"end_line":36,"start_column":10,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/762/instances","dismissal_approved_by":null},{"number":761,"created_at":"2025-08-18T03:01:06Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/761","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/761","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-47081","severity":"warning","description":"requests: Requests vulnerable to .netrc credentials leak via malicious URLs","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"Requests is a HTTP library. Due to a URL parsing issue, Requests releases prior to 2.32.4 may leak .netrc credentials to third parties for specific maliciously-crafted URLs. Users should upgrade to version 2.32.4 to receive a fix. For older versions of Requests, use of the .netrc file can be disabled with `trust_env=False` on one's Requests Session.","help":"**Vulnerability CVE-2024-47081**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|requests|2.32.4|[CVE-2024-47081](https://avd.aquasec.com/nvd/cve-2024-47081)|\n\nRequests is a HTTP library. Due to a URL parsing issue, Requests releases prior to 2.32.4 may leak .netrc credentials to third parties for specific maliciously-crafted URLs. Users should upgrade to version 2.32.4 to receive a fix. For older versions of Requests, use of the .netrc file can be disabled with `trust_env=False` on one's Requests Session.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-47081","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Package: requests\nInstalled Version: 2.32.3\nVulnerability CVE-2024-47081\nSeverity: MEDIUM\nFixed Version: 2.32.4\nLink: [CVE-2024-47081](https://avd.aquasec.com/nvd/cve-2024-47081)"},"location":{"path":"apps/backend/requirements.txt","start_line":22,"end_line":22,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/761/instances","dismissal_approved_by":null},{"number":760,"created_at":"2025-08-18T03:01:06Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/760","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/760","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-12797","severity":"note","description":"openssl: RFC7250 handshakes with unauthenticated servers don't abort as expected","name":"LanguageSpecificPackageVulnerability","tags":["LOW","security","vulnerability"],"full_description":"Issue summary: Clients using RFC7250 Raw Public Keys (RPKs) to authenticate a\nserver may fail to notice that the server was not authenticated, because\nhandshakes don't abort as expected when the SSL_VERIFY_PEER verification mode\nis set.\n\nImpact summary: TLS and DTLS connections using raw public keys may be\nvulnerable to man-in-middle attacks when server authentication failure is not\ndetected by clients.\n\nRPKs are disabled by default in both TLS clients and TLS servers.  The issue\nonly arises when TLS clients explicitly enable RPK use by the server, and the\nserver, likewise, enables sending of an RPK instead of an X.509 certificate\nchain.  The affected clients are those that then rely on the handshake to\nfail when the server's RPK fails to match one of the expected public keys,\nby setting the verification mode to SSL_VERIFY_PEER.\n\nClients that enable server-side raw public keys can still find out that raw\npublic key verification failed by calling SSL_get_verify_result(), and those\nthat do, and take appropriate","help":"**Vulnerability CVE-2024-12797**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|LOW|cryptography|44.0.1|[CVE-2024-12797](https://avd.aquasec.com/nvd/cve-2024-12797)|\n\nIssue summary: Clients using RFC7250 Raw Public Keys (RPKs) to authenticate a\nserver may fail to notice that the server was not authenticated, because\nhandshakes don't abort as expected when the SSL_VERIFY_PEER verification mode\nis set.\n\nImpact summary: TLS and DTLS connections using raw public keys may be\nvulnerable to man-in-middle attacks when server authentication failure is not\ndetected by clients.\n\nRPKs are disabled by default in both TLS clients and TLS servers.  The issue\nonly arises when TLS clients explicitly enable RPK use by the server, and the\nserver, likewise, enables sending of an RPK instead of an X.509 certificate\nchain.  The affected clients are those that then rely on the handshake to\nfail when the server's RPK fails to match one of the expected public keys,\nby setting the verification mode to SSL_VERIFY_PEER.\n\nClients that enable server-side raw public keys can still find out that raw\npublic key verification failed by calling SSL_get_verify_result(), and those\nthat do, and take appropriate action, are not affected.  This issue was\nintroduced in the initial implementation of RPK support in OpenSSL 3.2.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-12797","security_severity_level":"low"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Package: cryptography\nInstalled Version: 43.0.3\nVulnerability CVE-2024-12797\nSeverity: LOW\nFixed Version: 44.0.1\nLink: [CVE-2024-12797](https://avd.aquasec.com/nvd/cve-2024-12797)"},"location":{"path":"apps/backend/requirements.txt","start_line":78,"end_line":78,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/760/instances","dismissal_approved_by":null},{"number":759,"created_at":"2025-08-18T03:01:06Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/759","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/759","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-6866","severity":"warning","description":"corydolphin/flask-cors version 4.01 contains a vulnerability where the ...","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"corydolphin/flask-cors version 4.01 contains a vulnerability where the request path matching is case-insensitive due to the use of the `try_match` function, which is originally intended for matching hosts. This results in a mismatch because paths in URLs are case-sensitive, but the regex matching treats them as case-insensitive. This misconfiguration can lead to significant security vulnerabilities, allowing unauthorized origins to access paths meant to be restricted, resulting in data exposure and potential data leaks.","help":"**Vulnerability CVE-2024-6866**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Flask-CORS|6.0.0|[CVE-2024-6866](https://avd.aquasec.com/nvd/cve-2024-6866)|\n\ncorydolphin/flask-cors version 4.01 contains a vulnerability where the request path matching is case-insensitive due to the use of the `try_match` function, which is originally intended for matching hosts. This results in a mismatch because paths in URLs are case-sensitive, but the regex matching treats them as case-insensitive. This misconfiguration can lead to significant security vulnerabilities, allowing unauthorized origins to access paths meant to be restricted, resulting in data exposure and potential data leaks.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-6866","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Package: Flask-CORS\nInstalled Version: 5.0.0\nVulnerability CVE-2024-6866\nSeverity: MEDIUM\nFixed Version: 6.0.0\nLink: [CVE-2024-6866](https://avd.aquasec.com/nvd/cve-2024-6866)"},"location":{"path":"apps/backend/requirements.txt","start_line":7,"end_line":7,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/759/instances","dismissal_approved_by":null},{"number":758,"created_at":"2025-08-18T03:01:06Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/758","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/758","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-6844","severity":"warning","description":"A vulnerability in corydolphin/flask-cors version 4.0.1 allows for inc ...","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"A vulnerability in corydolphin/flask-cors version 4.0.1 allows for inconsistent CORS matching due to the handling of the '+' character in URL paths. The request.path is passed through the unquote_plus function, which converts the '+' character to a space ' '. This behavior leads to incorrect path normalization, causing potential mismatches in CORS configuration. As a result, endpoints may not be matched correctly to their CORS settings, leading to unexpected CORS policy application. This can cause unauthorized cross-origin access or block valid requests, creating security vulnerabilities and usability issues.","help":"**Vulnerability CVE-2024-6844**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Flask-CORS|6.0.0|[CVE-2024-6844](https://avd.aquasec.com/nvd/cve-2024-6844)|\n\nA vulnerability in corydolphin/flask-cors version 4.0.1 allows for inconsistent CORS matching due to the handling of the '+' character in URL paths. The request.path is passed through the unquote_plus function, which converts the '+' character to a space ' '. This behavior leads to incorrect path normalization, causing potential mismatches in CORS configuration. As a result, endpoints may not be matched correctly to their CORS settings, leading to unexpected CORS policy application. This can cause unauthorized cross-origin access or block valid requests, creating security vulnerabilities and usability issues.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-6844","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Package: Flask-CORS\nInstalled Version: 5.0.0\nVulnerability CVE-2024-6844\nSeverity: MEDIUM\nFixed Version: 6.0.0\nLink: [CVE-2024-6844](https://avd.aquasec.com/nvd/cve-2024-6844)"},"location":{"path":"apps/backend/requirements.txt","start_line":7,"end_line":7,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/758/instances","dismissal_approved_by":null},{"number":757,"created_at":"2025-08-18T03:01:06Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/757","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/757","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-6839","severity":"warning","description":"corydolphin/flask-cors version 4.0.1 contains an improper regex path m ...","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"corydolphin/flask-cors version 4.0.1 contains an improper regex path matching vulnerability. The plugin prioritizes longer regex patterns over more specific ones when matching paths, which can lead to less restrictive CORS policies being applied to sensitive endpoints. This mismatch in regex pattern priority allows unauthorized cross-origin access to sensitive data or functionality, potentially exposing confidential information and increasing the risk of unauthorized actions by malicious actors.","help":"**Vulnerability CVE-2024-6839**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Flask-CORS|6.0.0|[CVE-2024-6839](https://avd.aquasec.com/nvd/cve-2024-6839)|\n\ncorydolphin/flask-cors version 4.0.1 contains an improper regex path matching vulnerability. The plugin prioritizes longer regex patterns over more specific ones when matching paths, which can lead to less restrictive CORS policies being applied to sensitive endpoints. This mismatch in regex pattern priority allows unauthorized cross-origin access to sensitive data or functionality, potentially exposing confidential information and increasing the risk of unauthorized actions by malicious actors.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-6839","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Package: Flask-CORS\nInstalled Version: 5.0.0\nVulnerability CVE-2024-6839\nSeverity: MEDIUM\nFixed Version: 6.0.0\nLink: [CVE-2024-6839](https://avd.aquasec.com/nvd/cve-2024-6839)"},"location":{"path":"apps/backend/requirements.txt","start_line":7,"end_line":7,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/757/instances","dismissal_approved_by":null},{"number":756,"created_at":"2025-08-18T03:01:06Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/756","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/756","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2025-47278","severity":"note","description":"flask: Flask Session Signing Fallback Key Vulnerability","name":"LanguageSpecificPackageVulnerability","tags":["LOW","security","vulnerability"],"full_description":"Flask is a web server gateway interface (WSGI) web application framework. In Flask 3.1.0, the way fallback key configuration was handled resulted in the last fallback key being used for signing, rather than the current signing key. Signing is provided by the `itsdangerous` library. A list of keys can be passed, and it expects the last (top) key in the list to be the most recent key, and uses that for signing. Flask was incorrectly constructing that list in reverse, passing the signing key first. Sites that have opted-in to use key rotation by setting `SECRET_KEY_FALLBACKS` care likely to unexpectedly be signing their sessions with stale keys, and their transition to fresher keys will be impeded. Sessions are still signed, so this would not cause any sort of data integrity loss. Version 3.1.1 contains a patch for the issue.","help":"**Vulnerability CVE-2025-47278**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|LOW|Flask|3.1.1|[CVE-2025-47278](https://avd.aquasec.com/nvd/cve-2025-47278)|\n\nFlask is a web server gateway interface (WSGI) web application framework. In Flask 3.1.0, the way fallback key configuration was handled resulted in the last fallback key being used for signing, rather than the current signing key. Signing is provided by the `itsdangerous` library. A list of keys can be passed, and it expects the last (top) key in the list to be the most recent key, and uses that for signing. Flask was incorrectly constructing that list in reverse, passing the signing key first. Sites that have opted-in to use key rotation by setting `SECRET_KEY_FALLBACKS` care likely to unexpectedly be signing their sessions with stale keys, and their transition to fresher keys will be impeded. Sessions are still signed, so this would not cause any sort of data integrity loss. Version 3.1.1 contains a patch for the issue.","help_uri":"https://avd.aquasec.com/nvd/cve-2025-47278","security_severity_level":"low"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Package: Flask\nInstalled Version: 3.1.0\nVulnerability CVE-2025-47278\nSeverity: LOW\nFixed Version: 3.1.1\nLink: [CVE-2025-47278](https://avd.aquasec.com/nvd/cve-2025-47278)"},"location":{"path":"apps/backend/requirements.txt","start_line":6,"end_line":6,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/756/instances","dismissal_approved_by":null},{"number":755,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-18T03:02:51Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/755","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/755","state":"fixed","fixed_at":"2025-08-18T03:02:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"The initial value of visibleCategories is unused, since it is always overwritten."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/NavigationHeader.tsx","start_line":347,"end_line":347,"start_column":9,"end_column":119},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/755/instances","dismissal_approved_by":null},{"number":754,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-18T02:18:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/754","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/754","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable updateVisibility."},"location":{"path":"apps/frontend-nextjs/src/components/ui/GlobalPersonaFAB.tsx","start_line":35,"end_line":35,"start_column":28,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/754/instances","dismissal_approved_by":null},{"number":753,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-18T02:18:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/753","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/753","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable optimalPosition."},"location":{"path":"apps/frontend-nextjs/src/components/ui/GlobalPersonaFAB.tsx","start_line":35,"end_line":35,"start_column":11,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/753/instances","dismissal_approved_by":null},{"number":752,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-18T02:18:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/752","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/752","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable triggerErrorFeedback."},"location":{"path":"apps/frontend-nextjs/src/components/ui/ChatFeedback.tsx","start_line":166,"end_line":166,"start_column":9,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/752/instances","dismissal_approved_by":null},{"number":751,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-18T02:18:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/751","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/751","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable triggerReceiveFeedback."},"location":{"path":"apps/frontend-nextjs/src/components/ui/ChatFeedback.tsx","start_line":147,"end_line":147,"start_column":9,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/751/instances","dismissal_approved_by":null},{"number":750,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-18T02:18:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/750","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/750","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable triggerSendFeedback."},"location":{"path":"apps/frontend-nextjs/src/components/ui/ChatFeedback.tsx","start_line":116,"end_line":116,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/750/instances","dismissal_approved_by":null},{"number":749,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-28T02:28:45Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/749","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/749","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Unused variable navigationState."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/ProgressiveDisclosure.tsx","start_line":28,"end_line":28,"start_column":11,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/749/instances","dismissal_approved_by":null},{"number":748,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-28T02:28:45Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/748","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/748","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Unused import Link."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/ProgressiveDisclosure.tsx","start_line":7,"end_line":7,"start_column":1,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/748/instances","dismissal_approved_by":null},{"number":747,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-18T02:18:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/747","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/747","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable deviceType."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/NavigationHeader.tsx","start_line":69,"end_line":69,"start_column":47,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/747/instances","dismissal_approved_by":null},{"number":746,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-18T02:18:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/746","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/746","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable screenSize."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/FloatingElementsCoordinator.tsx","start_line":30,"end_line":30,"start_column":10,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/746/instances","dismissal_approved_by":null},{"number":745,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-18T02:18:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/745","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/745","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable pathname."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/ChatNavigation.tsx","start_line":30,"end_line":30,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/745/instances","dismissal_approved_by":null},{"number":744,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-18T02:18:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/744","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/744","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import Link."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/ChatNavigation.tsx","start_line":5,"end_line":5,"start_column":1,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/744/instances","dismissal_approved_by":null},{"number":743,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-18T02:18:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/743","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/743","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable unbColors."},"location":{"path":"apps/frontend-nextjs/src/components/glossary/MedicalTermTooltip.tsx","start_line":118,"end_line":118,"start_column":9,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/743/instances","dismissal_approved_by":null},{"number":742,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-18T02:18:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/742","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/742","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable remainingText."},"location":{"path":"apps/frontend-nextjs/src/components/glossary/AutoGlossary.tsx","start_line":47,"end_line":47,"start_column":9,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/742/instances","dismissal_approved_by":null},{"number":741,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-18T02:18:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/741","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/741","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable unbColors."},"location":{"path":"apps/frontend-nextjs/src/components/content/ContentSegmentation.tsx","start_line":39,"end_line":39,"start_column":9,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/741/instances","dismissal_approved_by":null},{"number":740,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-18T02:18:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/740","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/740","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable navigationState."},"location":{"path":"apps/frontend-nextjs/src/app/chat/page.tsx","start_line":139,"end_line":139,"start_column":11,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/740/instances","dismissal_approved_by":null},{"number":739,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-18T02:18:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/739","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/739","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import useRef."},"location":{"path":"apps/frontend-nextjs/src/app/chat/page.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":82},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/739/instances","dismissal_approved_by":null},{"number":738,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-18T03:02:51Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/738","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/738","state":"fixed","fixed_at":"2025-08-18T03:02:49Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/trivial-conditional","severity":"warning","description":"Useless conditional","name":"js/trivial-conditional","tags":["correctness","external/cwe/cwe-570","external/cwe/cwe-571","quality","reliability"],"full_description":"If a conditional expression always evaluates to true or always evaluates to false, this suggests incomplete code or a logic error.","help":"# Useless conditional\nIf a condition always evaluates to true or always evaluates to false, this often indicates incomplete code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the condition is useless. If it is no longer needed, remove it.\n\n\n## Example\nThe following example constructs an array `lines`, and then attempts to check whether it has any elements by means of an if conditional `if (!lines)`.\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\nNote that in JavaScript (unlike some other languages) arrays and objects are always considered to be true when evaluated in a Boolean context. The code should instead check `lines.length`:\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines.length)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\n\n## References\n* Mozilla Developer Network: [Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n* Common Weakness Enumeration: [CWE-570](https://cwe.mitre.org/data/definitions/570.html).\n* Common Weakness Enumeration: [CWE-571](https://cwe.mitre.org/data/definitions/571.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"This expression always evaluates to false."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/NavigationHeader.tsx","start_line":431,"end_line":431,"start_column":8,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/738/instances","dismissal_approved_by":null},{"number":737,"created_at":"2025-08-18T02:18:12Z","updated_at":"2025-08-28T02:28:45Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/737","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/737","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-substring-sanitization","severity":"warning","description":"Incomplete URL substring sanitization","name":"js/incomplete-url-substring-sanitization","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.","help":"# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"'firebaseapp.com' can be anywhere in the URL, and arbitrary hosts may come before or after it."},"location":{"path":"apps/frontend-nextjs/src/services/api.ts","start_line":26,"end_line":26,"start_column":113,"end_column":149},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/737/instances","dismissal_approved_by":null},{"number":736,"created_at":"2025-08-17T23:07:18Z","updated_at":"2025-08-17T23:07:30Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/736","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/736","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable ChatIcon."},"location":{"path":"apps/frontend-nextjs/src/app/sitemap/page.tsx","start_line":19,"end_line":19,"start_column":7,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/736/instances","dismissal_approved_by":null},{"number":735,"created_at":"2025-08-17T23:07:18Z","updated_at":"2025-08-17T23:07:30Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/735","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/735","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable router."},"location":{"path":"apps/frontend-nextjs/src/app/esqueci-senha/page.tsx","start_line":13,"end_line":13,"start_column":9,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/735/instances","dismissal_approved_by":null},{"number":734,"created_at":"2025-08-17T23:07:18Z","updated_at":"2025-08-19T03:28:27Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/734","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/734","state":"fixed","fixed_at":"2025-08-19T03:28:25Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"7194261ba9b32766d69ae6beb09d3e6f86513217","message":{"text":"Unused variable user."},"location":{"path":"apps/frontend-nextjs/src/app/cadastro/page.tsx","start_line":97,"end_line":97,"start_column":13,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/734/instances","dismissal_approved_by":null},{"number":733,"created_at":"2025-08-17T23:07:18Z","updated_at":"2025-08-19T03:28:27Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/733","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/733","state":"fixed","fixed_at":"2025-08-19T03:28:25Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"7194261ba9b32766d69ae6beb09d3e6f86513217","message":{"text":"Unused variable user."},"location":{"path":"apps/frontend-nextjs/src/app/cadastro/page.tsx","start_line":50,"end_line":50,"start_column":13,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/733/instances","dismissal_approved_by":null},{"number":732,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/732","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/732","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1369,"end_column":1370},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/732/instances","dismissal_approved_by":null},{"number":731,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/731","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/731","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1349,"end_column":1350},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/731/instances","dismissal_approved_by":null},{"number":730,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/730","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/730","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1348,"end_column":1349},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/730/instances","dismissal_approved_by":null},{"number":729,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/729","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/729","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1329,"end_column":1330},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/729/instances","dismissal_approved_by":null},{"number":728,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/728","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/728","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1328,"end_column":1329},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/728/instances","dismissal_approved_by":null},{"number":727,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/727","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/727","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1327,"end_column":1328},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/727/instances","dismissal_approved_by":null},{"number":726,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/726","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/726","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1314,"end_column":1315},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/726/instances","dismissal_approved_by":null},{"number":725,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/725","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/725","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1282,"end_column":1283},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/725/instances","dismissal_approved_by":null},{"number":724,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/724","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/724","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1281,"end_column":1282},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/724/instances","dismissal_approved_by":null},{"number":723,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/723","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/723","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1251,"end_column":1252},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/723/instances","dismissal_approved_by":null},{"number":722,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/722","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/722","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1250,"end_column":1251},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/722/instances","dismissal_approved_by":null},{"number":721,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/721","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/721","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1207,"end_column":1208},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/721/instances","dismissal_approved_by":null},{"number":720,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/720","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/720","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1206,"end_column":1207},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/720/instances","dismissal_approved_by":null},{"number":719,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/719","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/719","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Property assignment expected."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1205,"end_column":1206},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/719/instances","dismissal_approved_by":null},{"number":718,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/718","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/718","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: ';' expected."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1198,"end_column":1199},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/718/instances","dismissal_approved_by":null},{"number":717,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/717","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/717","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1181,"end_column":1182},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/717/instances","dismissal_approved_by":null},{"number":716,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/716","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/716","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1180,"end_column":1181},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/716/instances","dismissal_approved_by":null},{"number":715,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/715","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/715","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1168,"end_column":1169},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/715/instances","dismissal_approved_by":null},{"number":714,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/714","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/714","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1138,"end_column":1139},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/714/instances","dismissal_approved_by":null},{"number":713,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/713","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/713","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1137,"end_column":1138},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/713/instances","dismissal_approved_by":null},{"number":712,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/712","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/712","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1092,"end_column":1093},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/712/instances","dismissal_approved_by":null},{"number":711,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/711","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/711","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1091,"end_column":1092},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/711/instances","dismissal_approved_by":null},{"number":710,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/710","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/710","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1060,"end_column":1061},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/710/instances","dismissal_approved_by":null},{"number":709,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/709","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/709","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1059,"end_column":1060},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/709/instances","dismissal_approved_by":null},{"number":708,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/708","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/708","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Property assignment expected."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1058,"end_column":1059},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/708/instances","dismissal_approved_by":null},{"number":707,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/707","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/707","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: ';' expected."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1051,"end_column":1052},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/707/instances","dismissal_approved_by":null},{"number":706,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/706","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/706","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":1036,"end_column":1037},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/706/instances","dismissal_approved_by":null},{"number":705,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/705","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/705","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":987,"end_column":988},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/705/instances","dismissal_approved_by":null},{"number":704,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/704","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/704","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":986,"end_column":987},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/704/instances","dismissal_approved_by":null},{"number":703,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/703","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/703","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":905,"end_column":906},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/703/instances","dismissal_approved_by":null},{"number":702,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/702","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/702","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":904,"end_column":905},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/702/instances","dismissal_approved_by":null},{"number":701,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/701","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/701","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":903,"end_column":904},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/701/instances","dismissal_approved_by":null},{"number":700,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/700","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/700","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":895,"end_column":896},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/700/instances","dismissal_approved_by":null},{"number":699,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/699","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/699","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":858,"end_column":859},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/699/instances","dismissal_approved_by":null},{"number":698,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/698","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/698","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":857,"end_column":858},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/698/instances","dismissal_approved_by":null},{"number":697,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/697","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/697","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":786,"end_column":787},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/697/instances","dismissal_approved_by":null},{"number":696,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/696","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/696","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":785,"end_column":786},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/696/instances","dismissal_approved_by":null},{"number":695,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/695","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/695","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":760,"end_column":761},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/695/instances","dismissal_approved_by":null},{"number":694,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/694","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/694","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":759,"end_column":760},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/694/instances","dismissal_approved_by":null},{"number":693,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/693","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/693","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Property assignment expected."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":758,"end_column":759},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/693/instances","dismissal_approved_by":null},{"number":692,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/692","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/692","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: ';' expected."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":751,"end_column":752},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/692/instances","dismissal_approved_by":null},{"number":691,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/691","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/691","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":737,"end_column":738},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/691/instances","dismissal_approved_by":null},{"number":690,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/690","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/690","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":726,"end_column":727},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/690/instances","dismissal_approved_by":null},{"number":689,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/689","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/689","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":725,"end_column":726},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/689/instances","dismissal_approved_by":null},{"number":688,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/688","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/688","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":723,"end_column":724},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/688/instances","dismissal_approved_by":null},{"number":687,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/687","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/687","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":714,"end_column":715},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/687/instances","dismissal_approved_by":null},{"number":686,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/686","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/686","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":680,"end_column":681},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/686/instances","dismissal_approved_by":null},{"number":685,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/685","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/685","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":679,"end_column":680},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/685/instances","dismissal_approved_by":null},{"number":684,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/684","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/684","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":636,"end_column":637},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/684/instances","dismissal_approved_by":null},{"number":683,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/683","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/683","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":635,"end_column":636},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/683/instances","dismissal_approved_by":null},{"number":682,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/682","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/682","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":600,"end_column":601},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/682/instances","dismissal_approved_by":null},{"number":681,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/681","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/681","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":599,"end_column":600},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/681/instances","dismissal_approved_by":null},{"number":680,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/680","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/680","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":551,"end_column":552},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/680/instances","dismissal_approved_by":null},{"number":679,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/679","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/679","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":550,"end_column":551},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/679/instances","dismissal_approved_by":null},{"number":678,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/678","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/678","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":546,"end_column":547},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/678/instances","dismissal_approved_by":null},{"number":677,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/677","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/677","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":495,"end_column":496},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/677/instances","dismissal_approved_by":null},{"number":676,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/676","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/676","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":494,"end_column":495},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/676/instances","dismissal_approved_by":null},{"number":675,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/675","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/675","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":458,"end_column":459},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/675/instances","dismissal_approved_by":null},{"number":674,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/674","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/674","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":457,"end_column":458},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/674/instances","dismissal_approved_by":null},{"number":673,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/673","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/673","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":421,"end_column":422},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/673/instances","dismissal_approved_by":null},{"number":672,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/672","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/672","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":399,"end_column":400},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/672/instances","dismissal_approved_by":null},{"number":671,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/671","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/671","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":395,"end_column":396},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/671/instances","dismissal_approved_by":null},{"number":670,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/670","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/670","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":377,"end_column":378},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/670/instances","dismissal_approved_by":null},{"number":669,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/669","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/669","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":373,"end_column":374},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/669/instances","dismissal_approved_by":null},{"number":668,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/668","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/668","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: 'export' expected."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":330,"end_column":331},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/668/instances","dismissal_approved_by":null},{"number":667,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/667","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/667","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unknown keyword or identifier. Did you mean 'export'?"},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":322,"end_column":323},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/667/instances","dismissal_approved_by":null},{"number":666,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/666","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/666","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":321,"end_column":322},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/666/instances","dismissal_approved_by":null},{"number":665,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/665","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/665","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":319,"end_column":320},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/665/instances","dismissal_approved_by":null},{"number":664,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/664","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/664","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":316,"end_column":317},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/664/instances","dismissal_approved_by":null},{"number":663,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/663","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/663","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":306,"end_column":307},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/663/instances","dismissal_approved_by":null},{"number":662,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/662","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/662","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":288,"end_column":289},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/662/instances","dismissal_approved_by":null},{"number":661,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/661","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/661","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":287,"end_column":288},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/661/instances","dismissal_approved_by":null},{"number":660,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/660","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/660","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":267,"end_column":268},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/660/instances","dismissal_approved_by":null},{"number":659,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/659","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/659","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":256,"end_column":257},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/659/instances","dismissal_approved_by":null},{"number":658,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/658","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/658","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":255,"end_column":256},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/658/instances","dismissal_approved_by":null},{"number":657,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/657","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/657","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":225,"end_column":226},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/657/instances","dismissal_approved_by":null},{"number":656,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/656","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/656","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unknown keyword or identifier. Did you mean 'interface'?"},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":214,"end_column":215},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/656/instances","dismissal_approved_by":null},{"number":655,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/655","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/655","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":213,"end_column":214},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/655/instances","dismissal_approved_by":null},{"number":654,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/654","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/654","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":211,"end_column":212},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/654/instances","dismissal_approved_by":null},{"number":653,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/653","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/653","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":184,"end_column":185},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/653/instances","dismissal_approved_by":null},{"number":652,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/652","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/652","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unknown keyword or identifier. Did you mean 'import'?"},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":160,"end_column":161},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/652/instances","dismissal_approved_by":null},{"number":651,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/651","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/651","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":159,"end_column":160},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/651/instances","dismissal_approved_by":null},{"number":650,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/650","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/650","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":132,"end_column":133},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/650/instances","dismissal_approved_by":null},{"number":649,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/649","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/649","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unknown keyword or identifier. Did you mean 'import'?"},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":102,"end_column":103},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/649/instances","dismissal_approved_by":null},{"number":648,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/648","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/648","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":101,"end_column":102},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/648/instances","dismissal_approved_by":null},{"number":647,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/647","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/647","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":73,"end_column":74},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/647/instances","dismissal_approved_by":null},{"number":646,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/646","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/646","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unknown keyword or identifier. Did you mean 'import'?"},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":48,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/646/instances","dismissal_approved_by":null},{"number":645,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/645","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/645","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":47,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/645/instances","dismissal_approved_by":null},{"number":644,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/644","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/644","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":30,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/644/instances","dismissal_approved_by":null},{"number":643,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/643","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/643","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":25,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/643/instances","dismissal_approved_by":null},{"number":642,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/642","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/642","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unknown keyword or identifier. Did you mean 'import'?"},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":17,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/642/instances","dismissal_approved_by":null},{"number":641,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/641","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/641","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":16,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/641/instances","dismissal_approved_by":null},{"number":640,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/640","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/640","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooterSimple.tsx","start_line":1,"end_line":1,"start_column":14,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/640/instances","dismissal_approved_by":null},{"number":639,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/639","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/639","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/app/sitemap/page.tsx","start_line":1,"end_line":1,"start_column":139,"end_column":140},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/639/instances","dismissal_approved_by":null},{"number":638,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/638","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/638","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/app/sitemap/page.tsx","start_line":1,"end_line":1,"start_column":137,"end_column":138},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/638/instances","dismissal_approved_by":null},{"number":637,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/637","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/637","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/app/sitemap/page.tsx","start_line":1,"end_line":1,"start_column":102,"end_column":103},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/637/instances","dismissal_approved_by":null},{"number":636,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/636","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/636","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unknown keyword or identifier. Did you mean 'import'?"},"location":{"path":"apps/frontend-nextjs/src/app/sitemap/page.tsx","start_line":1,"end_line":1,"start_column":76,"end_column":77},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/636/instances","dismissal_approved_by":null},{"number":635,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/635","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/635","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/app/sitemap/page.tsx","start_line":1,"end_line":1,"start_column":75,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/635/instances","dismissal_approved_by":null},{"number":634,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/634","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/634","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/app/sitemap/page.tsx","start_line":1,"end_line":1,"start_column":58,"end_column":59},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/634/instances","dismissal_approved_by":null},{"number":633,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/633","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/633","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/app/sitemap/page.tsx","start_line":1,"end_line":1,"start_column":53,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/633/instances","dismissal_approved_by":null},{"number":632,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/632","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/632","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unknown keyword or identifier. Did you mean 'import'?"},"location":{"path":"apps/frontend-nextjs/src/app/sitemap/page.tsx","start_line":1,"end_line":1,"start_column":45,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/632/instances","dismissal_approved_by":null},{"number":631,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/631","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/631","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/app/sitemap/page.tsx","start_line":1,"end_line":1,"start_column":44,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/631/instances","dismissal_approved_by":null},{"number":630,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/630","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/630","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/app/sitemap/page.tsx","start_line":1,"end_line":1,"start_column":31,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/630/instances","dismissal_approved_by":null},{"number":629,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/629","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/629","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"apps/frontend-nextjs/src/app/sitemap/page.tsx","start_line":1,"end_line":1,"start_column":25,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/629/instances","dismissal_approved_by":null},{"number":628,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/628","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/628","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Unknown keyword or identifier. Did you mean 'import'?"},"location":{"path":"apps/frontend-nextjs/src/app/sitemap/page.tsx","start_line":1,"end_line":1,"start_column":17,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/628/instances","dismissal_approved_by":null},{"number":627,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/627","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/627","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/app/sitemap/page.tsx","start_line":1,"end_line":1,"start_column":16,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/627/instances","dismissal_approved_by":null},{"number":626,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T23:07:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/626","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/626","state":"fixed","fixed_at":"2025-08-17T23:07:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"c718822881205b2dad9c0b8c84aebc4e03e8227d","message":{"text":"Error: Invalid character."},"location":{"path":"apps/frontend-nextjs/src/app/sitemap/page.tsx","start_line":1,"end_line":1,"start_column":14,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/626/instances","dismissal_approved_by":null},{"number":625,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T22:29:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/625","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/625","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable MoneyIcon."},"location":{"path":"apps/frontend-nextjs/src/app/sobre-a-tese/page.tsx","start_line":230,"end_line":230,"start_column":7,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/625/instances","dismissal_approved_by":null},{"number":624,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T22:29:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/624","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/624","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable PrintIcon."},"location":{"path":"apps/frontend-nextjs/src/app/sobre-a-tese/page.tsx","start_line":224,"end_line":224,"start_column":7,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/624/instances","dismissal_approved_by":null},{"number":623,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T22:29:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/623","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/623","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable BuildingIcon."},"location":{"path":"apps/frontend-nextjs/src/app/sobre-a-tese/page.tsx","start_line":218,"end_line":218,"start_column":7,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/623/instances","dismissal_approved_by":null},{"number":622,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-08-17T22:29:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/622","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/622","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable MedIcon."},"location":{"path":"apps/frontend-nextjs/src/app/sobre-a-tese/page.tsx","start_line":8,"end_line":8,"start_column":7,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/622/instances","dismissal_approved_by":null},{"number":621,"created_at":"2025-08-17T22:29:30Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/621","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/621","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-substring-sanitization","severity":"warning","description":"Incomplete URL substring sanitization","name":"js/incomplete-url-substring-sanitization","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.","help":"# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"'roteirosdispensacao.com' can be anywhere in the URL, and arbitrary hosts may come before or after it."},"location":{"path":"apps/frontend-nextjs/src/services/api.ts","start_line":32,"end_line":32,"start_column":9,"end_column":53},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/621/instances","dismissal_approved_by":null},{"number":620,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/620","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/620","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/services/multimodal_processor.py","start_line":680,"end_line":680,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/620/instances","dismissal_approved_by":null},{"number":619,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/619","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/619","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/services/multimodal_processor.py","start_line":124,"end_line":124,"start_column":9,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/619/instances","dismissal_approved_by":null},{"number":618,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/618","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/618","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'asdict' is not used."},"location":{"path":"apps/backend/services/predictive_system.py","start_line":16,"end_line":16,"start_column":1,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/618/instances","dismissal_approved_by":null},{"number":617,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/617","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/617","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/services/predictive_system.py","start_line":9,"end_line":9,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/617/instances","dismissal_approved_by":null},{"number":616,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-17T20:12:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/616","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/616","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used.\nImport of 'Optional' is not used.\nImport of 'Dict' is not used.\nImport of 'Any' is not used."},"location":{"path":"apps/backend/blueprints/predictions_blueprint.py","start_line":10,"end_line":10,"start_column":1,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/616/instances","dismissal_approved_by":null},{"number":615,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/615","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/615","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'ImageDraw' is not used.\nImport of 'ImageFont' is not used."},"location":{"path":"apps/backend/services/multimodal_processor.py","start_line":24,"end_line":24,"start_column":5,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/615/instances","dismissal_approved_by":null},{"number":614,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/614","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/614","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'np' is not used."},"location":{"path":"apps/backend/services/multimodal_processor.py","start_line":23,"end_line":23,"start_column":5,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/614/instances","dismissal_approved_by":null},{"number":613,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-17T20:12:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/613","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/613","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Dict' is not used.\nImport of 'Any' is not used."},"location":{"path":"apps/backend/blueprints/multimodal_blueprint.py","start_line":14,"end_line":14,"start_column":1,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/613/instances","dismissal_approved_by":null},{"number":612,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-17T20:12:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/612","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/612","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/blueprints/multimodal_blueprint.py","start_line":11,"end_line":11,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/612/instances","dismissal_approved_by":null},{"number":611,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/611","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/611","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'get_vector_store' is not used.\nImport of 'is_vector_store_available' is not used."},"location":{"path":"apps/backend/services/migrate_to_astra.py","start_line":26,"end_line":29,"start_column":1,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/611/instances","dismissal_approved_by":null},{"number":610,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/610","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/610","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'Optional' is not used.\nImport of 'Tuple' is not used.\nImport of 'Dict' is not used."},"location":{"path":"apps/backend/services/migrate_to_astra.py","start_line":16,"end_line":16,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/610/instances","dismissal_approved_by":null},{"number":609,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/609","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/609","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'hashlib' is not used."},"location":{"path":"apps/backend/services/migrate_to_astra.py","start_line":15,"end_line":15,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/609/instances","dismissal_approved_by":null},{"number":608,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/608","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/608","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'uuid' is not used."},"location":{"path":"apps/backend/services/migrate_to_astra.py","start_line":12,"end_line":12,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/608/instances","dismissal_approved_by":null},{"number":607,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/607","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/607","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/services/migrate_to_astra.py","start_line":9,"end_line":9,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/607/instances","dismissal_approved_by":null},{"number":606,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/606","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/606","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'requests' is not used."},"location":{"path":"apps/backend/services/astra_setup_astrapy.py","start_line":22,"end_line":22,"start_column":5,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/606/instances","dismissal_approved_by":null},{"number":605,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/605","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/605","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'DataAPIException' is not used."},"location":{"path":"apps/backend/services/astra_setup_astrapy.py","start_line":21,"end_line":21,"start_column":5,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/605/instances","dismissal_approved_by":null},{"number":604,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/604","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/604","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'List' is not used.\nImport of 'Optional' is not used."},"location":{"path":"apps/backend/services/astra_setup_astrapy.py","start_line":14,"end_line":14,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/604/instances","dismissal_approved_by":null},{"number":603,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/603","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/603","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/services/astra_setup_astrapy.py","start_line":11,"end_line":11,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/603/instances","dismissal_approved_by":null},{"number":602,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/602","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/602","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/services/astra_setup_astrapy.py","start_line":9,"end_line":9,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/602/instances","dismissal_approved_by":null},{"number":601,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/601","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/601","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'requests' is not used."},"location":{"path":"apps/backend/services/astra_setup.py","start_line":26,"end_line":26,"start_column":5,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/601/instances","dismissal_approved_by":null},{"number":600,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/600","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/600","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'SimpleStatement' is not used."},"location":{"path":"apps/backend/services/astra_setup.py","start_line":25,"end_line":25,"start_column":5,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/600/instances","dismissal_approved_by":null},{"number":599,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/599","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/599","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'ConsistencyLevel' is not used."},"location":{"path":"apps/backend/services/astra_setup.py","start_line":24,"end_line":24,"start_column":5,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/599/instances","dismissal_approved_by":null},{"number":598,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/598","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/598","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'List' is not used.\nImport of 'Optional' is not used."},"location":{"path":"apps/backend/services/astra_setup.py","start_line":15,"end_line":15,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/598/instances","dismissal_approved_by":null},{"number":597,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/597","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/597","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'asyncio' is not used."},"location":{"path":"apps/backend/services/astra_setup.py","start_line":13,"end_line":13,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/597/instances","dismissal_approved_by":null},{"number":596,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/596","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/596","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/services/astra_setup.py","start_line":11,"end_line":11,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/596/instances","dismissal_approved_by":null},{"number":595,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/595","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/595","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/services/astra_setup.py","start_line":9,"end_line":9,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/595/instances","dismissal_approved_by":null},{"number":594,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/594","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/594","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/commented-out-code","severity":"note","description":"Commented-out code","name":"py/commented-out-code","tags":["maintainability","quality","readability"],"full_description":"Commented-out code makes the remaining code more difficult to read.","help":"# Commented-out code\nCommented-out code is distracting and confusing for developers who read the surrounding code, and its significance is often unclear. It will not get compiled or tested when the code around it changes, so it's likely to break over time. For these reasons, commented-out code should be avoided.\n\n\n## Recommendation\nRemove or reinstate the commented-out code. If you want to include a snippet of example code in a comment, consider enclosing it in quotes or marking it up as appropriate for the source language.\n\n\n## Example\nIn the following example, a `print` statement, originally used for debugging, is left in the code, but commented out. It should be removed altogether.\n\n\n```python\ndef area(r):\n    #if DEBUG:\n    #   print(\"Computing area of %r\" % r)\n    return r.length * r.width\n\n```\n\n## References\n* Mark Needham: [The danger of commenting out code](http://www.markhneedham.com/blog/2009/01/17/the-danger-of-commenting-out-code/).\n* Los Techies: [Commented Code == Technical Debt](http://lostechies.com/rodpaddock/2010/12/29/commented-code-technical-debt).\n* High Integrity C++ Coding Standard: [2.3.2 Do not comment out code](http://www.codingstandard.com/rule/2-3-2-do-not-comment-out-code/).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"This comment appears to contain commented-out code."},"location":{"path":"apps/backend/blueprints/multimodal_blueprint.py","start_line":293,"end_line":294,"start_column":5,"end_column":58},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/594/instances","dismissal_approved_by":null},{"number":593,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/593","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/593","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Variable analytics_collection is not used."},"location":{"path":"apps/backend/services/astra_setup_astrapy.py","start_line":183,"end_line":183,"start_column":17,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/593/instances","dismissal_approved_by":null},{"number":592,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-17T20:12:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/592","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/592","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/predictions_blueprint.py","start_line":228,"end_line":228,"start_column":21,"end_column":90},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/592/instances","dismissal_approved_by":null},{"number":591,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-17T20:12:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/591","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/591","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/predictions_blueprint.py","start_line":138,"end_line":138,"start_column":21,"end_column":96},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/591/instances","dismissal_approved_by":null},{"number":590,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-17T20:12:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/590","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/590","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/predictions_blueprint.py","start_line":92,"end_line":92,"start_column":25,"end_column":66},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/590/instances","dismissal_approved_by":null},{"number":589,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-17T20:12:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/589","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/589","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/multimodal_blueprint.py","start_line":437,"end_line":437,"start_column":17,"end_column":101},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/589/instances","dismissal_approved_by":null},{"number":588,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-17T20:12:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/588","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/588","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/multimodal_blueprint.py","start_line":176,"end_line":176,"start_column":21,"end_column":62},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/588/instances","dismissal_approved_by":null},{"number":587,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/587","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/587","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/predictions_blueprint.py","start_line":417,"end_line":421,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/587/instances","dismissal_approved_by":null},{"number":586,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/586","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/586","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/multimodal_blueprint.py","start_line":406,"end_line":409,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/586/instances","dismissal_approved_by":null},{"number":585,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/585","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/585","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/multimodal_blueprint.py","start_line":309,"end_line":312,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/585/instances","dismissal_approved_by":null},{"number":584,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/584","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/584","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/multimodal_blueprint.py","start_line":283,"end_line":286,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/584/instances","dismissal_approved_by":null},{"number":583,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/583","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/583","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/multimodal_blueprint.py","start_line":234,"end_line":237,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/583/instances","dismissal_approved_by":null},{"number":582,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/582","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/582","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/multimodal_blueprint.py","start_line":186,"end_line":189,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/582/instances","dismissal_approved_by":null},{"number":581,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/581","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/581","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/multimodal_blueprint.py","start_line":180,"end_line":183,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/581/instances","dismissal_approved_by":null},{"number":580,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/580","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/580","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/multimodal_blueprint.py","start_line":125,"end_line":132,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/580/instances","dismissal_approved_by":null},{"number":579,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/579","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/579","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/multimodal_blueprint.py","start_line":52,"end_line":55,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/579/instances","dismissal_approved_by":null},{"number":578,"created_at":"2025-08-17T20:12:03Z","updated_at":"2025-08-19T03:30:13Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/578","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/578","state":"fixed","fixed_at":"2025-08-19T03:30:11Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/weak-sensitive-data-hashing","severity":"warning","description":"Use of a broken or weak cryptographic hashing algorithm on sensitive data","name":"py/weak-sensitive-data-hashing","tags":["external/cwe/cwe-327","external/cwe/cwe-328","external/cwe/cwe-916","security"],"full_description":"Using broken or weak cryptographic hashing algorithms can compromise security.","help":"# Use of a broken or weak cryptographic hashing algorithm on sensitive data\nUsing a broken or weak cryptographic hash function can leave data vulnerable, and should not be used in security related code.\n\nA strong cryptographic hash function should be resistant to:\n\n* pre-image attacks: if you know a hash value `h(x)`, you should not be able to easily find the input `x`.\n* collision attacks: if you know a hash value `h(x)`, you should not be able to easily find a different input `y` with the same hash value `h(x) = h(y)`.\nIn cases with a limited input space, such as for passwords, the hash function also needs to be computationally expensive to be resistant to brute-force attacks. Passwords should also have an unique salt applied before hashing, but that is not considered by this query.\n\nAs an example, both MD5 and SHA-1 are known to be vulnerable to collision attacks.\n\nSince it's OK to use a weak cryptographic hash function in a non-security context, this query only alerts when these are used to hash sensitive data (such as passwords, certificates, usernames).\n\nUse of broken or weak cryptographic algorithms that are not hashing algorithms, is handled by the `py/weak-cryptographic-algorithm` query.\n\n\n## Recommendation\nEnsure that you use a strong, modern cryptographic hash function:\n\n* such as Argon2, scrypt, bcrypt, or PBKDF2 for passwords and other data with limited input space.\n* such as SHA-2, or SHA-3 in other cases.\n\n## Example\nThe following example shows two functions for checking whether the hash of a certificate matches a known value -- to prevent tampering. The first function uses MD5 that is known to be vulnerable to collision attacks. The second function uses SHA-256 that is a strong cryptographic hashing function.\n\n\n```python\nimport hashlib\n\ndef certificate_matches_known_hash_bad(certificate, known_hash):\n    hash = hashlib.md5(certificate).hexdigest() # BAD\n    return hash == known_hash\n\ndef certificate_matches_known_hash_good(certificate, known_hash):\n    hash = hashlib.sha256(certificate).hexdigest() # GOOD\n    return hash == known_hash\n\n```\n\n## Example\nThe following example shows two functions for hashing passwords. The first function uses SHA-256 to hash passwords. Although SHA-256 is a strong cryptographic hash function, it is not suitable for password hashing since it is not computationally expensive.\n\n\n```python\nimport hashlib\n\ndef get_password_hash(password: str, salt: str):\n    return hashlib.sha256(password + salt).hexdigest() # BAD\n\n```\nThe second function uses Argon2 (through the `argon2-cffi` PyPI package), which is a strong password hashing algorithm (and includes a per-password salt by default).\n\n\n```python\nfrom argon2 import PasswordHasher\n\ndef get_initial_hash(password: str):\n    ph = PasswordHasher()\n    return ph.hash(password) # GOOD\n\ndef check_password(password: str, known_hash):\n    ph = PasswordHasher()\n    return ph.verify(known_hash, password) # GOOD\n\n```\n\n## References\n* OWASP: [Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n* Common Weakness Enumeration: [CWE-327](https://cwe.mitre.org/data/definitions/327.html).\n* Common Weakness Enumeration: [CWE-328](https://cwe.mitre.org/data/definitions/328.html).\n* Common Weakness Enumeration: [CWE-916](https://cwe.mitre.org/data/definitions/916.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"7194261ba9b32766d69ae6beb09d3e6f86513217","message":{"text":"Sensitive data (private) is used in a hashing algorithm (MD5) that is insecure."},"location":{"path":"apps/backend/services/predictive_system.py","start_line":173,"end_line":173,"start_column":28,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/578/instances","dismissal_approved_by":null},{"number":577,"created_at":"2025-08-17T20:10:32Z","updated_at":"2025-08-17T20:10:39Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/577","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/577","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable sessionId."},"location":{"path":"apps/frontend-nextjs/src/hooks/useMultimodal.ts","start_line":129,"end_line":129,"start_column":11,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/577/instances","dismissal_approved_by":null},{"number":576,"created_at":"2025-08-17T20:10:32Z","updated_at":"2025-08-17T20:10:39Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/576","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/576","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable user."},"location":{"path":"apps/frontend-nextjs/src/components/ui/GlobalPersonaFAB.tsx","start_line":44,"end_line":44,"start_column":28,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/576/instances","dismissal_approved_by":null},{"number":575,"created_at":"2025-08-17T20:10:32Z","updated_at":"2025-08-17T20:10:39Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/575","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/575","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable isAuthenticated."},"location":{"path":"apps/frontend-nextjs/src/components/ui/GlobalPersonaFAB.tsx","start_line":44,"end_line":44,"start_column":11,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/575/instances","dismissal_approved_by":null},{"number":574,"created_at":"2025-08-17T20:10:32Z","updated_at":"2025-08-17T20:10:39Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/574","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/574","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable sessionId."},"location":{"path":"apps/frontend-nextjs/src/components/ui/GlobalPersonaFAB.tsx","start_line":43,"end_line":43,"start_column":43,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/574/instances","dismissal_approved_by":null},{"number":573,"created_at":"2025-08-17T20:10:32Z","updated_at":"2025-08-17T20:10:39Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/573","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/573","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable capabilities."},"location":{"path":"apps/frontend-nextjs/src/components/multimodal/ImageUploader.tsx","start_line":32,"end_line":32,"start_column":5,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/573/instances","dismissal_approved_by":null},{"number":572,"created_at":"2025-08-17T20:10:32Z","updated_at":"2025-08-19T23:34:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/572","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/572","state":"fixed","fixed_at":"2025-08-19T23:34:15Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"306b24915d684f03aa64a68788e14ba202ee1d74","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":49,"end_line":49,"start_column":23,"end_column":86},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/572/instances","dismissal_approved_by":null},{"number":571,"created_at":"2025-08-17T20:08:57Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/571","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/571","state":"fixed","fixed_at":"2025-08-18T03:01:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"GHSA-h4gh-qq45-vh27","severity":"warning","description":"pyca/cryptography has a vulnerable OpenSSL included in cryptography wheels","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 37.0.0-43.0.0 are vulnerable to a security issue. More details about the vulnerability itself can be found in https://openssl-library.org/news/secadv/20240903.txt.\n\nIf you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.\n","help":"**Vulnerability GHSA-h4gh-qq45-vh27**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|cryptography|43.0.1|[GHSA-h4gh-qq45-vh27](https://github.com/advisories/GHSA-h4gh-qq45-vh27)|\n\npyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 37.0.0-43.0.0 are vulnerable to a security issue. More details about the vulnerability itself can be found in https://openssl-library.org/news/secadv/20240903.txt.\n\nIf you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.\n","help_uri":"https://github.com/advisories/GHSA-h4gh-qq45-vh27","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"Package: cryptography\nInstalled Version: 41.0.7\nVulnerability GHSA-h4gh-qq45-vh27\nSeverity: MEDIUM\nFixed Version: 43.0.1\nLink: [GHSA-h4gh-qq45-vh27](https://github.com/advisories/GHSA-h4gh-qq45-vh27)"},"location":{"path":"apps/backend/requirements.txt","start_line":69,"end_line":69,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/571/instances","dismissal_approved_by":null},{"number":570,"created_at":"2025-08-17T20:08:57Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/570","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/570","state":"fixed","fixed_at":"2025-08-18T03:01:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-0727","severity":"warning","description":"openssl: denial of service via null dereference","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in ","help":"**Vulnerability CVE-2024-0727**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|cryptography|42.0.2|[CVE-2024-0727](https://avd.aquasec.com/nvd/cve-2024-0727)|\n\nIssue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-0727","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"Package: cryptography\nInstalled Version: 41.0.7\nVulnerability CVE-2024-0727\nSeverity: MEDIUM\nFixed Version: 42.0.2\nLink: [CVE-2024-0727](https://avd.aquasec.com/nvd/cve-2024-0727)"},"location":{"path":"apps/backend/requirements.txt","start_line":69,"end_line":69,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/570/instances","dismissal_approved_by":null},{"number":569,"created_at":"2025-08-17T20:08:57Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/569","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/569","state":"fixed","fixed_at":"2025-08-18T03:01:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-26130","severity":"error","description":"python-cryptography: NULL pointer dereference with pkcs12.serialize_key_and_certificates when called with a non-matching certificate and private key and an hmac_hash override","name":"LanguageSpecificPackageVulnerability","tags":["HIGH","security","vulnerability"],"full_description":"cryptography is a package designed to expose cryptographic primitives and recipes to Python developers. Starting in version 38.0.0 and prior to version 42.0.4, if `pkcs12.serialize_key_and_certificates` is called with both a certificate whose public key did not match the provided private key and an `encryption_algorithm` with `hmac_hash` set (via `PrivateFormat.PKCS12.encryption_builder().hmac_hash(...)`, then a NULL pointer dereference would occur, crashing the Python process. This has been resolved in version 42.0.4, the first version in which a `ValueError` is properly raised.","help":"**Vulnerability CVE-2024-26130**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|cryptography|42.0.4|[CVE-2024-26130](https://avd.aquasec.com/nvd/cve-2024-26130)|\n\ncryptography is a package designed to expose cryptographic primitives and recipes to Python developers. Starting in version 38.0.0 and prior to version 42.0.4, if `pkcs12.serialize_key_and_certificates` is called with both a certificate whose public key did not match the provided private key and an `encryption_algorithm` with `hmac_hash` set (via `PrivateFormat.PKCS12.encryption_builder().hmac_hash(...)`, then a NULL pointer dereference would occur, crashing the Python process. This has been resolved in version 42.0.4, the first version in which a `ValueError` is properly raised.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-26130","security_severity_level":"high"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"Package: cryptography\nInstalled Version: 41.0.7\nVulnerability CVE-2024-26130\nSeverity: HIGH\nFixed Version: 42.0.4\nLink: [CVE-2024-26130](https://avd.aquasec.com/nvd/cve-2024-26130)"},"location":{"path":"apps/backend/requirements.txt","start_line":69,"end_line":69,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/569/instances","dismissal_approved_by":null},{"number":568,"created_at":"2025-08-17T20:08:57Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/568","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/568","state":"fixed","fixed_at":"2025-08-18T03:01:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2023-50782","severity":"error","description":"python-cryptography: Bleichenbacher timing oracle attack against RSA decryption - incomplete fix for CVE-2020-25659","name":"LanguageSpecificPackageVulnerability","tags":["HIGH","security","vulnerability"],"full_description":"A flaw was found in the python-cryptography package. This issue may allow a remote attacker to decrypt captured messages in TLS servers that use RSA key exchanges, which may lead to exposure of confidential or sensitive data.","help":"**Vulnerability CVE-2023-50782**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|cryptography|42.0.0|[CVE-2023-50782](https://avd.aquasec.com/nvd/cve-2023-50782)|\n\nA flaw was found in the python-cryptography package. This issue may allow a remote attacker to decrypt captured messages in TLS servers that use RSA key exchanges, which may lead to exposure of confidential or sensitive data.","help_uri":"https://avd.aquasec.com/nvd/cve-2023-50782","security_severity_level":"high"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"Package: cryptography\nInstalled Version: 41.0.7\nVulnerability CVE-2023-50782\nSeverity: HIGH\nFixed Version: 42.0.0\nLink: [CVE-2023-50782](https://avd.aquasec.com/nvd/cve-2023-50782)"},"location":{"path":"apps/backend/requirements.txt","start_line":69,"end_line":69,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/568/instances","dismissal_approved_by":null},{"number":567,"created_at":"2025-08-17T20:08:57Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/567","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/567","state":"fixed","fixed_at":"2025-08-18T03:01:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-49767","severity":"warning","description":"werkzeug: python-werkzeug: Werkzeug possible resource exhaustion when parsing file data in forms","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"Werkzeug is a Web Server Gateway Interface web application library. Applications using `werkzeug.formparser.MultiPartParser` corresponding to a version of Werkzeug prior to 3.0.6 to parse `multipart/form-data` requests (e.g. all flask applications) are vulnerable to a relatively simple but effective resource exhaustion (denial of service) attack. A specifically crafted form submission request can cause the parser to allocate and block 3 to 8 times the upload size in main memory. There is no upper limit; a single upload at 1 Gbit/s can exhaust 32 GB of RAM in less than 60 seconds. Werkzeug version 3.0.6 fixes this issue.","help":"**Vulnerability CVE-2024-49767**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Werkzeug|3.0.6|[CVE-2024-49767](https://avd.aquasec.com/nvd/cve-2024-49767)|\n\nWerkzeug is a Web Server Gateway Interface web application library. Applications using `werkzeug.formparser.MultiPartParser` corresponding to a version of Werkzeug prior to 3.0.6 to parse `multipart/form-data` requests (e.g. all flask applications) are vulnerable to a relatively simple but effective resource exhaustion (denial of service) attack. A specifically crafted form submission request can cause the parser to allocate and block 3 to 8 times the upload size in main memory. There is no upper limit; a single upload at 1 Gbit/s can exhaust 32 GB of RAM in less than 60 seconds. Werkzeug version 3.0.6 fixes this issue.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-49767","security_severity_level":"high"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"Package: Werkzeug\nInstalled Version: 3.0.1\nVulnerability CVE-2024-49767\nSeverity: MEDIUM\nFixed Version: 3.0.6\nLink: [CVE-2024-49767](https://avd.aquasec.com/nvd/cve-2024-49767)"},"location":{"path":"apps/backend/requirements.txt","start_line":7,"end_line":7,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/567/instances","dismissal_approved_by":null},{"number":566,"created_at":"2025-08-17T20:08:57Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/566","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/566","state":"fixed","fixed_at":"2025-08-18T03:01:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-49766","severity":"warning","description":"werkzeug: python-werkzeug: Werkzeug safe_join not safe on Windows","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"Werkzeug is a Web Server Gateway Interface web application library. On Python < 3.11 on Windows, os.path.isabs() does not catch UNC paths like //server/share. Werkzeug's safe_join() relies on this check, and so can produce a path that is not safe, potentially allowing unintended access to data. Applications using Python >= 3.11, or not using Windows, are not vulnerable. Werkzeug version 3.0.6 contains a patch.","help":"**Vulnerability CVE-2024-49766**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Werkzeug|3.0.6|[CVE-2024-49766](https://avd.aquasec.com/nvd/cve-2024-49766)|\n\nWerkzeug is a Web Server Gateway Interface web application library. On Python < 3.11 on Windows, os.path.isabs() does not catch UNC paths like //server/share. Werkzeug's safe_join() relies on this check, and so can produce a path that is not safe, potentially allowing unintended access to data. Applications using Python >= 3.11, or not using Windows, are not vulnerable. Werkzeug version 3.0.6 contains a patch.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-49766","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"Package: Werkzeug\nInstalled Version: 3.0.1\nVulnerability CVE-2024-49766\nSeverity: MEDIUM\nFixed Version: 3.0.6\nLink: [CVE-2024-49766](https://avd.aquasec.com/nvd/cve-2024-49766)"},"location":{"path":"apps/backend/requirements.txt","start_line":7,"end_line":7,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/566/instances","dismissal_approved_by":null},{"number":565,"created_at":"2025-08-17T20:08:57Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/565","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/565","state":"fixed","fixed_at":"2025-08-18T03:01:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-34069","severity":"error","description":"python-werkzeug: user may execute code on a developer's machine","name":"LanguageSpecificPackageVulnerability","tags":["HIGH","security","vulnerability"],"full_description":"Werkzeug is a comprehensive WSGI web application library. The debugger in affected versions of Werkzeug can allow an attacker to execute code on a developer's machine under some circumstances. This requires the attacker to get the developer to interact with a domain and subdomain they control, and enter the debugger PIN, but if they are successful it allows access to the debugger even if it is only running on localhost. This also requires the attacker to guess a URL in the developer's application that will trigger the debugger. This vulnerability is fixed in 3.0.3.","help":"**Vulnerability CVE-2024-34069**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|Werkzeug|3.0.3|[CVE-2024-34069](https://avd.aquasec.com/nvd/cve-2024-34069)|\n\nWerkzeug is a comprehensive WSGI web application library. The debugger in affected versions of Werkzeug can allow an attacker to execute code on a developer's machine under some circumstances. This requires the attacker to get the developer to interact with a domain and subdomain they control, and enter the debugger PIN, but if they are successful it allows access to the debugger even if it is only running on localhost. This also requires the attacker to guess a URL in the developer's application that will trigger the debugger. This vulnerability is fixed in 3.0.3.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-34069","security_severity_level":"high"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"Package: Werkzeug\nInstalled Version: 3.0.1\nVulnerability CVE-2024-34069\nSeverity: HIGH\nFixed Version: 3.0.3\nLink: [CVE-2024-34069](https://avd.aquasec.com/nvd/cve-2024-34069)"},"location":{"path":"apps/backend/requirements.txt","start_line":7,"end_line":7,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/565/instances","dismissal_approved_by":null},{"number":564,"created_at":"2025-08-17T20:08:57Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/564","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/564","state":"fixed","fixed_at":"2025-08-18T03:01:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-6866","severity":"warning","description":"corydolphin/flask-cors version 4.01 contains a vulnerability where the ...","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"corydolphin/flask-cors version 4.01 contains a vulnerability where the request path matching is case-insensitive due to the use of the `try_match` function, which is originally intended for matching hosts. This results in a mismatch because paths in URLs are case-sensitive, but the regex matching treats them as case-insensitive. This misconfiguration can lead to significant security vulnerabilities, allowing unauthorized origins to access paths meant to be restricted, resulting in data exposure and potential data leaks.","help":"**Vulnerability CVE-2024-6866**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Flask-CORS|6.0.0|[CVE-2024-6866](https://avd.aquasec.com/nvd/cve-2024-6866)|\n\ncorydolphin/flask-cors version 4.01 contains a vulnerability where the request path matching is case-insensitive due to the use of the `try_match` function, which is originally intended for matching hosts. This results in a mismatch because paths in URLs are case-sensitive, but the regex matching treats them as case-insensitive. This misconfiguration can lead to significant security vulnerabilities, allowing unauthorized origins to access paths meant to be restricted, resulting in data exposure and potential data leaks.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-6866","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"Package: Flask-CORS\nInstalled Version: 4.0.0\nVulnerability CVE-2024-6866\nSeverity: MEDIUM\nFixed Version: 6.0.0\nLink: [CVE-2024-6866](https://avd.aquasec.com/nvd/cve-2024-6866)"},"location":{"path":"apps/backend/requirements.txt","start_line":6,"end_line":6,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/564/instances","dismissal_approved_by":null},{"number":563,"created_at":"2025-08-17T20:08:57Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/563","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/563","state":"fixed","fixed_at":"2025-08-18T03:01:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-6844","severity":"warning","description":"A vulnerability in corydolphin/flask-cors version 4.0.1 allows for inc ...","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"A vulnerability in corydolphin/flask-cors version 4.0.1 allows for inconsistent CORS matching due to the handling of the '+' character in URL paths. The request.path is passed through the unquote_plus function, which converts the '+' character to a space ' '. This behavior leads to incorrect path normalization, causing potential mismatches in CORS configuration. As a result, endpoints may not be matched correctly to their CORS settings, leading to unexpected CORS policy application. This can cause unauthorized cross-origin access or block valid requests, creating security vulnerabilities and usability issues.","help":"**Vulnerability CVE-2024-6844**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Flask-CORS|6.0.0|[CVE-2024-6844](https://avd.aquasec.com/nvd/cve-2024-6844)|\n\nA vulnerability in corydolphin/flask-cors version 4.0.1 allows for inconsistent CORS matching due to the handling of the '+' character in URL paths. The request.path is passed through the unquote_plus function, which converts the '+' character to a space ' '. This behavior leads to incorrect path normalization, causing potential mismatches in CORS configuration. As a result, endpoints may not be matched correctly to their CORS settings, leading to unexpected CORS policy application. This can cause unauthorized cross-origin access or block valid requests, creating security vulnerabilities and usability issues.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-6844","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"Package: Flask-CORS\nInstalled Version: 4.0.0\nVulnerability CVE-2024-6844\nSeverity: MEDIUM\nFixed Version: 6.0.0\nLink: [CVE-2024-6844](https://avd.aquasec.com/nvd/cve-2024-6844)"},"location":{"path":"apps/backend/requirements.txt","start_line":6,"end_line":6,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/563/instances","dismissal_approved_by":null},{"number":562,"created_at":"2025-08-17T20:08:57Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/562","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/562","state":"fixed","fixed_at":"2025-08-18T03:01:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-6839","severity":"warning","description":"corydolphin/flask-cors version 4.0.1 contains an improper regex path m ...","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"corydolphin/flask-cors version 4.0.1 contains an improper regex path matching vulnerability. The plugin prioritizes longer regex patterns over more specific ones when matching paths, which can lead to less restrictive CORS policies being applied to sensitive endpoints. This mismatch in regex pattern priority allows unauthorized cross-origin access to sensitive data or functionality, potentially exposing confidential information and increasing the risk of unauthorized actions by malicious actors.","help":"**Vulnerability CVE-2024-6839**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Flask-CORS|6.0.0|[CVE-2024-6839](https://avd.aquasec.com/nvd/cve-2024-6839)|\n\ncorydolphin/flask-cors version 4.0.1 contains an improper regex path matching vulnerability. The plugin prioritizes longer regex patterns over more specific ones when matching paths, which can lead to less restrictive CORS policies being applied to sensitive endpoints. This mismatch in regex pattern priority allows unauthorized cross-origin access to sensitive data or functionality, potentially exposing confidential information and increasing the risk of unauthorized actions by malicious actors.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-6839","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"Package: Flask-CORS\nInstalled Version: 4.0.0\nVulnerability CVE-2024-6839\nSeverity: MEDIUM\nFixed Version: 6.0.0\nLink: [CVE-2024-6839](https://avd.aquasec.com/nvd/cve-2024-6839)"},"location":{"path":"apps/backend/requirements.txt","start_line":6,"end_line":6,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/562/instances","dismissal_approved_by":null},{"number":561,"created_at":"2025-08-17T20:08:57Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/561","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/561","state":"fixed","fixed_at":"2025-08-18T03:01:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-1681","severity":"warning","description":"corydolphin/flask-cors is vulnerable to log injection when the log lev ...","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"corydolphin/flask-cors is vulnerable to log injection when the log level is set to debug. An attacker can inject fake log entries into the log file by sending a specially crafted GET request containing a CRLF sequence in the request path. This vulnerability allows attackers to corrupt log files, potentially covering tracks of other attacks, confusing log post-processing tools, and forging log entries. The issue is due to improper output neutralization for logs.","help":"**Vulnerability CVE-2024-1681**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Flask-CORS|4.0.1|[CVE-2024-1681](https://avd.aquasec.com/nvd/cve-2024-1681)|\n\ncorydolphin/flask-cors is vulnerable to log injection when the log level is set to debug. An attacker can inject fake log entries into the log file by sending a specially crafted GET request containing a CRLF sequence in the request path. This vulnerability allows attackers to corrupt log files, potentially covering tracks of other attacks, confusing log post-processing tools, and forging log entries. The issue is due to improper output neutralization for logs.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-1681","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"Package: Flask-CORS\nInstalled Version: 4.0.0\nVulnerability CVE-2024-1681\nSeverity: MEDIUM\nFixed Version: 4.0.1\nLink: [CVE-2024-1681](https://avd.aquasec.com/nvd/cve-2024-1681)"},"location":{"path":"apps/backend/requirements.txt","start_line":6,"end_line":6,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/561/instances","dismissal_approved_by":null},{"number":560,"created_at":"2025-08-17T20:08:57Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/560","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/560","state":"fixed","fixed_at":"2025-08-18T03:01:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-6221","severity":"error","description":"A vulnerability in corydolphin/flask-cors version 4.0.1 allows the `Ac ...","name":"LanguageSpecificPackageVulnerability","tags":["HIGH","security","vulnerability"],"full_description":"A vulnerability in corydolphin/flask-cors version 4.0.1 allows the `Access-Control-Allow-Private-Network` CORS header to be set to true by default. This behavior can expose private network resources to unauthorized external access, leading to significant security risks such as data breaches, unauthorized access to sensitive information, and potential network intrusions.","help":"**Vulnerability CVE-2024-6221**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|Flask-CORS|4.0.2|[CVE-2024-6221](https://avd.aquasec.com/nvd/cve-2024-6221)|\n\nA vulnerability in corydolphin/flask-cors version 4.0.1 allows the `Access-Control-Allow-Private-Network` CORS header to be set to true by default. This behavior can expose private network resources to unauthorized external access, leading to significant security risks such as data breaches, unauthorized access to sensitive information, and potential network intrusions.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-6221","security_severity_level":"high"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"Package: Flask-CORS\nInstalled Version: 4.0.0\nVulnerability CVE-2024-6221\nSeverity: HIGH\nFixed Version: 4.0.2\nLink: [CVE-2024-6221](https://avd.aquasec.com/nvd/cve-2024-6221)"},"location":{"path":"apps/backend/requirements.txt","start_line":6,"end_line":6,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/560/instances","dismissal_approved_by":null},{"number":559,"created_at":"2025-08-17T16:25:03Z","updated_at":"2025-08-17T16:25:16Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/559","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/559","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable completionRate."},"location":{"path":"apps/frontend-nextjs/src/utils/medicalAnalytics.ts","start_line":286,"end_line":286,"start_column":11,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/559/instances","dismissal_approved_by":null},{"number":558,"created_at":"2025-08-17T16:25:03Z","updated_at":"2025-08-17T16:25:16Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/558","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/558","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable enableABTesting."},"location":{"path":"apps/frontend-nextjs/src/hooks/useRemoteConfig.ts","start_line":150,"end_line":150,"start_column":5,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/558/instances","dismissal_approved_by":null},{"number":557,"created_at":"2025-08-17T16:25:03Z","updated_at":"2025-08-17T16:25:16Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/557","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/557","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ExperienceLevel."},"location":{"path":"apps/frontend-nextjs/src/hooks/usePersonalization.ts","start_line":7,"end_line":15,"start_column":1,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/557/instances","dismissal_approved_by":null},{"number":556,"created_at":"2025-08-17T16:25:03Z","updated_at":"2025-08-28T02:28:45Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/556","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/556","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Unused variable applyRolePreset."},"location":{"path":"apps/frontend-nextjs/src/components/personalization/PersonalizationOnboarding.tsx","start_line":100,"end_line":100,"start_column":34,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/556/instances","dismissal_approved_by":null},{"number":555,"created_at":"2025-08-17T16:25:03Z","updated_at":"2025-08-17T16:25:16Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/555","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/555","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports emojiToIcon, useMedicalIcons."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooter.tsx","start_line":21,"end_line":30,"start_column":1,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/555/instances","dismissal_approved_by":null},{"number":554,"created_at":"2025-08-17T16:25:03Z","updated_at":"2025-08-17T16:25:16Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/554","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/554","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable touchSupport."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/MobileNavigation.tsx","start_line":38,"end_line":38,"start_column":21,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/554/instances","dismissal_approved_by":null},{"number":553,"created_at":"2025-08-17T16:25:03Z","updated_at":"2025-08-17T16:25:16Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/553","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/553","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable isMobile."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/MobileNavigation.tsx","start_line":38,"end_line":38,"start_column":11,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/553/instances","dismissal_approved_by":null},{"number":552,"created_at":"2025-08-17T16:25:03Z","updated_at":"2025-08-17T16:25:16Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/552","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/552","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable isScrollingDown."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/FastAccessBar.tsx","start_line":52,"end_line":52,"start_column":10,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/552/instances","dismissal_approved_by":null},{"number":551,"created_at":"2025-08-17T16:25:03Z","updated_at":"2025-08-17T16:25:16Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/551","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/551","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import getUrgencyFromKeywords."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/FastAccessBar.tsx","start_line":25,"end_line":25,"start_column":1,"end_column":64},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/551/instances","dismissal_approved_by":null},{"number":550,"created_at":"2025-08-17T12:28:13Z","updated_at":"2025-08-17T12:28:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/550","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/550","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable skipped."},"location":{"path":"apps/frontend-nextjs/src/components/onboarding/WelcomeWizard.tsx","start_line":547,"end_line":547,"start_column":28,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/550/instances","dismissal_approved_by":null},{"number":549,"created_at":"2025-08-17T12:28:13Z","updated_at":"2025-08-17T12:28:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/549","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/549","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/trivial-conditional","severity":"warning","description":"Useless conditional","name":"js/trivial-conditional","tags":["correctness","external/cwe/cwe-570","external/cwe/cwe-571","quality","reliability"],"full_description":"If a conditional expression always evaluates to true or always evaluates to false, this suggests incomplete code or a logic error.","help":"# Useless conditional\nIf a condition always evaluates to true or always evaluates to false, this often indicates incomplete code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the condition is useless. If it is no longer needed, remove it.\n\n\n## Example\nThe following example constructs an array `lines`, and then attempts to check whether it has any elements by means of an if conditional `if (!lines)`.\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\nNote that in JavaScript (unlike some other languages) arrays and objects are always considered to be true when evaluated in a Boolean context. The code should instead check `lines.length`:\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines.length)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\n\n## References\n* Mozilla Developer Network: [Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n* Common Weakness Enumeration: [CWE-570](https://cwe.mitre.org/data/definitions/570.html).\n* Common Weakness Enumeration: [CWE-571](https://cwe.mitre.org/data/definitions/571.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This use of variable 'isVisible' always evaluates to true."},"location":{"path":"apps/frontend-nextjs/src/components/onboarding/WelcomeWizard.tsx","start_line":637,"end_line":637,"start_column":55,"end_column":64},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/549/instances","dismissal_approved_by":null},{"number":548,"created_at":"2025-08-17T12:28:13Z","updated_at":"2025-08-17T12:28:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/548","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/548","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/trivial-conditional","severity":"warning","description":"Useless conditional","name":"js/trivial-conditional","tags":["correctness","external/cwe/cwe-570","external/cwe/cwe-571","quality","reliability"],"full_description":"If a conditional expression always evaluates to true or always evaluates to false, this suggests incomplete code or a logic error.","help":"# Useless conditional\nIf a condition always evaluates to true or always evaluates to false, this often indicates incomplete code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the condition is useless. If it is no longer needed, remove it.\n\n\n## Example\nThe following example constructs an array `lines`, and then attempts to check whether it has any elements by means of an if conditional `if (!lines)`.\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\nNote that in JavaScript (unlike some other languages) arrays and objects are always considered to be true when evaluated in a Boolean context. The code should instead check `lines.length`:\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines.length)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\n\n## References\n* Mozilla Developer Network: [Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n* Common Weakness Enumeration: [CWE-570](https://cwe.mitre.org/data/definitions/570.html).\n* Common Weakness Enumeration: [CWE-571](https://cwe.mitre.org/data/definitions/571.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This use of variable 'isVisible' always evaluates to true."},"location":{"path":"apps/frontend-nextjs/src/components/onboarding/WelcomeWizard.tsx","start_line":633,"end_line":633,"start_column":41,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/548/instances","dismissal_approved_by":null},{"number":547,"created_at":"2025-08-17T12:28:13Z","updated_at":"2025-08-17T12:28:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/547","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/547","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/trivial-conditional","severity":"warning","description":"Useless conditional","name":"js/trivial-conditional","tags":["correctness","external/cwe/cwe-570","external/cwe/cwe-571","quality","reliability"],"full_description":"If a conditional expression always evaluates to true or always evaluates to false, this suggests incomplete code or a logic error.","help":"# Useless conditional\nIf a condition always evaluates to true or always evaluates to false, this often indicates incomplete code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the condition is useless. If it is no longer needed, remove it.\n\n\n## Example\nThe following example constructs an array `lines`, and then attempts to check whether it has any elements by means of an if conditional `if (!lines)`.\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\nNote that in JavaScript (unlike some other languages) arrays and objects are always considered to be true when evaluated in a Boolean context. The code should instead check `lines.length`:\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines.length)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\n\n## References\n* Mozilla Developer Network: [Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n* Common Weakness Enumeration: [CWE-570](https://cwe.mitre.org/data/definitions/570.html).\n* Common Weakness Enumeration: [CWE-571](https://cwe.mitre.org/data/definitions/571.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This use of variable 'isVisible' always evaluates to true."},"location":{"path":"apps/frontend-nextjs/src/components/onboarding/WelcomeWizard.tsx","start_line":593,"end_line":593,"start_column":57,"end_column":66},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/547/instances","dismissal_approved_by":null},{"number":546,"created_at":"2025-08-17T12:28:13Z","updated_at":"2025-08-17T12:28:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/546","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/546","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/trivial-conditional","severity":"warning","description":"Useless conditional","name":"js/trivial-conditional","tags":["correctness","external/cwe/cwe-570","external/cwe/cwe-571","quality","reliability"],"full_description":"If a conditional expression always evaluates to true or always evaluates to false, this suggests incomplete code or a logic error.","help":"# Useless conditional\nIf a condition always evaluates to true or always evaluates to false, this often indicates incomplete code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the condition is useless. If it is no longer needed, remove it.\n\n\n## Example\nThe following example constructs an array `lines`, and then attempts to check whether it has any elements by means of an if conditional `if (!lines)`.\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\nNote that in JavaScript (unlike some other languages) arrays and objects are always considered to be true when evaluated in a Boolean context. The code should instead check `lines.length`:\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines.length)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\n\n## References\n* Mozilla Developer Network: [Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n* Common Weakness Enumeration: [CWE-570](https://cwe.mitre.org/data/definitions/570.html).\n* Common Weakness Enumeration: [CWE-571](https://cwe.mitre.org/data/definitions/571.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This use of variable 'isVisible' always evaluates to true."},"location":{"path":"apps/frontend-nextjs/src/components/onboarding/WelcomeWizard.tsx","start_line":589,"end_line":589,"start_column":43,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/546/instances","dismissal_approved_by":null},{"number":545,"created_at":"2025-08-17T07:18:11Z","updated_at":"2025-08-17T07:18:13Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/545","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/545","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports HelpIcon, HomeIcon, ModulesIcon, PhoneIcon, ResourcesIcon, UserCheckIcon, getIconByEmoji."},"location":{"path":"apps/frontend-nextjs/src/app/page.tsx","start_line":34,"end_line":44,"start_column":1,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/545/instances","dismissal_approved_by":null},{"number":544,"created_at":"2025-08-17T06:19:10Z","updated_at":"2025-08-28T02:28:45Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/544","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/544","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Unused imports ContentChunking, createEducationalContentChunk, createMedicalContentChunk."},"location":{"path":"apps/frontend-nextjs/src/app/page.tsx","start_line":18,"end_line":18,"start_column":1,"end_column":138},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/544/instances","dismissal_approved_by":null},{"number":543,"created_at":"2025-08-17T06:19:10Z","updated_at":"2025-08-17T06:19:29Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/543","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/543","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable router."},"location":{"path":"apps/frontend-nextjs/src/app/modules/page.tsx","start_line":26,"end_line":26,"start_column":9,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/543/instances","dismissal_approved_by":null},{"number":542,"created_at":"2025-08-17T04:04:02Z","updated_at":"2025-08-17T05:23:15Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/542","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/542","state":"fixed","fixed_at":"2025-08-17T05:23:14Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/duplicate-property","severity":"warning","description":"Duplicate property","name":"js/duplicate-property","tags":["external/cwe/cwe-563","maintainability","quality","readability"],"full_description":"Listing the same property twice in one object literal is redundant and may indicate a copy-paste mistake.","help":"# Duplicate property\nIn ECMAScript 2015 and above, as well as ECMAScript 5 non-strict mode, an object literal may define the same property multiple times, with later definitions overwriting earlier ones. If all definitions assign the same value to the property, this will not to lead to problems at runtime, but it makes the code harder to read and maintain.\n\n\n## Recommendation\nEliminate the spurious redefinition.\n\n\n## Example\nIn the following example, the object literal passed to method `css` has two definitions of property `backgroundColor`, both setting it to value `\"orange\"`.\n\n\n```javascript\n$(\".alert\").css({\n  backgroundColor: \"orange\",\n  fontWeight: \"bold\",\n  backgroundColor: \"orange\"\n});\n```\nThe second definition is spurious and should be removed:\n\n\n```javascript\n$(\".alert\").css({\n  backgroundColor: \"orange\",\n  fontWeight: \"bold\"\n});\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Annex C. ECMA, 2011.\n* Ecma International, *ECMAScript Language Definition*, 6th Edition, Annex E. ECMA, 2015.\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"0b01845785e3707e1ec58013cb45678f65d6186e","message":{"text":"This property is duplicated in a later property."},"location":{"path":"apps/frontend-nextjs/src/utils/emojiToIconConverter.ts","start_line":135,"end_line":135,"start_column":3,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/542/instances","dismissal_approved_by":null},{"number":541,"created_at":"2025-08-17T04:04:02Z","updated_at":"2025-08-17T05:23:15Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/541","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/541","state":"fixed","fixed_at":"2025-08-17T05:23:14Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/duplicate-property","severity":"warning","description":"Duplicate property","name":"js/duplicate-property","tags":["external/cwe/cwe-563","maintainability","quality","readability"],"full_description":"Listing the same property twice in one object literal is redundant and may indicate a copy-paste mistake.","help":"# Duplicate property\nIn ECMAScript 2015 and above, as well as ECMAScript 5 non-strict mode, an object literal may define the same property multiple times, with later definitions overwriting earlier ones. If all definitions assign the same value to the property, this will not to lead to problems at runtime, but it makes the code harder to read and maintain.\n\n\n## Recommendation\nEliminate the spurious redefinition.\n\n\n## Example\nIn the following example, the object literal passed to method `css` has two definitions of property `backgroundColor`, both setting it to value `\"orange\"`.\n\n\n```javascript\n$(\".alert\").css({\n  backgroundColor: \"orange\",\n  fontWeight: \"bold\",\n  backgroundColor: \"orange\"\n});\n```\nThe second definition is spurious and should be removed:\n\n\n```javascript\n$(\".alert\").css({\n  backgroundColor: \"orange\",\n  fontWeight: \"bold\"\n});\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Annex C. ECMA, 2011.\n* Ecma International, *ECMAScript Language Definition*, 6th Edition, Annex E. ECMA, 2015.\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"0b01845785e3707e1ec58013cb45678f65d6186e","message":{"text":"This property is duplicated in a later property."},"location":{"path":"apps/frontend-nextjs/src/utils/emojiToIconConverter.ts","start_line":59,"end_line":59,"start_column":3,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/541/instances","dismissal_approved_by":null},{"number":540,"created_at":"2025-08-17T04:04:02Z","updated_at":"2025-08-17T05:23:15Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/540","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/540","state":"fixed","fixed_at":"2025-08-17T05:23:14Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/duplicate-property","severity":"warning","description":"Duplicate property","name":"js/duplicate-property","tags":["external/cwe/cwe-563","maintainability","quality","readability"],"full_description":"Listing the same property twice in one object literal is redundant and may indicate a copy-paste mistake.","help":"# Duplicate property\nIn ECMAScript 2015 and above, as well as ECMAScript 5 non-strict mode, an object literal may define the same property multiple times, with later definitions overwriting earlier ones. If all definitions assign the same value to the property, this will not to lead to problems at runtime, but it makes the code harder to read and maintain.\n\n\n## Recommendation\nEliminate the spurious redefinition.\n\n\n## Example\nIn the following example, the object literal passed to method `css` has two definitions of property `backgroundColor`, both setting it to value `\"orange\"`.\n\n\n```javascript\n$(\".alert\").css({\n  backgroundColor: \"orange\",\n  fontWeight: \"bold\",\n  backgroundColor: \"orange\"\n});\n```\nThe second definition is spurious and should be removed:\n\n\n```javascript\n$(\".alert\").css({\n  backgroundColor: \"orange\",\n  fontWeight: \"bold\"\n});\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Annex C. ECMA, 2011.\n* Ecma International, *ECMAScript Language Definition*, 6th Edition, Annex E. ECMA, 2015.\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"0b01845785e3707e1ec58013cb45678f65d6186e","message":{"text":"This property is duplicated in a later property."},"location":{"path":"apps/frontend-nextjs/src/utils/emojiToIconConverter.ts","start_line":50,"end_line":50,"start_column":3,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/540/instances","dismissal_approved_by":null},{"number":539,"created_at":"2025-08-17T04:04:02Z","updated_at":"2025-08-17T05:23:15Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/539","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/539","state":"fixed","fixed_at":"2025-08-17T05:23:14Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/overwritten-property","severity":"error","description":"Overwritten property","name":"js/overwritten-property","tags":["correctness","external/cwe/cwe-563","quality","reliability"],"full_description":"If an object literal has two properties with the same name, the second property overwrites the first one, which makes the code hard to understand and error-prone.","help":"# Overwritten property\nIn ECMAScript 2015 and above, as well as ECMAScript 5 non-strict mode, an object literal may define the same property multiple times, with later definitions overwriting earlier ones. In particular, if the last definition assigns a different value from earlier definitions, the earlier value is lost, which is most likely unintentional and should be avoided.\n\n\n## Recommendation\nRename the properties to have different names.\n\n\n## Example\nIn the following example, the object literal assigned to `point` has two definitions of property `x`. The object's use in function `dist` suggests that the second definition should define a property `y` instead, and should be renamed.\n\n\n```javascript\nfunction dist(p) {\n\treturn Math.sqrt(p.x*p.x+p.y*p.y);\n}\n\nvar point = {\n\tx: 3,\n\tx: 4\n};\nconsole.log(dist(point));\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Annex C. ECMA, 2011.\n* Ecma International, *ECMAScript Language Definition*, 6th Edition, Annex E. ECMA, 2015.\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"0b01845785e3707e1ec58013cb45678f65d6186e","message":{"text":"This property is overwritten by another property in the same object literal."},"location":{"path":"apps/frontend-nextjs/src/utils/emojiToIconConverter.ts","start_line":104,"end_line":104,"start_column":3,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/539/instances","dismissal_approved_by":null},{"number":538,"created_at":"2025-08-17T04:04:02Z","updated_at":"2025-08-17T05:23:15Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/538","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/538","state":"fixed","fixed_at":"2025-08-17T05:23:14Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/overwritten-property","severity":"error","description":"Overwritten property","name":"js/overwritten-property","tags":["correctness","external/cwe/cwe-563","quality","reliability"],"full_description":"If an object literal has two properties with the same name, the second property overwrites the first one, which makes the code hard to understand and error-prone.","help":"# Overwritten property\nIn ECMAScript 2015 and above, as well as ECMAScript 5 non-strict mode, an object literal may define the same property multiple times, with later definitions overwriting earlier ones. In particular, if the last definition assigns a different value from earlier definitions, the earlier value is lost, which is most likely unintentional and should be avoided.\n\n\n## Recommendation\nRename the properties to have different names.\n\n\n## Example\nIn the following example, the object literal assigned to `point` has two definitions of property `x`. The object's use in function `dist` suggests that the second definition should define a property `y` instead, and should be renamed.\n\n\n```javascript\nfunction dist(p) {\n\treturn Math.sqrt(p.x*p.x+p.y*p.y);\n}\n\nvar point = {\n\tx: 3,\n\tx: 4\n};\nconsole.log(dist(point));\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Annex C. ECMA, 2011.\n* Ecma International, *ECMAScript Language Definition*, 6th Edition, Annex E. ECMA, 2015.\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"0b01845785e3707e1ec58013cb45678f65d6186e","message":{"text":"This property is overwritten by another property in the same object literal."},"location":{"path":"apps/frontend-nextjs/src/utils/emojiToIconConverter.ts","start_line":103,"end_line":103,"start_column":3,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/538/instances","dismissal_approved_by":null},{"number":537,"created_at":"2025-08-17T04:04:02Z","updated_at":"2025-08-17T04:04:08Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/537","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/537","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import SystemLogoIcon."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/NavigationHeader.tsx","start_line":10,"end_line":21,"start_column":1,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/537/instances","dismissal_approved_by":null},{"number":536,"created_at":"2025-08-17T04:04:02Z","updated_at":"2025-08-17T04:04:08Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/536","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/536","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import LightbulbIcon."},"location":{"path":"apps/frontend-nextjs/src/app/sobre/page.tsx","start_line":7,"end_line":26,"start_column":1,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/536/instances","dismissal_approved_by":null},{"number":535,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T00:04:55Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/535","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/535","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import NavigationItem."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/OptimizedNavigationStructure.tsx","start_line":13,"end_line":13,"start_column":1,"end_column":73},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/535/instances","dismissal_approved_by":null},{"number":534,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T00:04:55Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/534","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/534","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable swipeHandlers."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/MobileNavigation.tsx","start_line":45,"end_line":45,"start_column":9,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/534/instances","dismissal_approved_by":null},{"number":533,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T16:25:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/533","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/533","state":"fixed","fixed_at":"2025-08-17T16:25:16Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"d860436c289db084fe041bf259e743f8cd357122","message":{"text":"Unused variable touchSupport."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/MobileNavigation.tsx","start_line":35,"end_line":35,"start_column":21,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/533/instances","dismissal_approved_by":null},{"number":532,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T16:25:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/532","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/532","state":"fixed","fixed_at":"2025-08-17T16:25:16Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"d860436c289db084fe041bf259e743f8cd357122","message":{"text":"Unused variable isMobile."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/MobileNavigation.tsx","start_line":35,"end_line":35,"start_column":11,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/532/instances","dismissal_approved_by":null},{"number":531,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T00:04:55Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/531","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/531","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable unbColors."},"location":{"path":"apps/frontend-nextjs/src/components/mobile/MedicalMobileComponents.tsx","start_line":46,"end_line":46,"start_column":9,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/531/instances","dismissal_approved_by":null},{"number":530,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T00:04:55Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/530","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/530","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable orientation."},"location":{"path":"apps/frontend-nextjs/src/components/mobile/MobileFirstFramework.tsx","start_line":163,"end_line":163,"start_column":45,"end_column":56},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/530/instances","dismissal_approved_by":null},{"number":529,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T00:04:55Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/529","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/529","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable isTablet."},"location":{"path":"apps/frontend-nextjs/src/components/mobile/MobileFirstFramework.tsx","start_line":163,"end_line":163,"start_column":21,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/529/instances","dismissal_approved_by":null},{"number":528,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T00:04:55Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/528","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/528","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable isMobile."},"location":{"path":"apps/frontend-nextjs/src/components/mobile/MobileFirstFramework.tsx","start_line":163,"end_line":163,"start_column":11,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/528/instances","dismissal_approved_by":null},{"number":527,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T00:04:55Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/527","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/527","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable unbColors."},"location":{"path":"apps/frontend-nextjs/src/components/content/ContentChunkingStrategy.tsx","start_line":126,"end_line":126,"start_column":9,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/527/instances","dismissal_approved_by":null},{"number":526,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T00:04:55Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/526","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/526","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable getImpactColor."},"location":{"path":"apps/frontend-nextjs/src/components/accessibility/ScreenReaderTester.tsx","start_line":475,"end_line":475,"start_column":9,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/526/instances","dismissal_approved_by":null},{"number":525,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T00:04:55Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/525","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/525","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports useEffect, useRef."},"location":{"path":"apps/frontend-nextjs/src/components/accessibility/ScreenReaderTester.tsx","start_line":14,"end_line":14,"start_column":1,"end_column":73},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/525/instances","dismissal_approved_by":null},{"number":524,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T00:04:55Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/524","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/524","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable getContrastColor."},"location":{"path":"apps/frontend-nextjs/src/components/accessibility/ColorContrastValidator.tsx","start_line":389,"end_line":389,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/524/instances","dismissal_approved_by":null},{"number":523,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T00:04:55Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/523","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/523","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports useEffect, useRef."},"location":{"path":"apps/frontend-nextjs/src/components/accessibility/KeyboardNavigationValidator.tsx","start_line":14,"end_line":14,"start_column":1,"end_column":73},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/523/instances","dismissal_approved_by":null},{"number":522,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T00:04:55Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/522","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/522","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable tabindex."},"location":{"path":"apps/frontend-nextjs/src/components/accessibility/AccessibilityValidator.tsx","start_line":162,"end_line":162,"start_column":13,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/522/instances","dismissal_approved_by":null},{"number":521,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T00:04:55Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/521","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/521","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports useEffect, useRef."},"location":{"path":"apps/frontend-nextjs/src/components/accessibility/AccessibilityValidator.tsx","start_line":14,"end_line":14,"start_column":1,"end_column":73},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/521/instances","dismissal_approved_by":null},{"number":520,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T00:04:55Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/520","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/520","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable hexToRgb."},"location":{"path":"apps/frontend-nextjs/src/components/accessibility/ColorContrastValidator.tsx","start_line":69,"end_line":69,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/520/instances","dismissal_approved_by":null},{"number":519,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T00:04:55Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/519","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/519","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports useEffect, useRef."},"location":{"path":"apps/frontend-nextjs/src/components/accessibility/ColorContrastValidator.tsx","start_line":14,"end_line":14,"start_column":1,"end_column":73},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/519/instances","dismissal_approved_by":null},{"number":518,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-17T22:29:45Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/518","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/518","state":"fixed","fixed_at":"2025-08-17T22:29:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"6dcac965006ffa50bcc96d18d286fd3f51f2f845","message":{"text":"Unused variable skipOnboarding."},"location":{"path":"apps/frontend-nextjs/src/app/page.tsx","start_line":54,"end_line":54,"start_column":43,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/518/instances","dismissal_approved_by":null},{"number":517,"created_at":"2025-08-17T00:04:41Z","updated_at":"2025-08-19T03:28:27Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/517","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/517","state":"fixed","fixed_at":"2025-08-19T03:28:25Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"7194261ba9b32766d69ae6beb09d3e6f86513217","message":{"text":"Unused imports CardReveal, PageTransition, ScrollAnimation."},"location":{"path":"apps/frontend-nextjs/src/app/page.tsx","start_line":17,"end_line":17,"start_column":1,"end_column":113},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/517/instances","dismissal_approved_by":null},{"number":516,"created_at":"2025-08-16T22:05:48Z","updated_at":"2025-08-16T22:05:49Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/516","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/516","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable router."},"location":{"path":"apps/frontend-nextjs/src/components/onboarding/WelcomeWizard.tsx","start_line":443,"end_line":443,"start_column":9,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/516/instances","dismissal_approved_by":null},{"number":515,"created_at":"2025-08-16T22:05:48Z","updated_at":"2025-08-16T22:05:49Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/515","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/515","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable hoverStyles."},"location":{"path":"apps/frontend-nextjs/src/components/hierarchy/MedicalColorSystem.tsx","start_line":254,"end_line":254,"start_column":9,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/515/instances","dismissal_approved_by":null},{"number":514,"created_at":"2025-08-16T22:05:48Z","updated_at":"2025-08-17T00:04:56Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/514","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/514","state":"fixed","fixed_at":"2025-08-17T00:04:55Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"dd67c5c471ebff8af9dc134460b4abb13349b06b","message":{"text":"Unused variable skipOnboarding."},"location":{"path":"apps/frontend-nextjs/src/app/page.tsx","start_line":24,"end_line":24,"start_column":43,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/514/instances","dismissal_approved_by":null},{"number":513,"created_at":"2025-08-16T21:30:05Z","updated_at":"2025-08-16T21:30:08Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/513","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/513","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable hasSubmittedFeedback."},"location":{"path":"apps/frontend-nextjs/src/components/chat/FeedbackWidget.tsx","start_line":101,"end_line":101,"start_column":10,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/513/instances","dismissal_approved_by":null},{"number":512,"created_at":"2025-08-16T19:56:57Z","updated_at":"2025-08-16T19:57:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/512","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/512","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import AUTH_EVENTS."},"location":{"path":"apps/frontend-nextjs/src/services/auth.ts","start_line":26,"end_line":34,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/512/instances","dismissal_approved_by":null},{"number":511,"created_at":"2025-08-16T19:56:57Z","updated_at":"2025-08-16T19:57:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/511","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/511","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import FEATURES."},"location":{"path":"apps/frontend-nextjs/src/services/auth.ts","start_line":25,"end_line":25,"start_column":1,"end_column":60},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/511/instances","dismissal_approved_by":null},{"number":510,"created_at":"2025-08-16T19:56:57Z","updated_at":"2025-08-16T19:57:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/510","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/510","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable usage."},"location":{"path":"apps/frontend-nextjs/src/hooks/useAuth.ts","start_line":188,"end_line":188,"start_column":11,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/510/instances","dismissal_approved_by":null},{"number":509,"created_at":"2025-08-16T19:56:57Z","updated_at":"2025-08-16T19:57:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/509","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/509","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable benefits."},"location":{"path":"apps/frontend-nextjs/src/components/auth/UserBenefitsCard.tsx","start_line":189,"end_line":189,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/509/instances","dismissal_approved_by":null},{"number":508,"created_at":"2025-08-16T19:56:57Z","updated_at":"2025-08-16T19:57:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/508","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/508","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/trivial-conditional","severity":"warning","description":"Useless conditional","name":"js/trivial-conditional","tags":["correctness","external/cwe/cwe-570","external/cwe/cwe-571","quality","reliability"],"full_description":"If a conditional expression always evaluates to true or always evaluates to false, this suggests incomplete code or a logic error.","help":"# Useless conditional\nIf a condition always evaluates to true or always evaluates to false, this often indicates incomplete code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the condition is useless. If it is no longer needed, remove it.\n\n\n## Example\nThe following example constructs an array `lines`, and then attempts to check whether it has any elements by means of an if conditional `if (!lines)`.\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\nNote that in JavaScript (unlike some other languages) arrays and objects are always considered to be true when evaluated in a Boolean context. The code should instead check `lines.length`:\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines.length)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\n\n## References\n* Mozilla Developer Network: [Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n* Common Weakness Enumeration: [CWE-570](https://cwe.mitre.org/data/definitions/570.html).\n* Common Weakness Enumeration: [CWE-571](https://cwe.mitre.org/data/definitions/571.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This use of variable 'isSupported' always evaluates to true."},"location":{"path":"apps/frontend-nextjs/src/components/pwa/PWAManager.tsx","start_line":171,"end_line":171,"start_column":17,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/508/instances","dismissal_approved_by":null},{"number":507,"created_at":"2025-08-16T04:14:45Z","updated_at":"2025-08-16T19:57:02Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/507","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/507","state":"fixed","fixed_at":"2025-08-16T19:57:01Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/assignment-to-constant","severity":"error","description":"Assignment to constant","name":"js/assignment-to-constant","tags":["correctness","quality","reliability"],"full_description":"Assigning to a variable that is declared 'const' has either no effect or leads to a runtime error, depending on the platform.","help":"# Assignment to constant\nMost popular JavaScript platforms support `const` declarations, although this feature is not part of the ECMAScript 5 standard. Assigning a new value to a variable that is declared `const` does not result in an error on current platforms, and simply has no effect. Relying on this behavior is error-prone, particularly since ECMAScript 2015 prohibits such assignments.\n\n\n## Recommendation\nIf the variable genuinely needs to be reassigned, change its declaration from `const` to `var`, or merge the assignment into the variable declaration, if possible. Otherwise, remove the spurious assignment.\n\n\n## Example\nIn the following example, `loc` is initialized to `null`, and then set to either `\"here\"` or `\"there\"`, depending on the value of variable `dist`. Most current platforms, however, will ignore the assignments entirely, so `loc` will retain its original value `null`.\n\n\n```javascript\nconst loc = null;\nif (dist < 10)\n    loc = \"here\";\nelse\n    loc = \"there\";\n```\nInstead, the assignments to `loc` can be merged into its declaration like this:\n\n\n```javascript\nconst loc = dist < 10 ? \"here\" : \"there\";\n```\n\n## References\n* Mozilla Developer Network: [const](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"00a055026bc8dca8d564a8bd23b5a2164520bf3a","message":{"text":"Assignment to variable clearMessages, which is declared constant."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":291,"end_line":291,"start_column":9,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/507/instances","dismissal_approved_by":null},{"number":506,"created_at":"2025-08-16T04:14:45Z","updated_at":"2025-08-16T19:57:02Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/506","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/506","state":"fixed","fixed_at":"2025-08-16T19:57:01Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/assignment-to-constant","severity":"error","description":"Assignment to constant","name":"js/assignment-to-constant","tags":["correctness","quality","reliability"],"full_description":"Assigning to a variable that is declared 'const' has either no effect or leads to a runtime error, depending on the platform.","help":"# Assignment to constant\nMost popular JavaScript platforms support `const` declarations, although this feature is not part of the ECMAScript 5 standard. Assigning a new value to a variable that is declared `const` does not result in an error on current platforms, and simply has no effect. Relying on this behavior is error-prone, particularly since ECMAScript 2015 prohibits such assignments.\n\n\n## Recommendation\nIf the variable genuinely needs to be reassigned, change its declaration from `const` to `var`, or merge the assignment into the variable declaration, if possible. Otherwise, remove the spurious assignment.\n\n\n## Example\nIn the following example, `loc` is initialized to `null`, and then set to either `\"here\"` or `\"there\"`, depending on the value of variable `dist`. Most current platforms, however, will ignore the assignments entirely, so `loc` will retain its original value `null`.\n\n\n```javascript\nconst loc = null;\nif (dist < 10)\n    loc = \"here\";\nelse\n    loc = \"there\";\n```\nInstead, the assignments to `loc` can be merged into its declaration like this:\n\n\n```javascript\nconst loc = dist < 10 ? \"here\" : \"there\";\n```\n\n## References\n* Mozilla Developer Network: [const](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"00a055026bc8dca8d564a8bd23b5a2164520bf3a","message":{"text":"Assignment to variable clearMessages, which is declared constant."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":36,"end_line":36,"start_column":9,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/506/instances","dismissal_approved_by":null},{"number":505,"created_at":"2025-08-16T04:14:45Z","updated_at":"2025-08-16T19:57:02Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/505","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/505","state":"fixed","fixed_at":"2025-08-16T19:57:01Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"00a055026bc8dca8d564a8bd23b5a2164520bf3a","message":{"text":"The initial value of clearMessages is unused, since it is always overwritten."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":36,"end_line":49,"start_column":9,"end_column":5},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/505/instances","dismissal_approved_by":null},{"number":504,"created_at":"2025-08-16T04:14:45Z","updated_at":"2025-08-16T04:14:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/504","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/504","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable resetRetry."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":116,"end_line":116,"start_column":5,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/504/instances","dismissal_approved_by":null},{"number":503,"created_at":"2025-08-16T04:14:45Z","updated_at":"2025-08-16T04:14:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/503","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/503","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable incrementRetry."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":115,"end_line":115,"start_column":5,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/503/instances","dismissal_approved_by":null},{"number":502,"created_at":"2025-08-16T04:14:45Z","updated_at":"2025-08-16T04:14:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/502","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/502","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable setOnlineStatus."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":114,"end_line":114,"start_column":5,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/502/instances","dismissal_approved_by":null},{"number":501,"created_at":"2025-08-16T04:14:45Z","updated_at":"2025-08-16T04:14:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/501","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/501","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable shouldShowError."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":110,"end_line":110,"start_column":5,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/501/instances","dismissal_approved_by":null},{"number":500,"created_at":"2025-08-16T04:14:45Z","updated_at":"2025-08-16T04:14:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/500","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/500","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable canRetry."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":109,"end_line":109,"start_column":5,"end_column":13},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/500/instances","dismissal_approved_by":null},{"number":499,"created_at":"2025-08-16T04:14:45Z","updated_at":"2025-08-16T04:14:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/499","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/499","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable retryCount."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":108,"end_line":108,"start_column":5,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/499/instances","dismissal_approved_by":null},{"number":498,"created_at":"2025-08-16T04:14:45Z","updated_at":"2025-08-16T04:14:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/498","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/498","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable isOnline."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":107,"end_line":107,"start_column":5,"end_column":13},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/498/instances","dismissal_approved_by":null},{"number":497,"created_at":"2025-08-16T04:14:45Z","updated_at":"2025-08-16T04:14:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/497","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/497","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable messageStats."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":96,"end_line":96,"start_column":12,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/497/instances","dismissal_approved_by":null},{"number":496,"created_at":"2025-08-16T04:14:45Z","updated_at":"2025-08-16T04:14:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/496","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/496","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable updateMessage."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":95,"end_line":95,"start_column":5,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/496/instances","dismissal_approved_by":null},{"number":495,"created_at":"2025-08-16T04:14:45Z","updated_at":"2025-08-16T04:14:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/495","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/495","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable removeMessage."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":94,"end_line":94,"start_column":5,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/495/instances","dismissal_approved_by":null},{"number":494,"created_at":"2025-08-16T04:14:45Z","updated_at":"2025-08-16T04:14:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/494","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/494","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable addMessages."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":92,"end_line":92,"start_column":5,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/494/instances","dismissal_approved_by":null},{"number":493,"created_at":"2025-08-16T04:14:45Z","updated_at":"2025-08-16T04:14:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/493","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/493","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable MessagesArea."},"location":{"path":"apps/frontend-nextjs/src/components/chat/modern/ModernChatContainer.tsx","start_line":104,"end_line":104,"start_column":9,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/493/instances","dismissal_approved_by":null},{"number":492,"created_at":"2025-08-16T03:09:33Z","updated_at":"2025-08-16T03:09:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/492","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/492","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import React."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":396,"end_line":396,"start_column":1,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/492/instances","dismissal_approved_by":null},{"number":491,"created_at":"2025-08-16T03:09:33Z","updated_at":"2025-08-16T03:09:43Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/491","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/491","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable compress."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":150,"end_line":150,"start_column":5,"end_column":13},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/491/instances","dismissal_approved_by":null},{"number":490,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/490","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/490","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":566,"end_line":566,"start_column":1,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/490/instances","dismissal_approved_by":null},{"number":489,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/489","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/489","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":565,"end_line":565,"start_column":3,"end_column":4},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/489/instances","dismissal_approved_by":null},{"number":488,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/488","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/488","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Unterminated regular expression literal."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":564,"end_line":564,"start_column":6,"end_column":7},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/488/instances","dismissal_approved_by":null},{"number":487,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/487","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/487","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Unterminated regular expression literal."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":563,"end_line":563,"start_column":8,"end_column":9},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/487/instances","dismissal_approved_by":null},{"number":486,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/486","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/486","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Unterminated regular expression literal."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":562,"end_line":562,"start_column":10,"end_column":11},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/486/instances","dismissal_approved_by":null},{"number":485,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/485","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/485","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ',' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":559,"end_line":559,"start_column":24,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/485/instances","dismissal_approved_by":null},{"number":484,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/484","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/484","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":558,"end_line":558,"start_column":9,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/484/instances","dismissal_approved_by":null},{"number":483,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/483","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/483","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ';' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":556,"end_line":556,"start_column":18,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/483/instances","dismissal_approved_by":null},{"number":482,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/482","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/482","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ';' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":555,"end_line":555,"start_column":17,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/482/instances","dismissal_approved_by":null},{"number":481,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/481","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/481","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ';' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":554,"end_line":554,"start_column":16,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/481/instances","dismissal_approved_by":null},{"number":480,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/480","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/480","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ';' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":553,"end_line":553,"start_column":21,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/480/instances","dismissal_approved_by":null},{"number":479,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/479","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/479","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ';' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":551,"end_line":551,"start_column":16,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/479/instances","dismissal_approved_by":null},{"number":478,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/478","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/478","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: '>' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":551,"end_line":551,"start_column":11,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/478/instances","dismissal_approved_by":null},{"number":477,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/477","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/477","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":549,"end_line":549,"start_column":65,"end_column":66},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/477/instances","dismissal_approved_by":null},{"number":476,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/476","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/476","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ';' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":549,"end_line":549,"start_column":50,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/476/instances","dismissal_approved_by":null},{"number":475,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/475","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/475","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ';' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":549,"end_line":549,"start_column":17,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/475/instances","dismissal_approved_by":null},{"number":474,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/474","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/474","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: '>' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":549,"end_line":549,"start_column":12,"end_column":13},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/474/instances","dismissal_approved_by":null},{"number":473,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/473","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/473","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":548,"end_line":548,"start_column":5,"end_column":6},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/473/instances","dismissal_approved_by":null},{"number":472,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/472","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/472","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":547,"end_line":547,"start_column":73,"end_column":74},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/472/instances","dismissal_approved_by":null},{"number":471,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/471","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/471","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ';' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":547,"end_line":547,"start_column":21,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/471/instances","dismissal_approved_by":null},{"number":470,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/470","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/470","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Property assignment expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":547,"end_line":547,"start_column":17,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/470/instances","dismissal_approved_by":null},{"number":469,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/469","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/469","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ';' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":545,"end_line":545,"start_column":17,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/469/instances","dismissal_approved_by":null},{"number":468,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/468","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/468","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Property assignment expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":543,"end_line":543,"start_column":14,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/468/instances","dismissal_approved_by":null},{"number":467,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/467","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/467","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ')' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":543,"end_line":543,"start_column":12,"end_column":13},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/467/instances","dismissal_approved_by":null},{"number":466,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/466","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/466","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: '>' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":543,"end_line":543,"start_column":7,"end_column":8},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/466/instances","dismissal_approved_by":null},{"number":465,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/465","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/465","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":509,"end_line":509,"start_column":1,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/465/instances","dismissal_approved_by":null},{"number":464,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/464","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/464","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":508,"end_line":508,"start_column":3,"end_column":4},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/464/instances","dismissal_approved_by":null},{"number":463,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/463","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/463","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Unterminated regular expression literal."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":507,"end_line":507,"start_column":5,"end_column":6},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/463/instances","dismissal_approved_by":null},{"number":462,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/462","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/462","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":505,"end_line":505,"start_column":9,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/462/instances","dismissal_approved_by":null},{"number":461,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/461","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/461","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Property assignment expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":503,"end_line":503,"start_column":14,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/461/instances","dismissal_approved_by":null},{"number":460,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/460","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/460","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":502,"end_line":502,"start_column":8,"end_column":9},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/460/instances","dismissal_approved_by":null},{"number":459,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/459","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/459","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ')' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":500,"end_line":500,"start_column":10,"end_column":11},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/459/instances","dismissal_approved_by":null},{"number":458,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/458","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/458","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: '>' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":500,"end_line":500,"start_column":7,"end_column":8},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/458/instances","dismissal_approved_by":null},{"number":457,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/457","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/457","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":467,"end_line":467,"start_column":1,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/457/instances","dismissal_approved_by":null},{"number":456,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/456","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/456","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":466,"end_line":466,"start_column":55,"end_column":56},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/456/instances","dismissal_approved_by":null},{"number":455,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/455","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/455","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Type expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":466,"end_line":466,"start_column":23,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/455/instances","dismissal_approved_by":null},{"number":454,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/454","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/454","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":463,"end_line":463,"start_column":5,"end_column":6},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/454/instances","dismissal_approved_by":null},{"number":453,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/453","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/453","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Unterminated regular expression literal."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":462,"end_line":462,"start_column":8,"end_column":9},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/453/instances","dismissal_approved_by":null},{"number":452,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/452","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/452","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":460,"end_line":460,"start_column":61,"end_column":62},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/452/instances","dismissal_approved_by":null},{"number":451,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/451","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/451","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Property assignment expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":460,"end_line":460,"start_column":19,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/451/instances","dismissal_approved_by":null},{"number":450,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/450","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/450","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ')' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":460,"end_line":460,"start_column":17,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/450/instances","dismissal_approved_by":null},{"number":449,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/449","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/449","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: '>' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":460,"end_line":460,"start_column":12,"end_column":13},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/449/instances","dismissal_approved_by":null},{"number":448,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/448","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/448","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":434,"end_line":434,"start_column":5,"end_column":6},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/448/instances","dismissal_approved_by":null},{"number":447,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/447","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/447","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Type expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":433,"end_line":433,"start_column":8,"end_column":9},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/447/instances","dismissal_approved_by":null},{"number":446,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/446","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/446","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":432,"end_line":432,"start_column":64,"end_column":65},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/446/instances","dismissal_approved_by":null},{"number":445,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/445","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/445","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ';' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":432,"end_line":432,"start_column":31,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/445/instances","dismissal_approved_by":null},{"number":444,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/444","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/444","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: '>' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":432,"end_line":432,"start_column":20,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/444/instances","dismissal_approved_by":null},{"number":443,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/443","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/443","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ')' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":431,"end_line":431,"start_column":15,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/443/instances","dismissal_approved_by":null},{"number":442,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/442","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/442","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: '>' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":431,"end_line":431,"start_column":12,"end_column":13},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/442/instances","dismissal_approved_by":null},{"number":441,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/441","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/441","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":406,"end_line":406,"start_column":1,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/441/instances","dismissal_approved_by":null},{"number":440,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/440","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/440","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":404,"end_line":404,"start_column":36,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/440/instances","dismissal_approved_by":null},{"number":439,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/439","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/439","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":404,"end_line":404,"start_column":35,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/439/instances","dismissal_approved_by":null},{"number":438,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/438","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/438","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: '>' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":404,"end_line":404,"start_column":23,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/438/instances","dismissal_approved_by":null},{"number":437,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/437","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/437","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":397,"end_line":397,"start_column":7,"end_column":8},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/437/instances","dismissal_approved_by":null},{"number":436,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/436","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/436","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Unterminated regular expression literal."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":396,"end_line":396,"start_column":38,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/436/instances","dismissal_approved_by":null},{"number":435,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/435","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/435","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ')' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":396,"end_line":396,"start_column":20,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/435/instances","dismissal_approved_by":null},{"number":434,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/434","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/434","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":395,"end_line":395,"start_column":9,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/434/instances","dismissal_approved_by":null},{"number":433,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/433","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/433","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Declaration or statement expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":395,"end_line":395,"start_column":7,"end_column":8},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/433/instances","dismissal_approved_by":null},{"number":432,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/432","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/432","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Unterminated regular expression literal."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":394,"end_line":394,"start_column":78,"end_column":79},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/432/instances","dismissal_approved_by":null},{"number":431,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/431","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/431","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ';' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":394,"end_line":394,"start_column":49,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/431/instances","dismissal_approved_by":null},{"number":430,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/430","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/430","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Property assignment expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":394,"end_line":394,"start_column":46,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/430/instances","dismissal_approved_by":null},{"number":429,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/429","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/429","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ':' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":394,"end_line":394,"start_column":39,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/429/instances","dismissal_approved_by":null},{"number":428,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/428","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/428","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: ')' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":394,"end_line":394,"start_column":30,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/428/instances","dismissal_approved_by":null},{"number":427,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/427","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/427","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: '>' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":394,"end_line":394,"start_column":25,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/427/instances","dismissal_approved_by":null},{"number":426,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/426","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/426","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: Expression expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":389,"end_line":389,"start_column":77,"end_column":78},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/426/instances","dismissal_approved_by":null},{"number":425,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:09:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/425","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/425","state":"fixed","fixed_at":"2025-08-16T03:09:43Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"eb6b48cae2e02cc06233213c9de1169f7313070e","message":{"text":"Error: '>' expected."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/react-optimizations.ts","start_line":389,"end_line":389,"start_column":51,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/425/instances","dismissal_approved_by":null},{"number":424,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:03:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/424","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/424","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"The initial value of orderField is unused, since it is always overwritten."},"location":{"path":"apps/frontend-nextjs/src/services/firebaseLeaderboard.ts","start_line":155,"end_line":155,"start_column":11,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/424/instances","dismissal_approved_by":null},{"number":423,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:03:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/423","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/423","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused function isFirestoreAvailable."},"location":{"path":"apps/frontend-nextjs/src/services/firebaseLeaderboard.ts","start_line":40,"end_line":40,"start_column":10,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/423/instances","dismissal_approved_by":null},{"number":422,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:03:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/422","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/422","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import increment."},"location":{"path":"apps/frontend-nextjs/src/services/firebaseLeaderboard.ts","start_line":9,"end_line":24,"start_column":1,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/422/instances","dismissal_approved_by":null},{"number":421,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:03:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/421","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/421","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable now."},"location":{"path":"apps/frontend-nextjs/src/lib/optimizations/index.ts","start_line":178,"end_line":178,"start_column":11,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/421/instances","dismissal_approved_by":null},{"number":420,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:03:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/420","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/420","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused class WriteDebouncer."},"location":{"path":"apps/frontend-nextjs/src/lib/firebase/firestore.ts","start_line":714,"end_line":714,"start_column":7,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/420/instances","dismissal_approved_by":null},{"number":419,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:03:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/419","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/419","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable newAchievements."},"location":{"path":"apps/frontend-nextjs/src/hooks/useGamification.ts","start_line":643,"end_line":643,"start_column":47,"end_column":62},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/419/instances","dismissal_approved_by":null},{"number":418,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:03:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/418","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/418","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable newAchievements."},"location":{"path":"apps/frontend-nextjs/src/hooks/useGamification.ts","start_line":599,"end_line":599,"start_column":47,"end_column":62},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/418/instances","dismissal_approved_by":null},{"number":417,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:03:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/417","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/417","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable completedModules."},"location":{"path":"apps/frontend-nextjs/src/hooks/useGamification.ts","start_line":598,"end_line":598,"start_column":13,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/417/instances","dismissal_approved_by":null},{"number":416,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:03:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/416","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/416","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable lastSync."},"location":{"path":"apps/frontend-nextjs/src/hooks/useGamification.ts","start_line":74,"end_line":74,"start_column":10,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/416/instances","dismissal_approved_by":null},{"number":415,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:03:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/415","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/415","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable CACHE_DURATION."},"location":{"path":"apps/frontend-nextjs/src/hooks/useGamification.ts","start_line":56,"end_line":56,"start_column":7,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/415/instances","dismissal_approved_by":null},{"number":414,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:03:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/414","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/414","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import UserLevel."},"location":{"path":"apps/frontend-nextjs/src/components/gamification/ProgressDashboard.tsx","start_line":16,"end_line":16,"start_column":1,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/414/instances","dismissal_approved_by":null},{"number":413,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:03:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/413","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/413","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable baseColor."},"location":{"path":"apps/frontend-nextjs/src/components/gamification/BadgeCard.tsx","start_line":48,"end_line":48,"start_column":11,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/413/instances","dismissal_approved_by":null},{"number":412,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:03:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/412","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/412","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import hanseniaseQuizzes."},"location":{"path":"apps/frontend-nextjs/src/app/gamification-demo/page.tsx","start_line":23,"end_line":23,"start_column":1,"end_column":89},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/412/instances","dismissal_approved_by":null},{"number":411,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:03:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/411","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/411","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ProgressRing."},"location":{"path":"apps/frontend-nextjs/src/app/gamification-demo/page.tsx","start_line":15,"end_line":15,"start_column":1,"end_column":67},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/411/instances","dismissal_approved_by":null},{"number":410,"created_at":"2025-08-16T03:03:49Z","updated_at":"2025-08-16T03:03:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/410","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/410","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import BadgeCollection."},"location":{"path":"apps/frontend-nextjs/src/app/gamification-demo/page.tsx","start_line":14,"end_line":14,"start_column":1,"end_column":82},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/410/instances","dismissal_approved_by":null},{"number":409,"created_at":"2025-08-16T00:50:46Z","updated_at":"2025-08-16T00:50:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/409","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/409","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable router."},"location":{"path":"apps/frontend-nextjs/src/hooks/useProgressiveDisclosure.ts","start_line":33,"end_line":33,"start_column":9,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/409/instances","dismissal_approved_by":null},{"number":408,"created_at":"2025-08-16T00:50:46Z","updated_at":"2025-08-16T00:50:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/408","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/408","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable accordionStyles."},"location":{"path":"apps/frontend-nextjs/src/components/disclosure/MedicalAccordion.tsx","start_line":375,"end_line":375,"start_column":7,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/408/instances","dismissal_approved_by":null},{"number":407,"created_at":"2025-08-16T00:50:46Z","updated_at":"2025-08-16T00:50:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/407","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/407","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable currentLevel."},"location":{"path":"apps/frontend-nextjs/src/components/disclosure/MedicalAccordion.tsx","start_line":35,"end_line":35,"start_column":5,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/407/instances","dismissal_approved_by":null},{"number":406,"created_at":"2025-08-16T00:50:46Z","updated_at":"2025-08-16T00:50:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/406","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/406","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable isExpanded."},"location":{"path":"apps/frontend-nextjs/src/components/disclosure/DosageCard.tsx","start_line":50,"end_line":50,"start_column":9,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/406/instances","dismissal_approved_by":null},{"number":405,"created_at":"2025-08-16T00:50:46Z","updated_at":"2025-08-16T00:50:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/405","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/405","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable toggleSection."},"location":{"path":"apps/frontend-nextjs/src/components/disclosure/DosageCard.tsx","start_line":44,"end_line":44,"start_column":5,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/405/instances","dismissal_approved_by":null},{"number":404,"created_at":"2025-08-16T00:50:46Z","updated_at":"2025-08-16T00:50:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/404","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/404","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable thumbReachZone."},"location":{"path":"apps/frontend-nextjs/src/components/analytics/MobileUXAuditor.tsx","start_line":193,"end_line":193,"start_column":11,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/404/instances","dismissal_approved_by":null},{"number":403,"created_at":"2025-08-16T00:50:46Z","updated_at":"2025-08-16T00:50:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/403","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/403","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import MedicalTermPopup."},"location":{"path":"apps/frontend-nextjs/src/app/progressive-disclosure-demo/page.tsx","start_line":14,"end_line":14,"start_column":1,"end_column":95},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/403/instances","dismissal_approved_by":null},{"number":402,"created_at":"2025-08-16T00:50:46Z","updated_at":"2025-08-16T00:50:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/402","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/402","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ProgressiveCard."},"location":{"path":"apps/frontend-nextjs/src/app/progressive-disclosure-demo/page.tsx","start_line":13,"end_line":13,"start_column":1,"end_column":96},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/402/instances","dismissal_approved_by":null},{"number":401,"created_at":"2025-08-16T00:06:58Z","updated_at":"2025-08-16T00:07:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/401","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/401","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'g' is not used."},"location":{"path":"apps/backend/blueprints/analytics_blueprint.py","start_line":8,"end_line":8,"start_column":1,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/401/instances","dismissal_approved_by":null},{"number":400,"created_at":"2025-08-16T00:06:58Z","updated_at":"2025-08-16T00:07:44Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/400","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/400","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/analytics_blueprint.py","start_line":85,"end_line":85,"start_column":21,"end_column":110},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/400/instances","dismissal_approved_by":null},{"number":399,"created_at":"2025-08-16T00:06:50Z","updated_at":"2025-08-16T00:06:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/399","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/399","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable timeOnPage."},"location":{"path":"apps/frontend-nextjs/src/lib/analytics/googleAnalyticsUX.ts","start_line":328,"end_line":328,"start_column":9,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/399/instances","dismissal_approved_by":null},{"number":398,"created_at":"2025-08-16T00:06:50Z","updated_at":"2025-08-16T00:06:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/398","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/398","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable rapidBackNavigation."},"location":{"path":"apps/frontend-nextjs/src/lib/analytics/googleAnalyticsUX.ts","start_line":302,"end_line":302,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/398/instances","dismissal_approved_by":null},{"number":397,"created_at":"2025-08-16T00:06:50Z","updated_at":"2025-08-16T00:06:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/397","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/397","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable trackCognitiveLoad."},"location":{"path":"apps/frontend-nextjs/src/components/analytics/CognitiveLoadAuditor.tsx","start_line":403,"end_line":403,"start_column":11,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/397/instances","dismissal_approved_by":null},{"number":396,"created_at":"2025-08-16T00:06:50Z","updated_at":"2025-08-28T02:28:45Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/396","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/396","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"apps/frontend-nextjs/src/lib/analytics/uxTracking.ts","start_line":51,"end_line":51,"start_column":22,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/396/instances","dismissal_approved_by":null},{"number":395,"created_at":"2025-08-15T23:24:23Z","updated_at":"2025-08-16T03:03:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/395","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/395","state":"fixed","fixed_at":"2025-08-16T03:03:52Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-substring-sanitization","severity":"warning","description":"Incomplete URL substring sanitization","name":"js/incomplete-url-substring-sanitization","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.","help":"# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"3fc0d031c8786f40568e5c6a33e935b70a0376ee","message":{"text":"'roteirosdedispensacao.com' can be anywhere in the URL, and arbitrary hosts may come before or after it."},"location":{"path":"apps/frontend-nextjs/src/services/api.ts","start_line":23,"end_line":23,"start_column":9,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/395/instances","dismissal_approved_by":null},{"number":394,"created_at":"2025-08-15T23:24:23Z","updated_at":"2025-08-16T03:03:54Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/394","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/394","state":"fixed","fixed_at":"2025-08-16T03:03:52Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-substring-sanitization","severity":"warning","description":"Incomplete URL substring sanitization","name":"js/incomplete-url-substring-sanitization","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.","help":"# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"3fc0d031c8786f40568e5c6a33e935b70a0376ee","message":{"text":"'firebaseapp.com' can be anywhere in the URL, and arbitrary hosts may come before or after it."},"location":{"path":"apps/frontend-nextjs/src/services/api.ts","start_line":18,"end_line":18,"start_column":41,"end_column":77},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/394/instances","dismissal_approved_by":null},{"number":393,"created_at":"2025-08-15T23:17:32Z","updated_at":"2025-08-19T23:47:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/393","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/393","state":"fixed","fixed_at":"2025-08-19T23:47:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"b53575cec9e4a80eb4cb77826d3cf7881b6a2730","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/core/auth/jwt_validator.py","start_line":49,"end_line":49,"start_column":17,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/393/instances","dismissal_approved_by":null},{"number":392,"created_at":"2025-08-15T23:17:32Z","updated_at":"2025-08-19T23:47:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/392","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/392","state":"fixed","fixed_at":"2025-08-19T23:47:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"b53575cec9e4a80eb4cb77826d3cf7881b6a2730","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/core/auth/jwt_validator.py","start_line":49,"end_line":49,"start_column":17,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/392/instances","dismissal_approved_by":null},{"number":391,"created_at":"2025-08-15T23:17:32Z","updated_at":"2025-08-15T23:17:45Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/391","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/391","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/mixed-returns","severity":"note","description":"Explicit returns mixed with implicit (fall through) returns","name":"py/mixed-returns","tags":["correctness","quality","reliability"],"full_description":"Mixing implicit and explicit returns indicates a likely error as implicit returns always return `None`.","help":"# Explicit returns mixed with implicit (fall through) returns\nWhen a function contains both explicit returns (`return value`) and implicit returns (where code falls off the end of a function), this often indicates that a return statement has been forgotten. It is best to return an explicit return value even when returning `None` because this makes it easier for other developers to read your code.\n\n\n## Recommendation\nAdd an explicit return at the end of the function.\n\n\n## Example\nIn the `check_state1` function, the developer probably did intend to use an implicit return value of `None` as this equates to `False`. However, the function in `check_state2` is easier to read.\n\n\n```python\n    def check_state1(state, interactive=True):\n        if not state['good'] or not state['bad']:\n            if (good or bad or skip or reset) and interactive:\n                return                                          # implicitly return None\n            if not state['good']:\n                raise util.Abort(_('cannot bisect (no known good revisions)'))\n            else:\n                raise util.Abort(_('cannot bisect (no known bad revisions)')) \n        return True  \t\t\t\t\t\t\t                              \n           \n    def check_state2(state, interactive=True):\n        if not state['good'] or not state['bad']:\n            if (good or bad or skip or reset) and interactive:\n                return False                                    # return an explicit value\n            if not state['good']:\n                raise util.Abort(_('cannot bisect (no known good revisions)'))\n            else:\n                raise util.Abort(_('cannot bisect (no known bad revisions)'))\n        return True\n\n```\n\n## References\n* Python Language Reference: [Function definitions](http://docs.python.org/3/reference/compound_stmts.html#function).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Mixing implicit and explicit returns may indicate an error, as implicit returns always return None."},"location":{"path":"apps/backend/blueprints/user_blueprint.py","start_line":163,"end_line":163,"start_column":1,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/391/instances","dismissal_approved_by":null},{"number":390,"created_at":"2025-08-15T23:17:32Z","updated_at":"2025-08-15T23:17:45Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/390","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/390","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/user_blueprint.py","start_line":382,"end_line":382,"start_column":21,"end_column":56},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/390/instances","dismissal_approved_by":null},{"number":389,"created_at":"2025-08-15T23:17:32Z","updated_at":"2025-08-15T23:17:45Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/389","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/389","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/user_blueprint.py","start_line":207,"end_line":207,"start_column":25,"end_column":97},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/389/instances","dismissal_approved_by":null},{"number":388,"created_at":"2025-08-15T23:17:32Z","updated_at":"2025-08-15T23:17:45Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/388","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/388","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/user_blueprint.py","start_line":154,"end_line":154,"start_column":22,"end_column":71},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/388/instances","dismissal_approved_by":null},{"number":387,"created_at":"2025-08-15T23:17:32Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/387","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/387","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user.\nStack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/core/auth/jwt_validator.py","start_line":221,"end_line":225,"start_column":36,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/387/instances","dismissal_approved_by":null},{"number":386,"created_at":"2025-08-15T23:17:08Z","updated_at":"2025-08-15T23:17:11Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/386","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/386","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import SyncStatus."},"location":{"path":"apps/frontend-nextjs/src/lib/firebase/sync/smartSyncManager.ts","start_line":17,"end_line":21,"start_column":1,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/386/instances","dismissal_approved_by":null},{"number":385,"created_at":"2025-08-15T23:17:08Z","updated_at":"2025-08-15T23:17:11Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/385","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/385","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import RealtimeSubscriptions."},"location":{"path":"apps/frontend-nextjs/src/lib/firebase/sync/smartSyncManager.ts","start_line":12,"end_line":16,"start_column":1,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/385/instances","dismissal_approved_by":null},{"number":384,"created_at":"2025-08-15T23:17:08Z","updated_at":"2025-08-15T23:17:11Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/384","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/384","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ConflictResolutionResult."},"location":{"path":"apps/frontend-nextjs/src/lib/firebase/sync/smartSyncManager.ts","start_line":7,"end_line":11,"start_column":1,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/384/instances","dismissal_approved_by":null},{"number":383,"created_at":"2025-08-15T23:17:08Z","updated_at":"2025-08-15T23:17:11Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/383","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/383","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import Timestamp."},"location":{"path":"apps/frontend-nextjs/src/lib/firebase/sync/conflictResolution.ts","start_line":7,"end_line":7,"start_column":1,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/383/instances","dismissal_approved_by":null},{"number":382,"created_at":"2025-08-15T23:17:08Z","updated_at":"2025-08-15T23:17:11Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/382","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/382","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports DataMigration, LearningProgress, QueryFilters, SessionData, SyncStatus."},"location":{"path":"apps/frontend-nextjs/src/lib/firebase/firestore.ts","start_line":31,"end_line":44,"start_column":1,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/382/instances","dismissal_approved_by":null},{"number":381,"created_at":"2025-08-15T23:17:08Z","updated_at":"2025-08-15T23:17:11Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/381","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/381","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports DocumentReference, DocumentSnapshot, QuerySnapshot, disableNetwork, enableNetwork, startAfter."},"location":{"path":"apps/frontend-nextjs/src/lib/firebase/firestore.ts","start_line":7,"end_line":28,"start_column":1,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/381/instances","dismissal_approved_by":null},{"number":380,"created_at":"2025-08-15T23:17:08Z","updated_at":"2025-08-15T23:17:11Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/380","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/380","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ConflictResolutionManager."},"location":{"path":"apps/frontend-nextjs/src/hooks/useSmartSync.ts","start_line":10,"end_line":10,"start_column":1,"end_column":84},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/380/instances","dismissal_approved_by":null},{"number":379,"created_at":"2025-08-15T23:17:08Z","updated_at":"2025-08-15T23:17:11Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/379","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/379","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports DataMigration, SyncStatus."},"location":{"path":"apps/frontend-nextjs/src/hooks/useFirebaseSync.ts","start_line":19,"end_line":24,"start_column":1,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/379/instances","dismissal_approved_by":null},{"number":378,"created_at":"2025-08-15T23:17:08Z","updated_at":"2025-08-15T23:17:11Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/378","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/378","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import FeedbackRepository."},"location":{"path":"apps/frontend-nextjs/src/hooks/useFirebaseSync.ts","start_line":13,"end_line":18,"start_column":1,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/378/instances","dismissal_approved_by":null},{"number":377,"created_at":"2025-08-15T23:17:08Z","updated_at":"2025-08-15T23:17:11Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/377","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/377","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import FirestoreMessage."},"location":{"path":"apps/frontend-nextjs/src/hooks/useConversationHistory.ts","start_line":11,"end_line":11,"start_column":1,"end_column":80},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/377/instances","dismissal_approved_by":null},{"number":376,"created_at":"2025-08-15T23:17:08Z","updated_at":"2025-08-16T19:57:02Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/376","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/376","state":"fixed","fixed_at":"2025-08-16T19:57:01Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"00a055026bc8dca8d564a8bd23b5a2164520bf3a","message":{"text":"Unused variable userProfile."},"location":{"path":"apps/frontend-nextjs/src/components/auth/UserProfileWidget.tsx","start_line":26,"end_line":26,"start_column":9,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/376/instances","dismissal_approved_by":null},{"number":375,"created_at":"2025-08-15T23:17:08Z","updated_at":"2025-08-15T23:17:11Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/375","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/375","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/trivial-conditional","severity":"warning","description":"Useless conditional","name":"js/trivial-conditional","tags":["correctness","external/cwe/cwe-570","external/cwe/cwe-571","quality","reliability"],"full_description":"If a conditional expression always evaluates to true or always evaluates to false, this suggests incomplete code or a logic error.","help":"# Useless conditional\nIf a condition always evaluates to true or always evaluates to false, this often indicates incomplete code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the condition is useless. If it is no longer needed, remove it.\n\n\n## Example\nThe following example constructs an array `lines`, and then attempts to check whether it has any elements by means of an if conditional `if (!lines)`.\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\nNote that in JavaScript (unlike some other languages) arrays and objects are always considered to be true when evaluated in a Boolean context. The code should instead check `lines.length`:\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines.length)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\n\n## References\n* Mozilla Developer Network: [Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n* Common Weakness Enumeration: [CWE-570](https://cwe.mitre.org/data/definitions/570.html).\n* Common Weakness Enumeration: [CWE-571](https://cwe.mitre.org/data/definitions/571.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This use of variable 'isOnline' always evaluates to false."},"location":{"path":"apps/frontend-nextjs/src/components/auth/AuthProviderWrapper.tsx","start_line":203,"end_line":203,"start_column":12,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/375/instances","dismissal_approved_by":null},{"number":374,"created_at":"2025-08-15T23:14:35Z","updated_at":"2025-08-16T21:28:38Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/374","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/374","state":"fixed","fixed_at":"2025-08-16T21:28:38Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2025-47279","severity":"note","description":"undici: Undici Memory Leak with Invalid Certificates","name":"LanguageSpecificPackageVulnerability","tags":["LOW","security","vulnerability"],"full_description":"Undici is an HTTP/1.1 client for Node.js. Prior to versions 5.29.0, 6.21.2, and 7.5.0, applications that use undici to implement a webhook-like system are vulnerable. If the attacker set up a server with an invalid certificate, and they can force the application to call the webhook repeatedly, then they can cause a memory leak. This has been patched in versions 5.29.0, 6.21.2, and 7.5.0. As a workaound, avoid calling a webhook repeatedly if the webhook fails.","help":"**Vulnerability CVE-2025-47279**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|LOW|undici|5.29.0, 6.21.2, 7.5.0|[CVE-2025-47279](https://avd.aquasec.com/nvd/cve-2025-47279)|\n\nUndici is an HTTP/1.1 client for Node.js. Prior to versions 5.29.0, 6.21.2, and 7.5.0, applications that use undici to implement a webhook-like system are vulnerable. If the attacker set up a server with an invalid certificate, and they can force the application to call the webhook repeatedly, then they can cause a memory leak. This has been patched in versions 5.29.0, 6.21.2, and 7.5.0. As a workaound, avoid calling a webhook repeatedly if the webhook fails.","help_uri":"https://avd.aquasec.com/nvd/cve-2025-47279","security_severity_level":"low"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"932e3dfbfe881c2befed846a65e6abdb53d8b536","message":{"text":"Package: undici\nInstalled Version: 6.19.7\nVulnerability CVE-2025-47279\nSeverity: LOW\nFixed Version: 5.29.0, 6.21.2, 7.5.0\nLink: [CVE-2025-47279](https://avd.aquasec.com/nvd/cve-2025-47279)"},"location":{"path":"apps/frontend-nextjs/package-lock.json","start_line":12879,"end_line":12887,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/374/instances","dismissal_approved_by":null},{"number":373,"created_at":"2025-08-15T23:14:35Z","updated_at":"2025-08-16T21:28:38Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/373","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/373","state":"fixed","fixed_at":"2025-08-16T21:28:38Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2025-22150","severity":"warning","description":"undici: Undici Uses Insufficiently Random Values","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"Undici is an HTTP/1.1 client. Starting in version 4.5.0 and prior to versions 5.28.5, 6.21.1, and 7.2.3, undici uses `Math.random()` to choose the boundary for a multipart/form-data request. It is known that the output of `Math.random()` can be predicted if several of its generated values are known. If there is a mechanism in an app that sends multipart requests to an attacker-controlled website, they can use this to leak the necessary values. Therefore, an attacker can tamper with the requests going to the backend APIs if certain conditions are met. This is fixed in versions 5.28.5, 6.21.1, and 7.2.3. As a workaround, do not issue multipart requests to attacker controlled servers.","help":"**Vulnerability CVE-2025-22150**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|undici|5.28.5, 6.21.1, 7.2.3|[CVE-2025-22150](https://avd.aquasec.com/nvd/cve-2025-22150)|\n\nUndici is an HTTP/1.1 client. Starting in version 4.5.0 and prior to versions 5.28.5, 6.21.1, and 7.2.3, undici uses `Math.random()` to choose the boundary for a multipart/form-data request. It is known that the output of `Math.random()` can be predicted if several of its generated values are known. If there is a mechanism in an app that sends multipart requests to an attacker-controlled website, they can use this to leak the necessary values. Therefore, an attacker can tamper with the requests going to the backend APIs if certain conditions are met. This is fixed in versions 5.28.5, 6.21.1, and 7.2.3. As a workaround, do not issue multipart requests to attacker controlled servers.","help_uri":"https://avd.aquasec.com/nvd/cve-2025-22150","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"932e3dfbfe881c2befed846a65e6abdb53d8b536","message":{"text":"Package: undici\nInstalled Version: 6.19.7\nVulnerability CVE-2025-22150\nSeverity: MEDIUM\nFixed Version: 5.28.5, 6.21.1, 7.2.3\nLink: [CVE-2025-22150](https://avd.aquasec.com/nvd/cve-2025-22150)"},"location":{"path":"apps/frontend-nextjs/package-lock.json","start_line":12879,"end_line":12887,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/373/instances","dismissal_approved_by":null},{"number":372,"created_at":"2025-08-15T23:14:35Z","updated_at":"2025-08-16T21:28:38Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/372","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/372","state":"fixed","fixed_at":"2025-08-16T21:28:38Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2025-29907","severity":"error","description":"jsPDF Bypass Regular Expression Denial of Service (ReDoS)","name":"LanguageSpecificPackageVulnerability","tags":["HIGH","security","vulnerability"],"full_description":"jsPDF is a library to generate PDFs in JavaScript. Prior to 3.0.1, user control of the first argument of the addImage method results in CPU utilization and denial of service. If given the possibility to pass unsanitised image urls to the addImage method, a user can provide a harmful data-url that results in high CPU utilization and denial of service. Other affected methods are html and addSvgAsImage. The vulnerability was fixed in jsPDF 3.0.1.","help":"**Vulnerability CVE-2025-29907**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|jspdf|3.0.1|[CVE-2025-29907](https://avd.aquasec.com/nvd/cve-2025-29907)|\n\njsPDF is a library to generate PDFs in JavaScript. Prior to 3.0.1, user control of the first argument of the addImage method results in CPU utilization and denial of service. If given the possibility to pass unsanitised image urls to the addImage method, a user can provide a harmful data-url that results in high CPU utilization and denial of service. Other affected methods are html and addSvgAsImage. The vulnerability was fixed in jsPDF 3.0.1.","help_uri":"https://avd.aquasec.com/nvd/cve-2025-29907","security_severity_level":"high"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"932e3dfbfe881c2befed846a65e6abdb53d8b536","message":{"text":"Package: jspdf\nInstalled Version: 2.5.2\nVulnerability CVE-2025-29907\nSeverity: HIGH\nFixed Version: 3.0.1\nLink: [CVE-2025-29907](https://avd.aquasec.com/nvd/cve-2025-29907)"},"location":{"path":"apps/frontend-nextjs/package-lock.json","start_line":8969,"end_line":8986,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/372/instances","dismissal_approved_by":null},{"number":371,"created_at":"2025-08-15T23:14:35Z","updated_at":"2025-08-16T21:28:38Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/371","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/371","state":"fixed","fixed_at":"2025-08-16T21:28:38Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2025-26791","severity":"warning","description":"dompurify: Mutation XSS in DOMPurify Due to Improper Template Literal Handling","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"DOMPurify before 3.2.4 has an incorrect template literal regular expression, sometimes leading to mutation cross-site scripting (mXSS).","help":"**Vulnerability CVE-2025-26791**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|dompurify|3.2.4|[CVE-2025-26791](https://avd.aquasec.com/nvd/cve-2025-26791)|\n\nDOMPurify before 3.2.4 has an incorrect template literal regular expression, sometimes leading to mutation cross-site scripting (mXSS).","help_uri":"https://avd.aquasec.com/nvd/cve-2025-26791","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"932e3dfbfe881c2befed846a65e6abdb53d8b536","message":{"text":"Package: dompurify\nInstalled Version: 2.5.8\nVulnerability CVE-2025-26791\nSeverity: MEDIUM\nFixed Version: 3.2.4\nLink: [CVE-2025-26791](https://avd.aquasec.com/nvd/cve-2025-26791)"},"location":{"path":"apps/frontend-nextjs/package-lock.json","start_line":5413,"end_line":5419,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/371/instances","dismissal_approved_by":null},{"number":370,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-15T03:34:12Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/370","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/370","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/core/security/enhanced_security.py","start_line":138,"end_line":138,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/370/instances","dismissal_approved_by":null},{"number":369,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-19T23:47:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/369","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/369","state":"fixed","fixed_at":"2025-08-19T23:47:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"b53575cec9e4a80eb4cb77826d3cf7881b6a2730","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/core/fallback/intelligent_fallback.py","start_line":84,"end_line":84,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/369/instances","dismissal_approved_by":null},{"number":368,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-19T23:47:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/368","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/368","state":"fixed","fixed_at":"2025-08-19T23:47:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"b53575cec9e4a80eb4cb77826d3cf7881b6a2730","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/core/fallback/intelligent_fallback.py","start_line":77,"end_line":77,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/368/instances","dismissal_approved_by":null},{"number":367,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-19T23:47:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/367","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/367","state":"fixed","fixed_at":"2025-08-19T23:47:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"b53575cec9e4a80eb4cb77826d3cf7881b6a2730","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/core/fallback/intelligent_fallback.py","start_line":70,"end_line":70,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/367/instances","dismissal_approved_by":null},{"number":366,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-19T23:47:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/366","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/366","state":"fixed","fixed_at":"2025-08-19T23:47:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"b53575cec9e4a80eb4cb77826d3cf7881b6a2730","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/core/fallback/intelligent_fallback.py","start_line":62,"end_line":62,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/366/instances","dismissal_approved_by":null},{"number":365,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-19T23:47:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/365","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/365","state":"fixed","fixed_at":"2025-08-19T23:47:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"b53575cec9e4a80eb4cb77826d3cf7881b6a2730","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/core/fallback/intelligent_fallback.py","start_line":55,"end_line":55,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/365/instances","dismissal_approved_by":null},{"number":364,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-19T23:47:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/364","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/364","state":"fixed","fixed_at":"2025-08-19T23:47:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"b53575cec9e4a80eb4cb77826d3cf7881b6a2730","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/core/fallback/intelligent_fallback.py","start_line":47,"end_line":47,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/364/instances","dismissal_approved_by":null},{"number":363,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/363","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/363","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'ChunkPriority' is not used."},"location":{"path":"apps/backend/services/semantic_search.py","start_line":27,"end_line":27,"start_column":5,"end_column":70},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/363/instances","dismissal_approved_by":null},{"number":362,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/362","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/362","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'Union' is not used."},"location":{"path":"apps/backend/services/semantic_search.py","start_line":10,"end_line":10,"start_column":1,"end_column":59},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/362/instances","dismissal_approved_by":null},{"number":361,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-15T03:34:12Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/361","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/361","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Optional' is not used."},"location":{"path":"apps/backend/core/fallback/intelligent_fallback.py","start_line":12,"end_line":12,"start_column":1,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/361/instances","dismissal_approved_by":null},{"number":360,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-15T03:34:12Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/360","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/360","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/core/fallback/intelligent_fallback.py","start_line":9,"end_line":9,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/360/instances","dismissal_approved_by":null},{"number":359,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-15T03:34:12Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/359","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/359","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'g' is not used."},"location":{"path":"apps/backend/core/security/enhanced_security.py","start_line":15,"end_line":15,"start_column":1,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/359/instances","dismissal_approved_by":null},{"number":358,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-15T03:34:12Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/358","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/358","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Set' is not used."},"location":{"path":"apps/backend/core/security/enhanced_security.py","start_line":13,"end_line":13,"start_column":1,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/358/instances","dismissal_approved_by":null},{"number":357,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-15T03:34:12Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/357","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/357","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'timedelta' is not used."},"location":{"path":"apps/backend/core/security/enhanced_security.py","start_line":12,"end_line":12,"start_column":1,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/357/instances","dismissal_approved_by":null},{"number":356,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-15T03:34:12Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/356","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/356","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'secrets' is not used."},"location":{"path":"apps/backend/core/security/enhanced_security.py","start_line":11,"end_line":11,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/356/instances","dismissal_approved_by":null},{"number":355,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-15T03:34:12Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/355","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/355","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'hashlib' is not used."},"location":{"path":"apps/backend/core/security/enhanced_security.py","start_line":10,"end_line":10,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/355/instances","dismissal_approved_by":null},{"number":354,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/354","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/354","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'timedelta' is not used."},"location":{"path":"apps/backend/services/embedding_service.py","start_line":13,"end_line":13,"start_column":1,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/354/instances","dismissal_approved_by":null},{"number":353,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/353","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/353","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/services/embedding_service.py","start_line":8,"end_line":8,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/353/instances","dismissal_approved_by":null},{"number":352,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-15T03:34:12Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/352","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/352","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/mixed-returns","severity":"note","description":"Explicit returns mixed with implicit (fall through) returns","name":"py/mixed-returns","tags":["correctness","quality","reliability"],"full_description":"Mixing implicit and explicit returns indicates a likely error as implicit returns always return `None`.","help":"# Explicit returns mixed with implicit (fall through) returns\nWhen a function contains both explicit returns (`return value`) and implicit returns (where code falls off the end of a function), this often indicates that a return statement has been forgotten. It is best to return an explicit return value even when returning `None` because this makes it easier for other developers to read your code.\n\n\n## Recommendation\nAdd an explicit return at the end of the function.\n\n\n## Example\nIn the `check_state1` function, the developer probably did intend to use an implicit return value of `None` as this equates to `False`. However, the function in `check_state2` is easier to read.\n\n\n```python\n    def check_state1(state, interactive=True):\n        if not state['good'] or not state['bad']:\n            if (good or bad or skip or reset) and interactive:\n                return                                          # implicitly return None\n            if not state['good']:\n                raise util.Abort(_('cannot bisect (no known good revisions)'))\n            else:\n                raise util.Abort(_('cannot bisect (no known bad revisions)')) \n        return True  \t\t\t\t\t\t\t                              \n           \n    def check_state2(state, interactive=True):\n        if not state['good'] or not state['bad']:\n            if (good or bad or skip or reset) and interactive:\n                return False                                    # return an explicit value\n            if not state['good']:\n                raise util.Abort(_('cannot bisect (no known good revisions)'))\n            else:\n                raise util.Abort(_('cannot bisect (no known bad revisions)'))\n        return True\n\n```\n\n## References\n* Python Language Reference: [Function definitions](http://docs.python.org/3/reference/compound_stmts.html#function).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Mixing implicit and explicit returns may indicate an error, as implicit returns always return None."},"location":{"path":"apps/backend/core/security/enhanced_security.py","start_line":89,"end_line":89,"start_column":5,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/352/instances","dismissal_approved_by":null},{"number":351,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/351","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/351","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Variable security_middleware is not used."},"location":{"path":"apps/backend/main.py","start_line":184,"end_line":184,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/351/instances","dismissal_approved_by":null},{"number":350,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-15T03:34:12Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/350","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/350","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/core/performance/response_optimizer.py","start_line":74,"end_line":74,"start_column":30,"end_column":87},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/350/instances","dismissal_approved_by":null},{"number":349,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-15T03:34:12Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/349","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/349","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/core/performance/response_optimizer.py","start_line":72,"end_line":72,"start_column":32,"end_column":88},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/349/instances","dismissal_approved_by":null},{"number":348,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-15T03:34:12Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/348","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/348","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/core/security/enhanced_security.py","start_line":354,"end_line":354,"start_column":24,"end_column":73},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/348/instances","dismissal_approved_by":null},{"number":347,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-15T03:34:12Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/347","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/347","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/core/security/enhanced_security.py","start_line":290,"end_line":290,"start_column":28,"end_column":87},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/347/instances","dismissal_approved_by":null},{"number":346,"created_at":"2025-08-15T03:33:43Z","updated_at":"2025-08-15T03:34:12Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/346","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/346","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/core/security/enhanced_security.py","start_line":149,"end_line":149,"start_column":28,"end_column":85},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/346/instances","dismissal_approved_by":null},{"number":345,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-15T00:23:30Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/345","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/345","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/core/versioning.py","start_line":136,"end_line":136,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/345/instances","dismissal_approved_by":null},{"number":344,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-15T00:23:30Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/344","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/344","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/core/versioning.py","start_line":53,"end_line":53,"start_column":17,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/344/instances","dismissal_approved_by":null},{"number":343,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/343","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/343","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/core/security/middleware.py","start_line":477,"end_line":477,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/343/instances","dismissal_approved_by":null},{"number":342,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/342","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/342","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/blueprints/health_blueprint.py","start_line":688,"end_line":688,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/342/instances","dismissal_approved_by":null},{"number":341,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/341","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/341","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/blueprints/health_blueprint.py","start_line":679,"end_line":679,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/341/instances","dismissal_approved_by":null},{"number":340,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/340","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/340","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/blueprints/health_blueprint.py","start_line":662,"end_line":662,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/340/instances","dismissal_approved_by":null},{"number":339,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/339","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/339","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/blueprints/health_blueprint.py","start_line":607,"end_line":607,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/339/instances","dismissal_approved_by":null},{"number":338,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/338","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/338","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/blueprints/health_blueprint.py","start_line":543,"end_line":543,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/338/instances","dismissal_approved_by":null},{"number":337,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/337","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/337","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/blueprints/health_blueprint.py","start_line":532,"end_line":532,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/337/instances","dismissal_approved_by":null},{"number":336,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-15T00:23:30Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/336","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/336","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/core/openapi/auth.py","start_line":37,"end_line":37,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/336/instances","dismissal_approved_by":null},{"number":335,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-15T00:23:30Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/335","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/335","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/core/versioning.py","start_line":53,"end_line":53,"start_column":17,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/335/instances","dismissal_approved_by":null},{"number":334,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-15T00:23:30Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/334","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/334","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/core/openapi/auth.py","start_line":37,"end_line":37,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/334/instances","dismissal_approved_by":null},{"number":333,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-15T00:23:30Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/333","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/333","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'current_app' is not used."},"location":{"path":"apps/backend/core/versioning.py","start_line":8,"end_line":8,"start_column":1,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/333/instances","dismissal_approved_by":null},{"number":332,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-15T00:23:30Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/332","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/332","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'get_swaggerui_blueprint' is not used."},"location":{"path":"apps/backend/core/openapi/spec.py","start_line":13,"end_line":13,"start_column":5,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/332/instances","dismissal_approved_by":null},{"number":331,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-15T00:23:30Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/331","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/331","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'request' is not used."},"location":{"path":"apps/backend/core/openapi/spec.py","start_line":7,"end_line":7,"start_column":1,"end_column":70},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/331/instances","dismissal_approved_by":null},{"number":330,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/330","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/330","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'get_distributed_rate_limiter_stats' is not used."},"location":{"path":"apps/backend/core/security/middleware.py","start_line":35,"end_line":35,"start_column":5,"end_column":113},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/330/instances","dismissal_approved_by":null},{"number":329,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/329","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/329","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'urlparse' is not used.\nImport of 'parse_qs' is not used."},"location":{"path":"apps/backend/core/security/middleware.py","start_line":31,"end_line":31,"start_column":1,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/329/instances","dismissal_approved_by":null},{"number":328,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/328","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/328","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'user_agents' is not used."},"location":{"path":"apps/backend/core/security/middleware.py","start_line":30,"end_line":30,"start_column":1,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/328/instances","dismissal_approved_by":null},{"number":327,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/327","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/327","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'wraps' is not used."},"location":{"path":"apps/backend/core/security/middleware.py","start_line":28,"end_line":28,"start_column":1,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/327/instances","dismissal_approved_by":null},{"number":326,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/326","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/326","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'asdict' is not used."},"location":{"path":"apps/backend/core/security/middleware.py","start_line":26,"end_line":26,"start_column":1,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/326/instances","dismissal_approved_by":null},{"number":325,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/325","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/325","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'Optional' is not used."},"location":{"path":"apps/backend/core/security/middleware.py","start_line":24,"end_line":24,"start_column":1,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/325/instances","dismissal_approved_by":null},{"number":324,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/324","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/324","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'hashlib' is not used."},"location":{"path":"apps/backend/core/security/middleware.py","start_line":20,"end_line":20,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/324/instances","dismissal_approved_by":null},{"number":323,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/323","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/323","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'EducationalQAFramework' is not used."},"location":{"path":"apps/backend/blueprints/health_blueprint.py","start_line":33,"end_line":33,"start_column":5,"end_column":80},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/323/instances","dismissal_approved_by":null},{"number":322,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-15T00:23:30Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/322","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/322","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used.\nImport of 'Dict' is not used.\nImport of 'Any' is not used."},"location":{"path":"apps/backend/blueprints/docs_blueprint.py","start_line":10,"end_line":10,"start_column":1,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/322/instances","dismissal_approved_by":null},{"number":321,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-15T00:23:30Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/321","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/321","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'hmac' is not used."},"location":{"path":"apps/backend/core/openapi/auth.py","start_line":9,"end_line":9,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/321/instances","dismissal_approved_by":null},{"number":320,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-15T00:23:30Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/320","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/320","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'hashlib' is not used."},"location":{"path":"apps/backend/core/openapi/auth.py","start_line":8,"end_line":8,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/320/instances","dismissal_approved_by":null},{"number":319,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-15T00:23:30Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/319","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/319","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'current_app' is not used."},"location":{"path":"apps/backend/core/openapi/auth.py","start_line":7,"end_line":7,"start_column":1,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/319/instances","dismissal_approved_by":null},{"number":318,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/318","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/318","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/mixed-returns","severity":"note","description":"Explicit returns mixed with implicit (fall through) returns","name":"py/mixed-returns","tags":["correctness","quality","reliability"],"full_description":"Mixing implicit and explicit returns indicates a likely error as implicit returns always return `None`.","help":"# Explicit returns mixed with implicit (fall through) returns\nWhen a function contains both explicit returns (`return value`) and implicit returns (where code falls off the end of a function), this often indicates that a return statement has been forgotten. It is best to return an explicit return value even when returning `None` because this makes it easier for other developers to read your code.\n\n\n## Recommendation\nAdd an explicit return at the end of the function.\n\n\n## Example\nIn the `check_state1` function, the developer probably did intend to use an implicit return value of `None` as this equates to `False`. However, the function in `check_state2` is easier to read.\n\n\n```python\n    def check_state1(state, interactive=True):\n        if not state['good'] or not state['bad']:\n            if (good or bad or skip or reset) and interactive:\n                return                                          # implicitly return None\n            if not state['good']:\n                raise util.Abort(_('cannot bisect (no known good revisions)'))\n            else:\n                raise util.Abort(_('cannot bisect (no known bad revisions)')) \n        return True  \t\t\t\t\t\t\t                              \n           \n    def check_state2(state, interactive=True):\n        if not state['good'] or not state['bad']:\n            if (good or bad or skip or reset) and interactive:\n                return False                                    # return an explicit value\n            if not state['good']:\n                raise util.Abort(_('cannot bisect (no known good revisions)'))\n            else:\n                raise util.Abort(_('cannot bisect (no known bad revisions)'))\n        return True\n\n```\n\n## References\n* Python Language Reference: [Function definitions](http://docs.python.org/3/reference/compound_stmts.html#function).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Mixing implicit and explicit returns may indicate an error, as implicit returns always return None."},"location":{"path":"apps/backend/core/security/middleware.py","start_line":451,"end_line":451,"start_column":5,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/318/instances","dismissal_approved_by":null},{"number":317,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-15T00:23:30Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/317","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/317","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/mixed-returns","severity":"note","description":"Explicit returns mixed with implicit (fall through) returns","name":"py/mixed-returns","tags":["correctness","quality","reliability"],"full_description":"Mixing implicit and explicit returns indicates a likely error as implicit returns always return `None`.","help":"# Explicit returns mixed with implicit (fall through) returns\nWhen a function contains both explicit returns (`return value`) and implicit returns (where code falls off the end of a function), this often indicates that a return statement has been forgotten. It is best to return an explicit return value even when returning `None` because this makes it easier for other developers to read your code.\n\n\n## Recommendation\nAdd an explicit return at the end of the function.\n\n\n## Example\nIn the `check_state1` function, the developer probably did intend to use an implicit return value of `None` as this equates to `False`. However, the function in `check_state2` is easier to read.\n\n\n```python\n    def check_state1(state, interactive=True):\n        if not state['good'] or not state['bad']:\n            if (good or bad or skip or reset) and interactive:\n                return                                          # implicitly return None\n            if not state['good']:\n                raise util.Abort(_('cannot bisect (no known good revisions)'))\n            else:\n                raise util.Abort(_('cannot bisect (no known bad revisions)')) \n        return True  \t\t\t\t\t\t\t                              \n           \n    def check_state2(state, interactive=True):\n        if not state['good'] or not state['bad']:\n            if (good or bad or skip or reset) and interactive:\n                return False                                    # return an explicit value\n            if not state['good']:\n                raise util.Abort(_('cannot bisect (no known good revisions)'))\n            else:\n                raise util.Abort(_('cannot bisect (no known bad revisions)'))\n        return True\n\n```\n\n## References\n* Python Language Reference: [Function definitions](http://docs.python.org/3/reference/compound_stmts.html#function).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Mixing implicit and explicit returns may indicate an error, as implicit returns always return None."},"location":{"path":"apps/backend/blueprints/docs_blueprint.py","start_line":206,"end_line":206,"start_column":1,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/317/instances","dismissal_approved_by":null},{"number":316,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-15T00:23:30Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/316","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/316","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/core/versioning.py","start_line":119,"end_line":119,"start_column":26,"end_column":83},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/316/instances","dismissal_approved_by":null},{"number":315,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-15T00:23:30Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/315","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/315","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/docs_blueprint.py","start_line":242,"end_line":242,"start_column":21,"end_column":74},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/315/instances","dismissal_approved_by":null},{"number":314,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/314","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/314","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/docs_blueprint.py","start_line":108,"end_line":111,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/314/instances","dismissal_approved_by":null},{"number":313,"created_at":"2025-08-15T00:23:00Z","updated_at":"2025-08-19T03:53:56Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/313","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/313","state":"fixed","fixed_at":"2025-08-19T03:53:55Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"fixed","commit_sha":"7165d6cd08a09f6a15b03b39b84f60b7113a2c58","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"apps/backend/blueprints/health_blueprint.py","start_line":851,"end_line":851,"start_column":21,"end_column":71},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/313/instances","dismissal_approved_by":null},{"number":312,"created_at":"2025-08-14T01:59:19Z","updated_at":"2025-08-14T01:59:25Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/312","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/312","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'cloud_logging' is not used."},"location":{"path":"apps/backend/blueprints/metrics_blueprint.py","start_line":26,"end_line":26,"start_column":5,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/312/instances","dismissal_approved_by":null},{"number":311,"created_at":"2025-08-14T01:59:19Z","updated_at":"2025-08-14T01:59:25Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/311","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/311","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'monitoring_v3' is not used."},"location":{"path":"apps/backend/blueprints/metrics_blueprint.py","start_line":25,"end_line":25,"start_column":5,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/311/instances","dismissal_approved_by":null},{"number":310,"created_at":"2025-08-14T01:59:19Z","updated_at":"2025-08-14T01:59:25Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/310","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/310","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable config is not used."},"location":{"path":"apps/backend/blueprints/monitoring_blueprint.py","start_line":252,"end_line":252,"start_column":9,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/310/instances","dismissal_approved_by":null},{"number":309,"created_at":"2025-08-14T01:59:19Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/309","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/309","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/metrics_blueprint.py","start_line":425,"end_line":428,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/309/instances","dismissal_approved_by":null},{"number":308,"created_at":"2025-08-13T23:27:33Z","updated_at":"2025-08-13T23:27:41Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/308","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/308","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable getSeverityColor."},"location":{"path":"apps/frontend-nextjs/src/components/interactive/DispensingChecklist/ReadOnlyChecklist.tsx","start_line":37,"end_line":37,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/308/instances","dismissal_approved_by":null},{"number":307,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/307","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/307","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/services/vector_store.py","start_line":495,"end_line":495,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/307/instances","dismissal_approved_by":null},{"number":306,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/306","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/306","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/catch-base-exception","severity":"note","description":"Except block handles 'BaseException'","name":"py/catch-base-exception","tags":["error-handling","external/cwe/cwe-396","quality","reliability"],"full_description":"Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.","help":"# Except block handles 'BaseException'\nAll exception classes in Python derive from `BaseException`. `BaseException` has three important subclasses, `Exception` from which all errors and normal exceptions derive, `KeyboardInterrupt` which is raised when the user interrupts the program from the keyboard and `SystemExit` which is raised by the `sys.exit()` function to terminate the program.\n\nSince `KeyboardInterrupt` and `SystemExit` are special they should not be grouped together with other `Exception` classes.\n\nCatching `BaseException`, rather than its subclasses may prevent proper handling of `KeyboardInterrupt` or `SystemExit`. It is easy to catch `BaseException` accidentally as it is caught implicitly by an empty `except:` statement.\n\n\n## Recommendation\nHandle `Exception`, `KeyboardInterrupt` and `SystemExit` separately. Do not use the plain `except:` form.\n\n\n## Example\nIn these examples, a function `application.main()` is called that might raise `SystemExit`. In the first two functions, `BaseException` is caught, but this will discard `KeyboardInterrupt`. In the third function, `call_main_program_fixed` only `SystemExit` is caught, leaving `KeyboardInterrupt` to propagate.\n\nIn these examples `KeyboardInterrupt` is accidentally ignored.\n\n\n```python\n\ndef call_main_program_implicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except:\n        pass\n\ndef call_main_program_explicit_handle_base_exception():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except BaseException:\n        pass\n\ndef call_main_program_fixed():\n    try:\n        #application.main calls sys.exit() when done.\n        application.main()\n    except Exception as ex:\n        log(ex)\n    except SystemExit:\n        pass\n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/3/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/3/reference/executionmodel.html#exceptions).\n* M. Lutz, Learning Python, Section 35.3: Exception Design Tips and Gotchas, O'Reilly Media, 2013.\n* Python Tutorial: [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).\n* Common Weakness Enumeration: [CWE-396](https://cwe.mitre.org/data/definitions/396.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Except block directly handles BaseException."},"location":{"path":"apps/backend/core/security/zero_trust.py","start_line":227,"end_line":227,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/306/instances","dismissal_approved_by":null},{"number":305,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/305","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/305","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/services/vector_store.py","start_line":495,"end_line":495,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/305/instances","dismissal_approved_by":null},{"number":304,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/304","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/304","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/core/security/security_agent.py","start_line":449,"end_line":449,"start_column":13,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/304/instances","dismissal_approved_by":null},{"number":303,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-19T23:47:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/303","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/303","state":"fixed","fixed_at":"2025-08-19T23:47:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"b53575cec9e4a80eb4cb77826d3cf7881b6a2730","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":291,"end_line":291,"start_column":9,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/303/instances","dismissal_approved_by":null},{"number":302,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-19T23:47:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/302","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/302","state":"fixed","fixed_at":"2025-08-19T23:47:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"b53575cec9e4a80eb4cb77826d3cf7881b6a2730","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/core/logging/advanced_logger.py","start_line":433,"end_line":433,"start_column":13,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/302/instances","dismissal_approved_by":null},{"number":301,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-19T23:47:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/301","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/301","state":"fixed","fixed_at":"2025-08-19T23:47:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"b53575cec9e4a80eb4cb77826d3cf7881b6a2730","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/core/logging/advanced_logger.py","start_line":275,"end_line":275,"start_column":21,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/301/instances","dismissal_approved_by":null},{"number":300,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-19T23:47:14Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/300","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/300","state":"fixed","fixed_at":"2025-08-19T23:47:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/empty-except","severity":"note","description":"Empty except","name":"py/empty-except","tags":["error-handling","external/cwe/cwe-390","quality","reliability"],"full_description":"Except doesn't do anything and has no comment","help":"# Empty except\nIgnoring exceptions that should be dealt with in some way is almost always a bad idea. The loss of information can lead to hard to debug errors and incomplete log files. It is even possible that ignoring an exception can cause a security vulnerability. An empty `except` block may be an indication that the programmer intended to handle the exception, but never wrote the code to do so.\n\n\n## Recommendation\nEnsure all exceptions are handled correctly.\n\n\n## Example\nIn this example, the program keeps running with the same privileges if it fails to drop to lower privileges.\n\n\n```python\n# ...\ntry:\n    security_manager.drop_privileges()\nexcept SecurityError:\n    pass\n# ...\n```\n\n## References\n* Common Weakness Enumeration: [CWE-390](https://cwe.mitre.org/data/definitions/390.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"b53575cec9e4a80eb4cb77826d3cf7881b6a2730","message":{"text":"'except' clause does nothing but pass and there is no explanatory comment."},"location":{"path":"apps/backend/core/logging/advanced_logger.py","start_line":221,"end_line":221,"start_column":13,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/300/instances","dismissal_approved_by":null},{"number":299,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/299","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/299","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'jwt' is not used."},"location":{"path":"apps/backend/core/security/zero_trust.py","start_line":35,"end_line":35,"start_column":1,"end_column":11},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/299/instances","dismissal_approved_by":null},{"number":298,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/298","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/298","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'SimpleStatement' is not used."},"location":{"path":"apps/backend/services/vector_store.py","start_line":22,"end_line":22,"start_column":5,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/298/instances","dismissal_approved_by":null},{"number":297,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/297","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/297","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'asdict' is not used."},"location":{"path":"apps/backend/core/security/zero_trust.py","start_line":31,"end_line":31,"start_column":1,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/297/instances","dismissal_approved_by":null},{"number":296,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/296","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/296","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Callable' is not used."},"location":{"path":"apps/backend/core/security/zero_trust.py","start_line":30,"end_line":30,"start_column":1,"end_column":67},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/296/instances","dismissal_approved_by":null},{"number":295,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/295","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/295","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'hashlib' is not used."},"location":{"path":"apps/backend/services/vector_store.py","start_line":11,"end_line":11,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/295/instances","dismissal_approved_by":null},{"number":294,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/294","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/294","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'hashlib' is not used."},"location":{"path":"apps/backend/core/security/zero_trust.py","start_line":26,"end_line":26,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/294/instances","dismissal_approved_by":null},{"number":293,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/293","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/293","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/core/security/zero_trust.py","start_line":24,"end_line":24,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/293/instances","dismissal_approved_by":null},{"number":292,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/292","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/292","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/services/vector_store.py","start_line":7,"end_line":7,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/292/instances","dismissal_approved_by":null},{"number":291,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-15T03:34:13Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/291","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/291","state":"fixed","fixed_at":"2025-08-15T03:34:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"1c61b6f1bdee7fc653dbbe880086c58af666d9e7","message":{"text":"Import of 'ChunkPriority' is not used."},"location":{"path":"apps/backend/services/semantic_search.py","start_line":16,"end_line":16,"start_column":1,"end_column":66},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/291/instances","dismissal_approved_by":null},{"number":290,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-15T03:34:13Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/290","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/290","state":"fixed","fixed_at":"2025-08-15T03:34:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"1c61b6f1bdee7fc653dbbe880086c58af666d9e7","message":{"text":"Import of 'embed_text' is not used."},"location":{"path":"apps/backend/services/semantic_search.py","start_line":14,"end_line":14,"start_column":1,"end_column":73},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/290/instances","dismissal_approved_by":null},{"number":289,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/289","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/289","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'AlertSeverity' is not used."},"location":{"path":"apps/backend/core/security/security_framework.py","start_line":35,"end_line":43,"start_column":1,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/289/instances","dismissal_approved_by":null},{"number":288,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/288","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/288","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used."},"location":{"path":"apps/backend/core/security/security_framework.py","start_line":22,"end_line":22,"start_column":1,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/288/instances","dismissal_approved_by":null},{"number":287,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/287","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/287","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'requests' is not used."},"location":{"path":"apps/backend/core/security/security_agent.py","start_line":35,"end_line":35,"start_column":1,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/287/instances","dismissal_approved_by":null},{"number":286,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/286","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/286","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Path' is not used."},"location":{"path":"apps/backend/core/security/security_agent.py","start_line":34,"end_line":34,"start_column":1,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/286/instances","dismissal_approved_by":null},{"number":285,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/285","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/285","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'asdict' is not used."},"location":{"path":"apps/backend/core/security/security_agent.py","start_line":33,"end_line":33,"start_column":1,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/285/instances","dismissal_approved_by":null},{"number":284,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/284","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/284","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Tuple' is not used."},"location":{"path":"apps/backend/core/security/security_agent.py","start_line":32,"end_line":32,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/284/instances","dismissal_approved_by":null},{"number":283,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/283","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/283","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'subprocess' is not used."},"location":{"path":"apps/backend/core/security/security_agent.py","start_line":30,"end_line":30,"start_column":1,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/283/instances","dismissal_approved_by":null},{"number":282,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/282","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/282","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Tuple' is not used."},"location":{"path":"apps/backend/core/security/secrets_manager.py","start_line":23,"end_line":23,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/282/instances","dismissal_approved_by":null},{"number":281,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/281","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/281","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'hashlib' is not used."},"location":{"path":"apps/backend/core/security/secrets_manager.py","start_line":19,"end_line":19,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/281/instances","dismissal_approved_by":null},{"number":280,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/280","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/280","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Path' is not used."},"location":{"path":"apps/backend/core/validation/scope_detector.py","start_line":14,"end_line":14,"start_column":1,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/280/instances","dismissal_approved_by":null},{"number":279,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/279","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/279","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used.\nImport of 'Tuple' is not used."},"location":{"path":"apps/backend/core/validation/scope_detector.py","start_line":13,"end_line":13,"start_column":1,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/279/instances","dismissal_approved_by":null},{"number":278,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/278","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/278","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'List' is not used."},"location":{"path":"apps/backend/services/scope_detection_system.py","start_line":6,"end_line":6,"start_column":1,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/278/instances","dismissal_approved_by":null},{"number":277,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/277","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/277","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 're' is not used."},"location":{"path":"apps/backend/services/scope_detection_system.py","start_line":5,"end_line":5,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/277/instances","dismissal_approved_by":null},{"number":276,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/276","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/276","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Set' is not used."},"location":{"path":"apps/backend/core/performance/redis_rate_limiter.py","start_line":26,"end_line":26,"start_column":1,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/276/instances","dismissal_approved_by":null},{"number":275,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/275","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/275","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'timedelta' is not used."},"location":{"path":"apps/backend/core/performance/redis_rate_limiter.py","start_line":25,"end_line":25,"start_column":1,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/275/instances","dismissal_approved_by":null},{"number":274,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-14T01:59:26Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/274","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/274","state":"fixed","fixed_at":"2025-08-14T01:59:25Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"7c58fd7b6b3bfe8383df382c75896a0971451d5a","message":{"text":"Import of 'multiprocess' is not used.\nImport of 'values' is not used."},"location":{"path":"apps/backend/core/metrics/prometheus_metrics.py","start_line":31,"end_line":35,"start_column":5,"end_column":6},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/274/instances","dismissal_approved_by":null},{"number":273,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-14T01:59:26Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/273","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/273","state":"fixed","fixed_at":"2025-08-14T01:59:25Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"7c58fd7b6b3bfe8383df382c75896a0971451d5a","message":{"text":"Import of 'List' is not used."},"location":{"path":"apps/backend/core/metrics/prometheus_metrics.py","start_line":24,"end_line":24,"start_column":1,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/273/instances","dismissal_approved_by":null},{"number":272,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/272","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/272","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/core/monitoring/production_health.py","start_line":15,"end_line":15,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/272/instances","dismissal_approved_by":null},{"number":271,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/271","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/271","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'List' is not used."},"location":{"path":"apps/backend/core/monitoring/production_health.py","start_line":14,"end_line":14,"start_column":1,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/271/instances","dismissal_approved_by":null},{"number":270,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/270","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/270","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'time' is not used."},"location":{"path":"apps/backend/core/monitoring/production_health.py","start_line":10,"end_line":10,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/270/instances","dismissal_approved_by":null},{"number":269,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/269","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/269","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'get_persona_prompt' is not used."},"location":{"path":"apps/backend/blueprints/personas_blueprint.py","start_line":17,"end_line":17,"start_column":5,"end_column":67},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/269/instances","dismissal_approved_by":null},{"number":268,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/268","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/268","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'request' is not used."},"location":{"path":"apps/backend/blueprints/personas_blueprint.py","start_line":7,"end_line":7,"start_column":1,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/268/instances","dismissal_approved_by":null},{"number":267,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/267","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/267","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'config' is not used."},"location":{"path":"apps/backend/core/metrics/performance_monitor.py","start_line":20,"end_line":20,"start_column":1,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/267/instances","dismissal_approved_by":null},{"number":266,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/266","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/266","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/core/metrics/performance_monitor.py","start_line":10,"end_line":10,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/266/instances","dismissal_approved_by":null},{"number":265,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/265","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/265","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'httpx' is not used."},"location":{"path":"apps/backend/services/openai_integration.py","start_line":13,"end_line":13,"start_column":5,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/265/instances","dismissal_approved_by":null},{"number":264,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/264","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/264","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used."},"location":{"path":"apps/backend/blueprints/monitoring_blueprint.py","start_line":11,"end_line":11,"start_column":1,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/264/instances","dismissal_approved_by":null},{"number":263,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/263","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/263","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'timedelta' is not used."},"location":{"path":"apps/backend/blueprints/monitoring_blueprint.py","start_line":8,"end_line":8,"start_column":1,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/263/instances","dismissal_approved_by":null},{"number":262,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/262","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/262","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'asyncio' is not used."},"location":{"path":"apps/backend/core/security/monitoring.py","start_line":43,"end_line":43,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/262/instances","dismissal_approved_by":null},{"number":261,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/261","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/261","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'MimeMultipart' is not used."},"location":{"path":"apps/backend/core/security/monitoring.py","start_line":39,"end_line":39,"start_column":1,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/261/instances","dismissal_approved_by":null},{"number":260,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/260","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/260","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'MimeText' is not used."},"location":{"path":"apps/backend/core/security/monitoring.py","start_line":38,"end_line":38,"start_column":1,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/260/instances","dismissal_approved_by":null},{"number":259,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/259","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/259","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'smtplib' is not used."},"location":{"path":"apps/backend/core/security/monitoring.py","start_line":37,"end_line":37,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/259/instances","dismissal_approved_by":null},{"number":258,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/258","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/258","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Tuple' is not used.\nImport of 'Set' is not used.\nImport of 'Callable' is not used."},"location":{"path":"apps/backend/core/security/monitoring.py","start_line":31,"end_line":31,"start_column":1,"end_column":67},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/258/instances","dismissal_approved_by":null},{"number":257,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/257","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/257","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/core/security/monitoring.py","start_line":25,"end_line":25,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/257/instances","dismissal_approved_by":null},{"number":256,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/256","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/256","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'timedelta' is not used."},"location":{"path":"apps/backend/core/performance/monitoring.py","start_line":12,"end_line":12,"start_column":1,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/256/instances","dismissal_approved_by":null},{"number":255,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/255","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/255","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/core/performance/monitoring.py","start_line":11,"end_line":11,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/255/instances","dismissal_approved_by":null},{"number":254,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/254","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/254","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'time' is not used."},"location":{"path":"apps/backend/core/performance/monitoring.py","start_line":10,"end_line":10,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/254/instances","dismissal_approved_by":null},{"number":253,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/253","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/253","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'config' is not used.\nImport of 'EnvironmentConfig' is not used."},"location":{"path":"apps/backend/core/security/medical_disclaimers.py","start_line":30,"end_line":30,"start_column":1,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/253/instances","dismissal_approved_by":null},{"number":252,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/252","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/252","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/core/security/medical_disclaimers.py","start_line":27,"end_line":27,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/252/instances","dismissal_approved_by":null},{"number":251,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/251","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/251","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'jsonify' is not used."},"location":{"path":"apps/backend/core/security/medical_disclaimers.py","start_line":26,"end_line":26,"start_column":1,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/251/instances","dismissal_approved_by":null},{"number":250,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/250","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/250","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Tuple' is not used."},"location":{"path":"apps/backend/core/security/medical_disclaimers.py","start_line":23,"end_line":23,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/250/instances","dismissal_approved_by":null},{"number":249,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/249","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/249","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'config' is not used."},"location":{"path":"apps/backend/services/medical_rag_integration.py","start_line":24,"end_line":24,"start_column":1,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/249/instances","dismissal_approved_by":null},{"number":248,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/248","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/248","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'asdict' is not used."},"location":{"path":"apps/backend/services/medical_rag_integration.py","start_line":10,"end_line":10,"start_column":1,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/248/instances","dismissal_approved_by":null},{"number":247,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/247","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/247","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'Optional' is not used.\nImport of 'Tuple' is not used."},"location":{"path":"apps/backend/services/medical_rag_integration.py","start_line":9,"end_line":9,"start_column":1,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/247/instances","dismissal_approved_by":null},{"number":246,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/246","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/246","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'Optional' is not used.\nImport of 'Any' is not used."},"location":{"path":"apps/backend/services/medical_chunking.py","start_line":8,"end_line":8,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/246/instances","dismissal_approved_by":null},{"number":245,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/245","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/245","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Tuple' is not used."},"location":{"path":"apps/backend/core/rag/knowledge_base.py","start_line":15,"end_line":15,"start_column":1,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/245/instances","dismissal_approved_by":null},{"number":244,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/244","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/244","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/core/rag/knowledge_base.py","start_line":12,"end_line":12,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/244/instances","dismissal_approved_by":null},{"number":243,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/243","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/243","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 're' is not used."},"location":{"path":"apps/backend/core/personas/ga_empathetic.py","start_line":12,"end_line":12,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/243/instances","dismissal_approved_by":null},{"number":242,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/242","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/242","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/core/personas/ga_empathetic.py","start_line":11,"end_line":11,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/242/instances","dismissal_approved_by":null},{"number":241,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/241","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/241","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'get_config' is not used."},"location":{"path":"apps/backend/blueprints/feedback_blueprint.py","start_line":14,"end_line":14,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/241/instances","dismissal_approved_by":null},{"number":240,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/240","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/240","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used."},"location":{"path":"apps/backend/blueprints/feedback_blueprint.py","start_line":11,"end_line":11,"start_column":1,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/240/instances","dismissal_approved_by":null},{"number":239,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/239","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/239","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/services/enhanced_rag_system.py","start_line":8,"end_line":8,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/239/instances","dismissal_approved_by":null},{"number":238,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/238","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/238","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'List' is not used."},"location":{"path":"apps/backend/services/enhanced_rag_system.py","start_line":5,"end_line":5,"start_column":1,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/238/instances","dismissal_approved_by":null},{"number":237,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-15T03:34:13Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/237","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/237","state":"fixed","fixed_at":"2025-08-15T03:34:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"1c61b6f1bdee7fc653dbbe880086c58af666d9e7","message":{"text":"Import of 'torch' is not used."},"location":{"path":"apps/backend/services/embedding_service.py","start_line":19,"end_line":19,"start_column":5,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/237/instances","dismissal_approved_by":null},{"number":236,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-15T03:34:13Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/236","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/236","state":"fixed","fixed_at":"2025-08-15T03:34:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"1c61b6f1bdee7fc653dbbe880086c58af666d9e7","message":{"text":"Import of 'timedelta' is not used."},"location":{"path":"apps/backend/services/embedding_service.py","start_line":12,"end_line":12,"start_column":1,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/236/instances","dismissal_approved_by":null},{"number":235,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-15T03:34:13Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/235","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/235","state":"fixed","fixed_at":"2025-08-15T03:34:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"1c61b6f1bdee7fc653dbbe880086c58af666d9e7","message":{"text":"Import of 'os' is not used."},"location":{"path":"apps/backend/services/embedding_service.py","start_line":7,"end_line":7,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/235/instances","dismissal_approved_by":null},{"number":234,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/234","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/234","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Path' is not used."},"location":{"path":"apps/backend/core/validation/educational_qa_framework.py","start_line":22,"end_line":22,"start_column":1,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/234/instances","dismissal_approved_by":null},{"number":233,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/233","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/233","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Tuple' is not used.\nImport of 'Optional' is not used."},"location":{"path":"apps/backend/core/validation/educational_qa_framework.py","start_line":18,"end_line":18,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/233/instances","dismissal_approved_by":null},{"number":232,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/232","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/232","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/core/validation/educational_qa_framework.py","start_line":14,"end_line":14,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/232/instances","dismissal_approved_by":null},{"number":231,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/231","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/231","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 're' is not used."},"location":{"path":"apps/backend/core/personas/dr_gasnelio.py","start_line":22,"end_line":22,"start_column":1,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/231/instances","dismissal_approved_by":null},{"number":230,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/230","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/230","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/core/personas/dr_gasnelio.py","start_line":21,"end_line":21,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/230/instances","dismissal_approved_by":null},{"number":229,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/229","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/229","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'get_rag_context' is not used."},"location":{"path":"apps/backend/core/dependencies.py","start_line":33,"end_line":33,"start_column":5,"end_column":81},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/229/instances","dismissal_approved_by":null},{"number":228,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/228","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/228","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'config' is not used."},"location":{"path":"apps/backend/core/validation/cross_persona_validator.py","start_line":32,"end_line":32,"start_column":1,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/228/instances","dismissal_approved_by":null},{"number":227,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/227","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/227","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'math' is not used."},"location":{"path":"apps/backend/core/validation/cross_persona_validator.py","start_line":29,"end_line":29,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/227/instances","dismissal_approved_by":null},{"number":226,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/226","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/226","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'asdict' is not used."},"location":{"path":"apps/backend/core/validation/cross_persona_validator.py","start_line":26,"end_line":26,"start_column":1,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/226/instances","dismissal_approved_by":null},{"number":225,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/225","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/225","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Tuple' is not used.\nImport of 'Set' is not used."},"location":{"path":"apps/backend/core/validation/cross_persona_validator.py","start_line":25,"end_line":25,"start_column":1,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/225/instances","dismissal_approved_by":null},{"number":224,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/224","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/224","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/core/validation/cross_persona_validator.py","start_line":23,"end_line":23,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/224/instances","dismissal_approved_by":null},{"number":223,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/223","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/223","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'zipfile' is not used."},"location":{"path":"apps/backend/core/security/cicd_security.py","start_line":41,"end_line":41,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/223/instances","dismissal_approved_by":null},{"number":222,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/222","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/222","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'tempfile' is not used."},"location":{"path":"apps/backend/core/security/cicd_security.py","start_line":40,"end_line":40,"start_column":1,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/222/instances","dismissal_approved_by":null},{"number":221,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/221","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/221","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'yaml' is not used."},"location":{"path":"apps/backend/core/security/cicd_security.py","start_line":38,"end_line":38,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/221/instances","dismissal_approved_by":null},{"number":220,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/220","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/220","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'Set' is not used."},"location":{"path":"apps/backend/core/security/cicd_security.py","start_line":34,"end_line":34,"start_column":1,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/220/instances","dismissal_approved_by":null},{"number":219,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/219","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/219","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'timedelta' is not used."},"location":{"path":"apps/backend/core/security/cicd_security.py","start_line":33,"end_line":33,"start_column":1,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/219/instances","dismissal_approved_by":null},{"number":218,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/218","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/218","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'threading' is not used."},"location":{"path":"apps/backend/core/security/cicd_security.py","start_line":32,"end_line":32,"start_column":1,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/218/instances","dismissal_approved_by":null},{"number":217,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/217","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/217","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'subprocess' is not used."},"location":{"path":"apps/backend/core/security/cicd_security.py","start_line":31,"end_line":31,"start_column":1,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/217/instances","dismissal_approved_by":null},{"number":216,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/216","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/216","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'Tuple' is not used."},"location":{"path":"apps/backend/services/chatbot.py","start_line":4,"end_line":4,"start_column":1,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/216/instances","dismissal_approved_by":null},{"number":215,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/215","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/215","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'generate_context_from_rag' is not used."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":110,"end_line":110,"start_column":5,"end_column":62},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/215/instances","dismissal_approved_by":null},{"number":214,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/214","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/214","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'add_medical_disclaimers' is not used."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":86,"end_line":89,"start_column":5,"end_column":6},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/214/instances","dismissal_approved_by":null},{"number":213,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/213","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/213","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'get_personas' is not used.\nImport of 'get_persona_prompt' is not used."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":52,"end_line":52,"start_column":5,"end_column":67},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/213/instances","dismissal_approved_by":null},{"number":212,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/212","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/212","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'get_enhanced_context' is not used.\nImport of 'cache_rag_response' is not used.\nImport of 'add_rag_feedback' is not used.\nImport of 'get_rag_stats' is not used."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":51,"end_line":51,"start_column":5,"end_column":119},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/212/instances","dismissal_approved_by":null},{"number":211,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/211","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/211","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'detect_question_scope' is not used.\nImport of 'get_limitation_response' is not used."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":50,"end_line":50,"start_column":5,"end_column":95},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/211/instances","dismissal_approved_by":null},{"number":210,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/210","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/210","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'validate_ga_response' is not used."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":49,"end_line":49,"start_column":5,"end_column":82},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/210/instances","dismissal_approved_by":null},{"number":209,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/209","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/209","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'validate_dr_gasnelio_response' is not used."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":48,"end_line":48,"start_column":5,"end_column":109},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/209/instances","dismissal_approved_by":null},{"number":208,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-18T03:04:52Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/208","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/208","state":"fixed","fixed_at":"2025-08-18T03:04:51Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"Import of 'Optional' is not used."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":12,"end_line":12,"start_column":1,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/208/instances","dismissal_approved_by":null},{"number":207,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/207","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/207","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/core/performance/cache_manager.py","start_line":11,"end_line":11,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/207/instances","dismissal_approved_by":null},{"number":206,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/206","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/206","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'Union' is not used."},"location":{"path":"apps/backend/services/ai_provider_manager.py","start_line":11,"end_line":11,"start_column":1,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/206/instances","dismissal_approved_by":null},{"number":205,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/205","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/205","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'asyncio' is not used."},"location":{"path":"apps/backend/services/ai_provider_manager.py","start_line":10,"end_line":10,"start_column":1,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/205/instances","dismissal_approved_by":null},{"number":204,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/204","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/204","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'List' is not used."},"location":{"path":"apps/backend/core/logging/advanced_logger.py","start_line":15,"end_line":15,"start_column":1,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/204/instances","dismissal_approved_by":null},{"number":203,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/203","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/203","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Import of 'timedelta' is not used."},"location":{"path":"apps/backend/core/logging/advanced_logger.py","start_line":14,"end_line":14,"start_column":1,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/203/instances","dismissal_approved_by":null},{"number":202,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/202","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/202","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-import","severity":"note","description":"Unused import","name":"py/unused-import","tags":["maintainability","quality","useless-code"],"full_description":"Import is not required as it is not used","help":"# Unused import\nA module is imported (using the `import` statement) but that module is never used. This creates a dependency that does not need to exist and makes the code more difficult to read.\n\n\n## Recommendation\nDelete the import statement.\n\n\n## References\n* Python: [import statement](http://docs.python.org/reference/simple_stmts.html#import).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Import of 'json' is not used."},"location":{"path":"apps/backend/services/advanced_cache.py","start_line":10,"end_line":10,"start_column":1,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/202/instances","dismissal_approved_by":null},{"number":201,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-15T00:23:31Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/201","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/201","state":"fixed","fixed_at":"2025-08-15T00:23:30Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/syntax-error","severity":"error","description":"Syntax error","name":"py/syntax-error","tags":["correctness","quality","reliability"],"full_description":"Syntax errors cause failures at runtime and prevent analysis of the code.","help":"# Syntax error\nSyntax errors prevent a module being evaluated and thus imported. An attempt to import a module with invalid syntax will fail; a `SyntaxError` will be raised.\n\nA common cause of syntax errors is the difference in syntax between Python 2 and Python 3. In particular, a syntax error may be alerted if a Python 3 file is assumed to be compatible with Python 2 (or vice versa). Explicitly specifying the expected Python version can help prevent this.\n\nThe existence of a syntax error in a module may suggest other problems as well. Either the module is never imported in practice and could be deleted or a `try` statement around the import is mistakenly discarding the `SyntaxError`.\n\n\n## Recommendation\nFixing the syntax error is the obvious fix. However, it is worth investigating why a module containing a syntax error was able to persist and address that problem as well.\n\nIf you suspect that the syntax error is caused by the analysis using the wrong version of Python, consider specifying the version explicitly. When you run code scanning using the CodeQL action, you can configure the Python version to use. For more information, see [Analyzing Python dependencies](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#analyzing-python-dependencies).\n\n\n## References\n* Python Tutorial: [SyntaxErrors.](http://docs.python.org/tutorial/errors.html#syntax-errors)\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"d01fab0871fa27c754db7202f023c4550f3c1ee6","message":{"text":"Syntax Error (in Python 3)."},"location":{"path":"apps/backend/core/security/middleware.py","start_line":105,"end_line":105,"start_column":22,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/201/instances","dismissal_approved_by":null},{"number":200,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-19T23:42:08Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/200","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/200","state":"fixed","fixed_at":"2025-08-19T23:42:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/mixed-returns","severity":"note","description":"Explicit returns mixed with implicit (fall through) returns","name":"py/mixed-returns","tags":["correctness","quality","reliability"],"full_description":"Mixing implicit and explicit returns indicates a likely error as implicit returns always return `None`.","help":"# Explicit returns mixed with implicit (fall through) returns\nWhen a function contains both explicit returns (`return value`) and implicit returns (where code falls off the end of a function), this often indicates that a return statement has been forgotten. It is best to return an explicit return value even when returning `None` because this makes it easier for other developers to read your code.\n\n\n## Recommendation\nAdd an explicit return at the end of the function.\n\n\n## Example\nIn the `check_state1` function, the developer probably did intend to use an implicit return value of `None` as this equates to `False`. However, the function in `check_state2` is easier to read.\n\n\n```python\n    def check_state1(state, interactive=True):\n        if not state['good'] or not state['bad']:\n            if (good or bad or skip or reset) and interactive:\n                return                                          # implicitly return None\n            if not state['good']:\n                raise util.Abort(_('cannot bisect (no known good revisions)'))\n            else:\n                raise util.Abort(_('cannot bisect (no known bad revisions)')) \n        return True  \t\t\t\t\t\t\t                              \n           \n    def check_state2(state, interactive=True):\n        if not state['good'] or not state['bad']:\n            if (good or bad or skip or reset) and interactive:\n                return False                                    # return an explicit value\n            if not state['good']:\n                raise util.Abort(_('cannot bisect (no known good revisions)'))\n            else:\n                raise util.Abort(_('cannot bisect (no known bad revisions)'))\n        return True\n\n```\n\n## References\n* Python Language Reference: [Function definitions](http://docs.python.org/3/reference/compound_stmts.html#function).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"8e66d8d1aa48a9a71d50ba1b767205bfd5847272","message":{"text":"Mixing implicit and explicit returns may indicate an error, as implicit returns always return None."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":517,"end_line":517,"start_column":1,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/200/instances","dismissal_approved_by":null},{"number":199,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/199","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/199","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/str-format/missing-named-argument","severity":"error","description":"Missing named arguments in formatting call","name":"py/str-format/missing-named-argument","tags":["correctness","quality","reliability"],"full_description":"A string formatting operation, such as '\"{name}\".format(key=b)', where the names of format items in the format string differs from the names of the values to be formatted will raise a KeyError.","help":"# Missing named arguments in formatting call\nA formatting expression, that is an expression of the form `the_format.format(args)` or `format(the_format, args)`, can use named fields. If it does, then keyword arguments must be supplied for all named fields. If any of the keyword arguments are missing then a `KeyError` will be raised.\n\n\n## Recommendation\nChange the format to match the arguments and ensure that the arguments have the correct names.\n\n\n## Example\nIn the following example, if `unlikely_condition()` is true, then a `KeyError` will be raised as the keyword parameter `eggs` is missing. Adding a keyword parameter named `eggs` would fix this.\n\n\n```python\ndef unsafe_named_format():\n    the_format = \"{spam} {eggs}\"\n    if unlikely_condition():\n        return the_format.format(spam=\"spam\", completely_different=\"eggs\")\n    else:\n        return the_format.format(spam=\"spam\", eggs=\"eggs\")\n\n```\n\n## References\n* Python Library Reference: [String Formatting.](https://docs.python.org/2/library/string.html#string-formatting)\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Missing named argument for string format. Format \"\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <title>Security Scan Report</title>\n            <style>\n                body { font-family: Arial, sans-serif; margin: 40px; }\n                .header { background: #f0f0f0; padding: 20px; border-radius: 5px; }\n                .summary { background: #e8f5e8; padding: 15px; border-radius: 5px; margin: 20px 0; }\n                .failed { background: #ffe8e8; }\n                .finding { border-left: 4px solid #ccc; padding: 10px; margin: 10px 0; }\n                .critical { border-left-color: #d32f2f; }\n                .high { border-left-color: #f57c00; }\n                .medium { border-left-color: #fbc02d; }\n                .low { border-left-color: #388e3c; }\n            </style>\n        </head>\n        <body>\n            <div class=\"header\">\n                <h1>Security Scan Report</h1>\n                <p>Stage: {stage}</p>\n                <p>Timestamp: {timestamp}</p>\n                <p>Status: <strong>{status}</strong></p>\n            </div>\n            \n            <div class=\"summary {summary_class}\">\n                <h2>Summary</h2>\n                <ul>\n                    <li>Total Findings: {total_findings}</li>\n                    <li>Critical: {critical_findings}</li>\n                    <li>High: {high_findings}</li>\n                    <li>Duration: {duration:.1f}s</li>\n                </ul>\n            </div>\n            \n            {scans_html}\n            \n            {compliance_html}\n            \n            {recommendations_html}\n        </body>\n        </html>\n        \" requires ' font-family', but it is omitted.\nMissing named argument for string format. Format \"\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <title>Security Scan Report</title>\n            <style>\n                body { font-family: Arial, sans-serif; margin: 40px; }\n                .header { background: #f0f0f0; padding: 20px; border-radius: 5px; }\n                .summary { background: #e8f5e8; padding: 15px; border-radius: 5px; margin: 20px 0; }\n                .failed { background: #ffe8e8; }\n                .finding { border-left: 4px solid #ccc; padding: 10px; margin: 10px 0; }\n                .critical { border-left-color: #d32f2f; }\n                .high { border-left-color: #f57c00; }\n                .medium { border-left-color: #fbc02d; }\n                .low { border-left-color: #388e3c; }\n            </style>\n        </head>\n        <body>\n            <div class=\"header\">\n                <h1>Security Scan Report</h1>\n                <p>Stage: {stage}</p>\n                <p>Timestamp: {timestamp}</p>\n                <p>Status: <strong>{status}</strong></p>\n            </div>\n            \n            <div class=\"summary {summary_class}\">\n                <h2>Summary</h2>\n                <ul>\n                    <li>Total Findings: {total_findings}</li>\n                    <li>Critical: {critical_findings}</li>\n                    <li>High: {high_findings}</li>\n                    <li>Duration: {duration:.1f}s</li>\n                </ul>\n            </div>\n            \n            {scans_html}\n            \n            {compliance_html}\n            \n            {recommendations_html}\n        </body>\n        </html>\n        \" requires ' background', but it is omitted.\nMissing named argument for string format. Format [\"\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <title>Security Scan Report</title>\n            <style>\n                body { font-family: Arial, sans-serif; margin: 40px; }\n                .header { background: #f0f0f0; padding: 20px; border-radius: 5px; }\n                .summary { background: #e8f5e8; padding: 15px; border-radius: 5px; margin: 20px 0; }\n                .failed { background: #ffe8e8; }\n                .finding { border-left: 4px solid #ccc; padding: 10px; margin: 10px 0; }\n                .critical { border-left-color: #d32f2f; }\n                .high { border-left-color: #f57c00; }\n                .medium { border-left-color: #fbc"},"location":{"path":"apps/backend/core/security/cicd_security.py","start_line":904,"end_line":916,"start_column":16,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/199/instances","dismissal_approved_by":null},{"number":198,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/198","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/198","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/call/wrong-named-argument","severity":"error","description":"Wrong name for an argument in a call","name":"py/call/wrong-named-argument","tags":["correctness","external/cwe/cwe-628","quality","reliability"],"full_description":"Using a named argument whose name does not correspond to a parameter of the called function or method, will result in a TypeError at runtime.","help":"# Wrong name for an argument in a call\nUsing a named argument whose name does not correspond to a parameter of the called function (or method), will result in a `TypeError` at runtime.\n\n\n## Recommendation\nCheck for typos in the name of the arguments and fix those. If the name is clearly different, then this suggests a logical error. The change required to correct the error will depend on whether the wrong argument has been specified or whether the wrong function (or method) has been specified.\n\n\n## References\n* Python Glossary: [Arguments](https://docs.python.org/2/glossary.html#term-argument).\n* Python Glossary: [Parameters](https://docs.python.org/glossary.html#term-parameter).\n* Python Programming FAQ: [ What is the difference between arguments and parameters?](https://docs.python.org/2/faq/programming.html#faq-argument-vs-parameter).\n* Common Weakness Enumeration: [CWE-628](https://cwe.mitre.org/data/definitions/628.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Keyword argument 'request_id' is not a supported parameter name of function log_security_event.\nKeyword argument 'severity' is not a supported parameter name of function log_security_event."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":832,"end_line":842,"start_column":13,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/198/instances","dismissal_approved_by":null},{"number":197,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/197","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/197","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unnecessary-pass","severity":"warning","description":"Unnecessary pass","name":"py/unnecessary-pass","tags":["maintainability","quality","useless-code"],"full_description":"Unnecessary 'pass' statement","help":"# Unnecessary pass\nA `pass` statement is only necessary when it is the only statement in a block (the list of statements forming part of a compound statement). This is because the purpose of the ` pass` statement is to allow empty blocks where they would otherwise be syntactically invalid. If the block already contains other statements then the `pass` statement is unnecessary.\n\n\n## Recommendation\nRemove the `pass` statement.\n\n\n## References\n* Python: [pass](http://docs.python.org/2/tutorial/controlflow.html#pass-statements).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Unnecessary 'pass' statement."},"location":{"path":"apps/backend/services/embedding_service.py","start_line":484,"end_line":484,"start_column":21,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/197/instances","dismissal_approved_by":null},{"number":196,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/196","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/196","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable suspicious_ranges is not used."},"location":{"path":"apps/backend/core/security/zero_trust.py","start_line":594,"end_line":594,"start_column":9,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/196/instances","dismissal_approved_by":null},{"number":195,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/195","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/195","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Variable metadata_json is not used."},"location":{"path":"apps/backend/services/vector_store.py","start_line":342,"end_line":342,"start_column":13,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/195/instances","dismissal_approved_by":null},{"number":194,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/194","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/194","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable metadata is not used."},"location":{"path":"apps/backend/core/security/secrets_manager.py","start_line":428,"end_line":428,"start_column":13,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/194/instances","dismissal_approved_by":null},{"number":193,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/193","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/193","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable lines is not used."},"location":{"path":"apps/backend/core/security/security_agent.py","start_line":358,"end_line":358,"start_column":17,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/193/instances","dismissal_approved_by":null},{"number":192,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-14T01:59:26Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/192","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/192","state":"fixed","fixed_at":"2025-08-14T01:59:25Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"7c58fd7b6b3bfe8383df382c75896a0971451d5a","message":{"text":"Variable error_occurred is not used."},"location":{"path":"apps/backend/core/metrics/prometheus_metrics.py","start_line":599,"end_line":599,"start_column":21,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/192/instances","dismissal_approved_by":null},{"number":191,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/191","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/191","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable block_until is not used."},"location":{"path":"apps/backend/core/performance/redis_rate_limiter.py","start_line":205,"end_line":205,"start_column":13,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/191/instances","dismissal_approved_by":null},{"number":190,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/190","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/190","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable profile_key is not used."},"location":{"path":"apps/backend/core/performance/redis_rate_limiter.py","start_line":202,"end_line":202,"start_column":13,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/190/instances","dismissal_approved_by":null},{"number":189,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/189","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/189","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable log_data is not used."},"location":{"path":"apps/backend/core/monitoring/production_logging.py","start_line":164,"end_line":164,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/189/instances","dismissal_approved_by":null},{"number":188,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/188","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/188","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable log_data is not used."},"location":{"path":"apps/backend/core/monitoring/production_logging.py","start_line":103,"end_line":103,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/188/instances","dismissal_approved_by":null},{"number":187,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/187","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/187","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable log_data is not used."},"location":{"path":"apps/backend/core/monitoring/production_logging.py","start_line":87,"end_line":87,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/187/instances","dismissal_approved_by":null},{"number":186,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/186","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/186","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable log_data is not used."},"location":{"path":"apps/backend/core/monitoring/production_logging.py","start_line":64,"end_line":64,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/186/instances","dismissal_approved_by":null},{"number":185,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/185","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/185","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable config is not used."},"location":{"path":"apps/backend/blueprints/personas_blueprint.py","start_line":146,"end_line":146,"start_column":9,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/185/instances","dismissal_approved_by":null},{"number":184,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/184","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/184","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable recent_anomalies is not used."},"location":{"path":"apps/backend/core/security/monitoring.py","start_line":782,"end_line":782,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/184/instances","dismissal_approved_by":null},{"number":183,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/183","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/183","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Variable memory_percent is not used."},"location":{"path":"apps/backend/core/security/monitoring.py","start_line":720,"end_line":720,"start_column":13,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/183/instances","dismissal_approved_by":null},{"number":182,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-14T01:59:26Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/182","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/182","state":"fixed","fixed_at":"2025-08-14T01:59:25Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"7c58fd7b6b3bfe8383df382c75896a0971451d5a","message":{"text":"Variable config is not used."},"location":{"path":"apps/backend/blueprints/monitoring_blueprint.py","start_line":252,"end_line":252,"start_column":9,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/182/instances","dismissal_approved_by":null},{"number":181,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/181","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/181","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Variable client is not used."},"location":{"path":"apps/backend/services/openai_integration.py","start_line":32,"end_line":32,"start_column":9,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/181/instances","dismissal_approved_by":null},{"number":180,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-15T03:34:13Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/180","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/180","state":"fixed","fixed_at":"2025-08-15T03:34:12Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"1c61b6f1bdee7fc653dbbe880086c58af666d9e7","message":{"text":"Variable security_middleware is not used."},"location":{"path":"apps/backend/main.py","start_line":202,"end_line":202,"start_column":5,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/180/instances","dismissal_approved_by":null},{"number":179,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/179","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/179","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-local-variable","severity":"note","description":"Unused local variable","name":"py/unused-local-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Local variable is defined but not used","help":"# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print \"A random number was written to random.txt\"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Variable config is not used."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":150,"end_line":150,"start_column":5,"end_column":11},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/179/instances","dismissal_approved_by":null},{"number":178,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-19T23:35:57Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/178","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/178","state":"fixed","fixed_at":"2025-08-19T23:35:55Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-global-variable","severity":"note","description":"Unused global variable","name":"py/unused-global-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Global variable is defined but not used","help":"# Unused global variable\nA global (module-level) variable is defined (by an assignment) but never used and is not explicitly made public by inclusion in the `__all__` list.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to only remove the left hand side of the assignment in line 9.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\nrandom_no = write_random_to_file()\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements), [The import statement](http://docs.python.org/reference/simple_stmts.html#the-import-statement).\n* Python Tutorial: [Importing \\* from a package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"306b24915d684f03aa64a68788e14ba202ee1d74","message":{"text":"The global variable 'ga_response' is not used."},"location":{"path":"apps/backend/core/validation/scope_detector.py","start_line":482,"end_line":482,"start_column":13,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/178/instances","dismissal_approved_by":null},{"number":177,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-19T23:35:57Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/177","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/177","state":"fixed","fixed_at":"2025-08-19T23:35:55Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/unused-global-variable","severity":"note","description":"Unused global variable","name":"py/unused-global-variable","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"Global variable is defined but not used","help":"# Unused global variable\nA global (module-level) variable is defined (by an assignment) but never used and is not explicitly made public by inclusion in the `__all__` list.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any \"special\" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to only remove the left hand side of the assignment in line 9.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open(\"random.txt\", \"w\") as file:\n        file.write(str(no))\n    return no\n\nrandom_no = write_random_to_file()\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements), [The import statement](http://docs.python.org/reference/simple_stmts.html#the-import-statement).\n* Python Tutorial: [Importing \\* from a package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"306b24915d684f03aa64a68788e14ba202ee1d74","message":{"text":"The global variable 'gasnelio_response' is not used."},"location":{"path":"apps/backend/core/validation/scope_detector.py","start_line":481,"end_line":481,"start_column":13,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/177/instances","dismissal_approved_by":null},{"number":176,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/176","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/176","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/uninitialized-local-variable","severity":"error","description":"Potentially uninitialized local variable","name":"py/uninitialized-local-variable","tags":["correctness","reliability"],"full_description":"Using a local variable before it is initialized causes an UnboundLocalError.","help":"# Potentially uninitialized local variable\nThis local variable may be used before it is defined. If a variable is assigned to in a function and not explicitly declared `global` or `nonlocal` then it is assumed to be a local variable. If it is used before it is defined then an `UnboundLocalError` will be raised.\n\n\n## Recommendation\nReview the code and consider the intended scope of the variable. Determine whether the variable should be global or local in scope. If a global variable is required then add a `global` statement, or in Python 3 you can use a `nonlocal` statement if the variable occurs in an enclosing function. Otherwise, ensure that the variable is defined before it is used.\n\n\n## Example\nThe following code includes different functions that use variables. `test1()` fails with an `UnboundLocalError` because the local variable `var` is used before it is initialized.\n\n\n```python\ndef test():\n    var = 1 \n    def print_var():\n        print var      # Use variable from outer scope\n    print_var()\n    print var \n\n\ndef test1():\n    var = 2 \n    def print_var():\n        print var       # Attempt to use variable from local scope. \n        var = 3         # Since this is not initialized yet, this results\n    print_var()         # in an UnboundLocalError\n    print var \n\n\ndef test2():\n    var = 2 \n    def print_var():\n        var = 3         # Initialize local version of the variable\n        print var       # Use variable from local scope.\n    print_var()         # Note that this local variable \"shadows\" the variable from\n    print var           # outer scope which makes code more difficult to interpret.\n\n\ndef test3():\n    var = 4\n    def print_var():\n        nonlocal var    # Use non-local variable from outer scope.\n        print var\n    print_var()\n    print var\n```\n\n## References\n* Python Standard Library: [Built-in Exceptions: UnboundLocalError](http://docs.python.org/library/exceptions.html#exceptions.UnboundLocalError).\n* Python Frequently Asked Questions: [Why am I getting an UnboundLocalError when the variable has a value?](http://docs.python.org/2/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value).\n* Python Course: [Global and Local Variables](http://www.python-course.eu/global_vs_local_variables.php).\n* Python Language Reference: [The global statement](http://docs.python.org/2.7/reference/simple_stmts.html#index-54), [The nonlocal statement](http://docs.python.org/3.3/reference/simple_stmts.html#index-43).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Local variable 'random' may be used before it is initialized."},"location":{"path":"apps/backend/core/personas/ga_empathetic.py","start_line":288,"end_line":288,"start_column":16,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/176/instances","dismissal_approved_by":null},{"number":175,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/175","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/175","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value.\nThis log entry depends on a user-provided value.\nThis log entry depends on a user-provided value.\nThis log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/personas_blueprint.py","start_line":323,"end_line":323,"start_column":21,"end_column":82},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/175/instances","dismissal_approved_by":null},{"number":174,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/174","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/174","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/personas_blueprint.py","start_line":259,"end_line":259,"start_column":21,"end_column":86},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/174/instances","dismissal_approved_by":null},{"number":173,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/173","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/173","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/health_blueprint.py","start_line":365,"end_line":365,"start_column":25,"end_column":74},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/173/instances","dismissal_approved_by":null},{"number":172,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/172","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/172","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/feedback_blueprint.py","start_line":339,"end_line":339,"start_column":21,"end_column":84},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/172/instances","dismissal_approved_by":null},{"number":171,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/171","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/171","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/feedback_blueprint.py","start_line":304,"end_line":304,"start_column":21,"end_column":88},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/171/instances","dismissal_approved_by":null},{"number":170,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/170","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/170","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/feedback_blueprint.py","start_line":167,"end_line":167,"start_column":21,"end_column":90},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/170/instances","dismissal_approved_by":null},{"number":169,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/169","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/169","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":621,"end_line":621,"start_column":21,"end_column":111},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/169/instances","dismissal_approved_by":null},{"number":168,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/168","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/168","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":598,"end_line":598,"start_column":28,"end_column":80},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/168/instances","dismissal_approved_by":null},{"number":167,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/167","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/167","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":313,"end_line":313,"start_column":28,"end_column":91},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/167/instances","dismissal_approved_by":null},{"number":166,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/166","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/166","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":309,"end_line":309,"start_column":21,"end_column":87},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/166/instances","dismissal_approved_by":null},{"number":165,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/165","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/165","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"This log entry depends on a user-provided value.\nThis log entry depends on a user-provided value.\nThis log entry depends on a user-provided value.\nThis log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":282,"end_line":282,"start_column":21,"end_column":87},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/165/instances","dismissal_approved_by":null},{"number":164,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-19T23:42:08Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/164","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/164","state":"fixed","fixed_at":"2025-08-19T23:42:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/log-injection","severity":"error","description":"Log Injection","name":"py/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled data is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log Injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user to create the appearance of multiple log entries. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are plain text then line breaks should be removed from user input, using for example `replace(old, new)` or similar. Care should also be taken that user input is clearly marked in log entries, and that a malicious user cannot cause confusion in other ways.\n\nFor log entries that will be displayed in HTML, user input should be HTML encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the example, the name provided by the user is recorded using the log output function (`logging.info` or `app.logger.info`, etc.). In these four cases, the name provided by the user is not provided The processing is recorded. If a malicious user provides `Guest%0D%0AUser name: Admin` as a parameter, the log entry will be divided into two lines, the first line is `User name: Guest` code&gt;, the second line is `User name: Admin`.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nfrom django.utils.log import request_logger\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/bad1')\ndef bad1():\n    name = request.args.get('name')\n    app.logger.info('User name: ' + name) # Bad\n    return 'bad1'\n\n@app.route('/bad2')\ndef bad2():\n    name = request.args.get('name')\n    logging.info('User name: ' + name) # Bad\n    return 'bad2'\n\n@app.route('/bad3')\ndef bad3():\n    name = request.args.get('name')\n    request_logger.warn('User name: ' + name) # Bad\n    return 'bad3'\n\n@app.route('/bad4')\ndef bad4():\n    name = request.args.get('name')\n    logtest = logging.getLogger('test')\n    logtest.debug('User name: ' + name) # Bad\n    return 'bad4'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\nIn a good example, the program uses the `replace` function to provide parameter processing to the user, and replace `\\r\\n` and `\\n` with empty characters. To a certain extent, the occurrence of log injection vulnerabilities is reduced.\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@Desc   ：Log Injection\n\"\"\"\nfrom flask import Flask\nfrom flask import request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/good1')\ndef good1():\n    name = request.args.get('name')\n    name = name.replace('\\r\\n','').replace('\\n','')\n    logging.info('User name: ' + name) # Good\n    return 'good1'\n\nif __name__ == '__main__':\n    app.debug = True\n    handler = logging.FileHandler('log')\n    app.logger.addHandler(handler)\n    app.run()\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"8e66d8d1aa48a9a71d50ba1b767205bfd5847272","message":{"text":"This log entry depends on a user-provided value."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":142,"end_line":142,"start_column":20,"end_column":80},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/164/instances","dismissal_approved_by":null},{"number":163,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-13T01:41:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/163","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/163","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/overly-permissive-file","severity":"warning","description":"Overly permissive file permissions","name":"py/overly-permissive-file","tags":["external/cwe/cwe-732","security"],"full_description":"Allowing files to be readable or writable by users other than the owner may allow sensitive information to be accessed.","help":"# Overly permissive file permissions\nWhen creating a file, POSIX systems allow permissions to be specified for owner, group and others separately. Permissions should be kept as strict as possible, preventing access to the files contents by other users.\n\n\n## Recommendation\nRestrict the file permissions of files to prevent any but the owner being able to read or write to that file\n\n\n## References\n* Wikipedia: [File system permissions](https://en.wikipedia.org/wiki/File_system_permissions).\n* Common Weakness Enumeration: [CWE-732](https://cwe.mitre.org/data/definitions/732.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Overly permissive mask in chmod sets file to world readable."},"location":{"path":"apps/backend/core/security/cicd_security.py","start_line":957,"end_line":957,"start_column":13,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/163/instances","dismissal_approved_by":null},{"number":162,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/162","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/162","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/monitoring_blueprint.py","start_line":332,"end_line":335,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/162/instances","dismissal_approved_by":null},{"number":161,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/161","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/161","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/monitoring_blueprint.py","start_line":195,"end_line":195,"start_column":24,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/161/instances","dismissal_approved_by":null},{"number":160,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-14T01:59:26Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/160","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/160","state":"fixed","fixed_at":"2025-08-14T01:59:25Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"7c58fd7b6b3bfe8383df382c75896a0971451d5a","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/metrics_blueprint.py","start_line":408,"end_line":408,"start_column":16,"end_column":94},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/160/instances","dismissal_approved_by":null},{"number":159,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/159","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/159","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/core/security/integration_example.py","start_line":315,"end_line":319,"start_column":28,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/159/instances","dismissal_approved_by":null},{"number":158,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/158","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/158","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/core/security/integration_example.py","start_line":286,"end_line":290,"start_column":28,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/158/instances","dismissal_approved_by":null},{"number":157,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/157","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/157","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/core/security/integration_example.py","start_line":250,"end_line":254,"start_column":28,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/157/instances","dismissal_approved_by":null},{"number":156,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/156","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/156","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/core/security/integration_example.py","start_line":232,"end_line":236,"start_column":28,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/156/instances","dismissal_approved_by":null},{"number":155,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/155","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/155","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/health_blueprint.py","start_line":402,"end_line":405,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/155/instances","dismissal_approved_by":null},{"number":154,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/154","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/154","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/health_blueprint.py","start_line":372,"end_line":372,"start_column":28,"end_column":73},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/154/instances","dismissal_approved_by":null},{"number":153,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/153","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/153","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/health_blueprint.py","start_line":275,"end_line":279,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/153/instances","dismissal_approved_by":null},{"number":152,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/152","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/152","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/health_blueprint.py","start_line":199,"end_line":199,"start_column":24,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/152/instances","dismissal_approved_by":null},{"number":151,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/151","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/151","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":999,"end_line":1003,"start_column":24,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/151/instances","dismissal_approved_by":null},{"number":150,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/150","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/150","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"apps/backend/blueprints/chat_blueprint.py","start_line":615,"end_line":619,"start_column":28,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/150/instances","dismissal_approved_by":null},{"number":149,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-19T03:53:56Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/149","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/149","state":"fixed","fixed_at":"2025-08-19T03:53:55Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/weak-sensitive-data-hashing","severity":"warning","description":"Use of a broken or weak cryptographic hashing algorithm on sensitive data","name":"py/weak-sensitive-data-hashing","tags":["external/cwe/cwe-327","external/cwe/cwe-328","external/cwe/cwe-916","security"],"full_description":"Using broken or weak cryptographic hashing algorithms can compromise security.","help":"# Use of a broken or weak cryptographic hashing algorithm on sensitive data\nUsing a broken or weak cryptographic hash function can leave data vulnerable, and should not be used in security related code.\n\nA strong cryptographic hash function should be resistant to:\n\n* pre-image attacks: if you know a hash value `h(x)`, you should not be able to easily find the input `x`.\n* collision attacks: if you know a hash value `h(x)`, you should not be able to easily find a different input `y` with the same hash value `h(x) = h(y)`.\nIn cases with a limited input space, such as for passwords, the hash function also needs to be computationally expensive to be resistant to brute-force attacks. Passwords should also have an unique salt applied before hashing, but that is not considered by this query.\n\nAs an example, both MD5 and SHA-1 are known to be vulnerable to collision attacks.\n\nSince it's OK to use a weak cryptographic hash function in a non-security context, this query only alerts when these are used to hash sensitive data (such as passwords, certificates, usernames).\n\nUse of broken or weak cryptographic algorithms that are not hashing algorithms, is handled by the `py/weak-cryptographic-algorithm` query.\n\n\n## Recommendation\nEnsure that you use a strong, modern cryptographic hash function:\n\n* such as Argon2, scrypt, bcrypt, or PBKDF2 for passwords and other data with limited input space.\n* such as SHA-2, or SHA-3 in other cases.\n\n## Example\nThe following example shows two functions for checking whether the hash of a certificate matches a known value -- to prevent tampering. The first function uses MD5 that is known to be vulnerable to collision attacks. The second function uses SHA-256 that is a strong cryptographic hashing function.\n\n\n```python\nimport hashlib\n\ndef certificate_matches_known_hash_bad(certificate, known_hash):\n    hash = hashlib.md5(certificate).hexdigest() # BAD\n    return hash == known_hash\n\ndef certificate_matches_known_hash_good(certificate, known_hash):\n    hash = hashlib.sha256(certificate).hexdigest() # GOOD\n    return hash == known_hash\n\n```\n\n## Example\nThe following example shows two functions for hashing passwords. The first function uses SHA-256 to hash passwords. Although SHA-256 is a strong cryptographic hash function, it is not suitable for password hashing since it is not computationally expensive.\n\n\n```python\nimport hashlib\n\ndef get_password_hash(password: str, salt: str):\n    return hashlib.sha256(password + salt).hexdigest() # BAD\n\n```\nThe second function uses Argon2 (through the `argon2-cffi` PyPI package), which is a strong password hashing algorithm (and includes a per-password salt by default).\n\n\n```python\nfrom argon2 import PasswordHasher\n\ndef get_initial_hash(password: str):\n    ph = PasswordHasher()\n    return ph.hash(password) # GOOD\n\ndef check_password(password: str, known_hash):\n    ph = PasswordHasher()\n    return ph.verify(known_hash, password) # GOOD\n\n```\n\n## References\n* OWASP: [Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n* Common Weakness Enumeration: [CWE-327](https://cwe.mitre.org/data/definitions/327.html).\n* Common Weakness Enumeration: [CWE-328](https://cwe.mitre.org/data/definitions/328.html).\n* Common Weakness Enumeration: [CWE-916](https://cwe.mitre.org/data/definitions/916.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"fixed","commit_sha":"7165d6cd08a09f6a15b03b39b84f60b7113a2c58","message":{"text":"Sensitive data (secret) is used in a hashing algorithm (MD5) that is insecure.\nSensitive data (secret) is used in a hashing algorithm (MD5) that is insecure."},"location":{"path":"apps/backend/core/security/security_agent.py","start_line":553,"end_line":553,"start_column":28,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/149/instances","dismissal_approved_by":null},{"number":148,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-19T23:35:57Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/148","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/148","state":"fixed","fixed_at":"2025-08-19T23:35:55Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/weak-sensitive-data-hashing","severity":"warning","description":"Use of a broken or weak cryptographic hashing algorithm on sensitive data","name":"py/weak-sensitive-data-hashing","tags":["external/cwe/cwe-327","external/cwe/cwe-328","external/cwe/cwe-916","security"],"full_description":"Using broken or weak cryptographic hashing algorithms can compromise security.","help":"# Use of a broken or weak cryptographic hashing algorithm on sensitive data\nUsing a broken or weak cryptographic hash function can leave data vulnerable, and should not be used in security related code.\n\nA strong cryptographic hash function should be resistant to:\n\n* pre-image attacks: if you know a hash value `h(x)`, you should not be able to easily find the input `x`.\n* collision attacks: if you know a hash value `h(x)`, you should not be able to easily find a different input `y` with the same hash value `h(x) = h(y)`.\nIn cases with a limited input space, such as for passwords, the hash function also needs to be computationally expensive to be resistant to brute-force attacks. Passwords should also have an unique salt applied before hashing, but that is not considered by this query.\n\nAs an example, both MD5 and SHA-1 are known to be vulnerable to collision attacks.\n\nSince it's OK to use a weak cryptographic hash function in a non-security context, this query only alerts when these are used to hash sensitive data (such as passwords, certificates, usernames).\n\nUse of broken or weak cryptographic algorithms that are not hashing algorithms, is handled by the `py/weak-cryptographic-algorithm` query.\n\n\n## Recommendation\nEnsure that you use a strong, modern cryptographic hash function:\n\n* such as Argon2, scrypt, bcrypt, or PBKDF2 for passwords and other data with limited input space.\n* such as SHA-2, or SHA-3 in other cases.\n\n## Example\nThe following example shows two functions for checking whether the hash of a certificate matches a known value -- to prevent tampering. The first function uses MD5 that is known to be vulnerable to collision attacks. The second function uses SHA-256 that is a strong cryptographic hashing function.\n\n\n```python\nimport hashlib\n\ndef certificate_matches_known_hash_bad(certificate, known_hash):\n    hash = hashlib.md5(certificate).hexdigest() # BAD\n    return hash == known_hash\n\ndef certificate_matches_known_hash_good(certificate, known_hash):\n    hash = hashlib.sha256(certificate).hexdigest() # GOOD\n    return hash == known_hash\n\n```\n\n## Example\nThe following example shows two functions for hashing passwords. The first function uses SHA-256 to hash passwords. Although SHA-256 is a strong cryptographic hash function, it is not suitable for password hashing since it is not computationally expensive.\n\n\n```python\nimport hashlib\n\ndef get_password_hash(password: str, salt: str):\n    return hashlib.sha256(password + salt).hexdigest() # BAD\n\n```\nThe second function uses Argon2 (through the `argon2-cffi` PyPI package), which is a strong password hashing algorithm (and includes a per-password salt by default).\n\n\n```python\nfrom argon2 import PasswordHasher\n\ndef get_initial_hash(password: str):\n    ph = PasswordHasher()\n    return ph.hash(password) # GOOD\n\ndef check_password(password: str, known_hash):\n    ph = PasswordHasher()\n    return ph.verify(known_hash, password) # GOOD\n\n```\n\n## References\n* OWASP: [Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n* Common Weakness Enumeration: [CWE-327](https://cwe.mitre.org/data/definitions/327.html).\n* Common Weakness Enumeration: [CWE-328](https://cwe.mitre.org/data/definitions/328.html).\n* Common Weakness Enumeration: [CWE-916](https://cwe.mitre.org/data/definitions/916.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"python\"}","category":"/language:python","state":"fixed","commit_sha":"306b24915d684f03aa64a68788e14ba202ee1d74","message":{"text":"Sensitive data (id) is used in a hashing algorithm (MD5) that is insecure."},"location":{"path":"apps/backend/core/validation/educational_qa_framework.py","start_line":1109,"end_line":1109,"start_column":37,"end_column":53},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/148/instances","dismissal_approved_by":null},{"number":147,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-19T03:53:56Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/147","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/147","state":"fixed","fixed_at":"2025-08-19T03:53:55Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/weak-sensitive-data-hashing","severity":"warning","description":"Use of a broken or weak cryptographic hashing algorithm on sensitive data","name":"py/weak-sensitive-data-hashing","tags":["external/cwe/cwe-327","external/cwe/cwe-328","external/cwe/cwe-916","security"],"full_description":"Using broken or weak cryptographic hashing algorithms can compromise security.","help":"# Use of a broken or weak cryptographic hashing algorithm on sensitive data\nUsing a broken or weak cryptographic hash function can leave data vulnerable, and should not be used in security related code.\n\nA strong cryptographic hash function should be resistant to:\n\n* pre-image attacks: if you know a hash value `h(x)`, you should not be able to easily find the input `x`.\n* collision attacks: if you know a hash value `h(x)`, you should not be able to easily find a different input `y` with the same hash value `h(x) = h(y)`.\nIn cases with a limited input space, such as for passwords, the hash function also needs to be computationally expensive to be resistant to brute-force attacks. Passwords should also have an unique salt applied before hashing, but that is not considered by this query.\n\nAs an example, both MD5 and SHA-1 are known to be vulnerable to collision attacks.\n\nSince it's OK to use a weak cryptographic hash function in a non-security context, this query only alerts when these are used to hash sensitive data (such as passwords, certificates, usernames).\n\nUse of broken or weak cryptographic algorithms that are not hashing algorithms, is handled by the `py/weak-cryptographic-algorithm` query.\n\n\n## Recommendation\nEnsure that you use a strong, modern cryptographic hash function:\n\n* such as Argon2, scrypt, bcrypt, or PBKDF2 for passwords and other data with limited input space.\n* such as SHA-2, or SHA-3 in other cases.\n\n## Example\nThe following example shows two functions for checking whether the hash of a certificate matches a known value -- to prevent tampering. The first function uses MD5 that is known to be vulnerable to collision attacks. The second function uses SHA-256 that is a strong cryptographic hashing function.\n\n\n```python\nimport hashlib\n\ndef certificate_matches_known_hash_bad(certificate, known_hash):\n    hash = hashlib.md5(certificate).hexdigest() # BAD\n    return hash == known_hash\n\ndef certificate_matches_known_hash_good(certificate, known_hash):\n    hash = hashlib.sha256(certificate).hexdigest() # GOOD\n    return hash == known_hash\n\n```\n\n## Example\nThe following example shows two functions for hashing passwords. The first function uses SHA-256 to hash passwords. Although SHA-256 is a strong cryptographic hash function, it is not suitable for password hashing since it is not computationally expensive.\n\n\n```python\nimport hashlib\n\ndef get_password_hash(password: str, salt: str):\n    return hashlib.sha256(password + salt).hexdigest() # BAD\n\n```\nThe second function uses Argon2 (through the `argon2-cffi` PyPI package), which is a strong password hashing algorithm (and includes a per-password salt by default).\n\n\n```python\nfrom argon2 import PasswordHasher\n\ndef get_initial_hash(password: str):\n    ph = PasswordHasher()\n    return ph.hash(password) # GOOD\n\ndef check_password(password: str, known_hash):\n    ph = PasswordHasher()\n    return ph.verify(known_hash, password) # GOOD\n\n```\n\n## References\n* OWASP: [Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n* Common Weakness Enumeration: [CWE-327](https://cwe.mitre.org/data/definitions/327.html).\n* Common Weakness Enumeration: [CWE-328](https://cwe.mitre.org/data/definitions/328.html).\n* Common Weakness Enumeration: [CWE-916](https://cwe.mitre.org/data/definitions/916.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"fixed","commit_sha":"7165d6cd08a09f6a15b03b39b84f60b7113a2c58","message":{"text":"Sensitive data (secret) is used in a hashing algorithm (MD5) that is insecure."},"location":{"path":"apps/backend/core/security/cicd_security.py","start_line":267,"end_line":267,"start_column":54,"end_column":101},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/147/instances","dismissal_approved_by":null},{"number":146,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-19T03:53:56Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/146","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/146","state":"fixed","fixed_at":"2025-08-19T03:53:55Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"fixed","commit_sha":"7165d6cd08a09f6a15b03b39b84f60b7113a2c58","message":{"text":"This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."},"location":{"path":"apps/backend/core/security/secrets_manager.py","start_line":434,"end_line":434,"start_column":45,"end_column":96},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/146/instances","dismissal_approved_by":null},{"number":145,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-19T03:53:56Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/145","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/145","state":"fixed","fixed_at":"2025-08-19T03:53:55Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"fixed","commit_sha":"7165d6cd08a09f6a15b03b39b84f60b7113a2c58","message":{"text":"This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."},"location":{"path":"apps/backend/core/security/secrets_manager.py","start_line":432,"end_line":432,"start_column":46,"end_column":99},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/145/instances","dismissal_approved_by":null},{"number":144,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-09-19T23:44:57Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/144","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/144","state":"dismissed","fixed_at":null,"dismissed_by":{"login":"AnalineS","id":11664545,"node_id":"MDQ6VXNlcjExNjY0NTQ1","avatar_url":"https://avatars.githubusercontent.com/u/11664545?v=4","gravatar_id":"","url":"https://api.github.com/users/AnalineS","html_url":"https://github.com/AnalineS","followers_url":"https://api.github.com/users/AnalineS/followers","following_url":"https://api.github.com/users/AnalineS/following{/other_user}","gists_url":"https://api.github.com/users/AnalineS/gists{/gist_id}","starred_url":"https://api.github.com/users/AnalineS/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AnalineS/subscriptions","organizations_url":"https://api.github.com/users/AnalineS/orgs","repos_url":"https://api.github.com/users/AnalineS/repos","events_url":"https://api.github.com/users/AnalineS/events{/privacy}","received_events_url":"https://api.github.com/users/AnalineS/received_events","type":"User","user_view_type":"public","site_admin":false},"dismissed_at":"2025-09-19T23:44:57Z","dismissed_reason":"false positive","dismissed_comment":"Problema corrigido - logs sensíveis agora são sanitizados antes do registro. Dados sensíveis (secret_name, details, error) removidos dos logs externos, mantendo apenas timestamp, operation, success e client_info.","rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"dismissed","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."},"location":{"path":"apps/backend/core/security/secrets_manager.py","start_line":406,"end_line":406,"start_column":30,"end_column":71},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/144/instances","dismissal_approved_by":null},{"number":143,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-09-19T23:55:34Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/143","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/143","state":"dismissed","fixed_at":null,"dismissed_by":{"login":"AnalineS","id":11664545,"node_id":"MDQ6VXNlcjExNjY0NTQ1","avatar_url":"https://avatars.githubusercontent.com/u/11664545?v=4","gravatar_id":"","url":"https://api.github.com/users/AnalineS","html_url":"https://github.com/AnalineS","followers_url":"https://api.github.com/users/AnalineS/followers","following_url":"https://api.github.com/users/AnalineS/following{/other_user}","gists_url":"https://api.github.com/users/AnalineS/gists{/gist_id}","starred_url":"https://api.github.com/users/AnalineS/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AnalineS/subscriptions","organizations_url":"https://api.github.com/users/AnalineS/orgs","repos_url":"https://api.github.com/users/AnalineS/repos","events_url":"https://api.github.com/users/AnalineS/events{/privacy}","received_events_url":"https://api.github.com/users/AnalineS/received_events","type":"User","user_view_type":"public","site_admin":false},"dismissed_at":"2025-09-19T23:55:34Z","dismissed_reason":"false positive","dismissed_comment":"Problema corrigido - erros de rotação sanitizados e nomes de secrets mascarados. Logs externos seguros mantendo auditoria interna completa.","rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"dismissed","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."},"location":{"path":"apps/backend/core/security/secrets_manager.py","start_line":336,"end_line":336,"start_column":39,"end_column":81},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/143/instances","dismissal_approved_by":null},{"number":142,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-09-19T23:55:26Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/142","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/142","state":"dismissed","fixed_at":null,"dismissed_by":{"login":"AnalineS","id":11664545,"node_id":"MDQ6VXNlcjExNjY0NTQ1","avatar_url":"https://avatars.githubusercontent.com/u/11664545?v=4","gravatar_id":"","url":"https://api.github.com/users/AnalineS","html_url":"https://github.com/AnalineS","followers_url":"https://api.github.com/users/AnalineS/followers","following_url":"https://api.github.com/users/AnalineS/following{/other_user}","gists_url":"https://api.github.com/users/AnalineS/gists{/gist_id}","starred_url":"https://api.github.com/users/AnalineS/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AnalineS/subscriptions","organizations_url":"https://api.github.com/users/AnalineS/orgs","repos_url":"https://api.github.com/users/AnalineS/repos","events_url":"https://api.github.com/users/AnalineS/events{/privacy}","received_events_url":"https://api.github.com/users/AnalineS/received_events","type":"User","user_view_type":"public","site_admin":false},"dismissed_at":"2025-09-19T23:55:26Z","dismissed_reason":"false positive","dismissed_comment":"Problema corrigido - nomes de secrets mascarados com hash SHA256 para logging seguro de operações de rotação.","rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"dismissed","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."},"location":{"path":"apps/backend/core/security/secrets_manager.py","start_line":332,"end_line":332,"start_column":38,"end_column":80},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/142/instances","dismissal_approved_by":null},{"number":141,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-19T03:53:56Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/141","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/141","state":"fixed","fixed_at":"2025-08-19T03:53:55Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"fixed","commit_sha":"7165d6cd08a09f6a15b03b39b84f60b7113a2c58","message":{"text":"This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."},"location":{"path":"apps/backend/core/security/security_framework.py","start_line":143,"end_line":143,"start_column":38,"end_column":81},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/141/instances","dismissal_approved_by":null},{"number":140,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-09-19T23:55:19Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/140","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/140","state":"dismissed","fixed_at":null,"dismissed_by":{"login":"AnalineS","id":11664545,"node_id":"MDQ6VXNlcjExNjY0NTQ1","avatar_url":"https://avatars.githubusercontent.com/u/11664545?v=4","gravatar_id":"","url":"https://api.github.com/users/AnalineS","html_url":"https://github.com/AnalineS","followers_url":"https://api.github.com/users/AnalineS/followers","following_url":"https://api.github.com/users/AnalineS/following{/other_user}","gists_url":"https://api.github.com/users/AnalineS/gists{/gist_id}","starred_url":"https://api.github.com/users/AnalineS/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AnalineS/subscriptions","organizations_url":"https://api.github.com/users/AnalineS/orgs","repos_url":"https://api.github.com/users/AnalineS/repos","events_url":"https://api.github.com/users/AnalineS/events{/privacy}","received_events_url":"https://api.github.com/users/AnalineS/received_events","type":"User","user_view_type":"public","site_admin":false},"dismissed_at":"2025-09-19T23:55:19Z","dismissed_reason":"false positive","dismissed_comment":"Problema corrigido - logs de erro sanitizados removendo detalhes internos e nomes de secrets mascarados com hash.","rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"dismissed","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text."},"location":{"path":"apps/backend/core/security/secrets_manager.py","start_line":306,"end_line":306,"start_column":39,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/140/instances","dismissal_approved_by":null},{"number":139,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-09-19T23:55:09Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/139","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/139","state":"dismissed","fixed_at":null,"dismissed_by":{"login":"AnalineS","id":11664545,"node_id":"MDQ6VXNlcjExNjY0NTQ1","avatar_url":"https://avatars.githubusercontent.com/u/11664545?v=4","gravatar_id":"","url":"https://api.github.com/users/AnalineS","html_url":"https://github.com/AnalineS","followers_url":"https://api.github.com/users/AnalineS/followers","following_url":"https://api.github.com/users/AnalineS/following{/other_user}","gists_url":"https://api.github.com/users/AnalineS/gists{/gist_id}","starred_url":"https://api.github.com/users/AnalineS/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AnalineS/subscriptions","organizations_url":"https://api.github.com/users/AnalineS/orgs","repos_url":"https://api.github.com/users/AnalineS/repos","events_url":"https://api.github.com/users/AnalineS/events{/privacy}","received_events_url":"https://api.github.com/users/AnalineS/received_events","type":"User","user_view_type":"public","site_admin":false},"dismissed_at":"2025-09-19T23:55:09Z","dismissed_reason":"false positive","dismissed_comment":"Problema corrigido - nomes de secrets mascarados com hash SHA256 para prevenir exposição de arquitetura do sistema.","rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"dismissed","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text."},"location":{"path":"apps/backend/core/security/secrets_manager.py","start_line":278,"end_line":278,"start_column":45,"end_column":72},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/139/instances","dismissal_approved_by":null},{"number":138,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-09-19T23:54:59Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/138","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/138","state":"dismissed","fixed_at":null,"dismissed_by":{"login":"AnalineS","id":11664545,"node_id":"MDQ6VXNlcjExNjY0NTQ1","avatar_url":"https://avatars.githubusercontent.com/u/11664545?v=4","gravatar_id":"","url":"https://api.github.com/users/AnalineS","html_url":"https://github.com/AnalineS","followers_url":"https://api.github.com/users/AnalineS/followers","following_url":"https://api.github.com/users/AnalineS/following{/other_user}","gists_url":"https://api.github.com/users/AnalineS/gists{/gist_id}","starred_url":"https://api.github.com/users/AnalineS/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AnalineS/subscriptions","organizations_url":"https://api.github.com/users/AnalineS/orgs","repos_url":"https://api.github.com/users/AnalineS/repos","events_url":"https://api.github.com/users/AnalineS/events{/privacy}","received_events_url":"https://api.github.com/users/AnalineS/received_events","type":"User","user_view_type":"public","site_admin":false},"dismissed_at":"2025-09-19T23:54:59Z","dismissed_reason":"false positive","dismissed_comment":"Problema corrigido - mensagens de erro sanitizadas e nomes de secrets mascarados com hash. Detalhes internos removidos dos logs externos.","rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"dismissed","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text."},"location":{"path":"apps/backend/core/security/secrets_manager.py","start_line":247,"end_line":247,"start_column":39,"end_column":78},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/138/instances","dismissal_approved_by":null},{"number":137,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-09-19T23:54:50Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/137","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/137","state":"dismissed","fixed_at":null,"dismissed_by":{"login":"AnalineS","id":11664545,"node_id":"MDQ6VXNlcjExNjY0NTQ1","avatar_url":"https://avatars.githubusercontent.com/u/11664545?v=4","gravatar_id":"","url":"https://api.github.com/users/AnalineS","html_url":"https://github.com/AnalineS","followers_url":"https://api.github.com/users/AnalineS/followers","following_url":"https://api.github.com/users/AnalineS/following{/other_user}","gists_url":"https://api.github.com/users/AnalineS/gists{/gist_id}","starred_url":"https://api.github.com/users/AnalineS/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AnalineS/subscriptions","organizations_url":"https://api.github.com/users/AnalineS/orgs","repos_url":"https://api.github.com/users/AnalineS/repos","events_url":"https://api.github.com/users/AnalineS/events{/privacy}","received_events_url":"https://api.github.com/users/AnalineS/received_events","type":"User","user_view_type":"public","site_admin":false},"dismissed_at":"2025-09-19T23:54:50Z","dismissed_reason":"false positive","dismissed_comment":"Problema corrigido - nomes de secrets agora mascarados com hash SHA256. Logs externos usam secret_xxxxxxxx em vez do nome real.","rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"dismissed","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text."},"location":{"path":"apps/backend/core/security/secrets_manager.py","start_line":243,"end_line":243,"start_column":38,"end_column":77},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/137/instances","dismissal_approved_by":null},{"number":136,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/136","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/136","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"This expression logs sensitive data (password) as clear text."},"location":{"path":"apps/backend/core/performance/redis_rate_limiter.py","start_line":77,"end_line":77,"start_column":29,"end_column":115},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/136/instances","dismissal_approved_by":null},{"number":135,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-09-20T00:06:07Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/135","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/135","state":"dismissed","fixed_at":null,"dismissed_by":{"login":"AnalineS","id":11664545,"node_id":"MDQ6VXNlcjExNjY0NTQ1","avatar_url":"https://avatars.githubusercontent.com/u/11664545?v=4","gravatar_id":"","url":"https://api.github.com/users/AnalineS","html_url":"https://github.com/AnalineS","followers_url":"https://api.github.com/users/AnalineS/followers","following_url":"https://api.github.com/users/AnalineS/following{/other_user}","gists_url":"https://api.github.com/users/AnalineS/gists{/gist_id}","starred_url":"https://api.github.com/users/AnalineS/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AnalineS/subscriptions","organizations_url":"https://api.github.com/users/AnalineS/orgs","repos_url":"https://api.github.com/users/AnalineS/repos","events_url":"https://api.github.com/users/AnalineS/events{/privacy}","received_events_url":"https://api.github.com/users/AnalineS/received_events","type":"User","user_view_type":"public","site_admin":false},"dismissed_at":"2025-09-20T00:06:07Z","dismissed_reason":"false positive","dismissed_comment":"Problema corrigido - nomes de seção agora mascarados com hash SHA256 no código de teste. Logs seguros usando section_xxxxxxxx em vez do nome real da seção.","rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"dismissed","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (private) as clear text."},"location":{"path":"apps/backend/core/rag/knowledge_base.py","start_line":545,"end_line":545,"start_column":19,"end_column":88},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/135/instances","dismissal_approved_by":null},{"number":134,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/134","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/134","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This expression logs sensitive data (secret) as clear text."},"location":{"path":"apps/backend/core/security/integration_example.py","start_line":138,"end_line":138,"start_column":64,"end_column":100},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/134/instances","dismissal_approved_by":null},{"number":133,"created_at":"2025-08-13T01:41:06Z","updated_at":"2025-08-31T00:30:33Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/133","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/133","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/clear-text-logging-sensitive-data","severity":"error","description":"Clear-text logging of sensitive information","name":"py/clear-text-logging-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"python\"}","category":"/language:python/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"This expression logs sensitive data (password) as clear text."},"location":{"path":"apps/backend/blueprints/health_blueprint.py","start_line":198,"end_line":198,"start_column":21,"end_column":83},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/133/instances","dismissal_approved_by":null},{"number":132,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/132","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/132","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"The initial value of result is unused, since it is always overwritten."},"location":{"path":"apps/frontend-nextjs/src/utils/certificationSecurity.ts","start_line":678,"end_line":678,"start_column":9,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/132/instances","dismissal_approved_by":null},{"number":131,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/131","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/131","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"The initial value of confidence is unused, since it is always overwritten."},"location":{"path":"apps/frontend-nextjs/src/components/personas/PersonaSelector.tsx","start_line":148,"end_line":148,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/131/instances","dismissal_approved_by":null},{"number":130,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/130","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/130","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"The initial value of personaId is unused, since it is always overwritten."},"location":{"path":"apps/frontend-nextjs/src/components/personas/PersonaSelector.tsx","start_line":147,"end_line":147,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/130/instances","dismissal_approved_by":null},{"number":129,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T23:47:03Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/129","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/129","state":"fixed","fixed_at":"2025-08-13T23:47:02Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-property","severity":"warning","description":"Useless assignment to property","name":"js/useless-assignment-to-property","tags":["maintainability","quality","useless-code"],"full_description":"An assignment to a property whose value is always overwritten has no effect.","help":"# Useless assignment to property\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"52efec1c46b1e0b80cd63137f2d86f631839897f","message":{"text":"This write to property 'onBlur' is useless, since another property write always overrides it."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/NavigationHeader.tsx","start_line":403,"end_line":410,"start_column":21,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/129/instances","dismissal_approved_by":null},{"number":128,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/128","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/128","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import FraudAlert."},"location":{"path":"apps/frontend-nextjs/src/utils/securityMonitoring.ts","start_line":15,"end_line":15,"start_column":1,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/128/instances","dismissal_approved_by":null},{"number":127,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/127","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/127","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable allPassed."},"location":{"path":"apps/frontend-nextjs/src/utils/qaTestRunner.ts","start_line":225,"end_line":225,"start_column":11,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/127/instances","dismissal_approved_by":null},{"number":126,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/126","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/126","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ClinicalCase."},"location":{"path":"apps/frontend-nextjs/src/utils/qaTestRunner.ts","start_line":13,"end_line":13,"start_column":1,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/126/instances","dismissal_approved_by":null},{"number":125,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/125","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/125","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import Certificate."},"location":{"path":"apps/frontend-nextjs/src/utils/educationalSecurity.ts","start_line":14,"end_line":14,"start_column":1,"end_column":53},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/125/instances","dismissal_approved_by":null},{"number":124,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/124","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/124","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ClinicalCase."},"location":{"path":"apps/frontend-nextjs/src/utils/educationalSecurity.ts","start_line":13,"end_line":13,"start_column":1,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/124/instances","dismissal_approved_by":null},{"number":123,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/123","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/123","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import CalculationResult."},"location":{"path":"apps/frontend-nextjs/src/utils/educationalSecurity.ts","start_line":12,"end_line":12,"start_column":1,"end_column":72},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/123/instances","dismissal_approved_by":null},{"number":122,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/122","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/122","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import SafetyAlert."},"location":{"path":"apps/frontend-nextjs/src/utils/educationalQAFramework.ts","start_line":13,"end_line":13,"start_column":1,"end_column":85},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/122/instances","dismissal_approved_by":null},{"number":121,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/121","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/121","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports CaseStep, StepResult."},"location":{"path":"apps/frontend-nextjs/src/utils/educationalQAFramework.ts","start_line":12,"end_line":12,"start_column":1,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/121/instances","dismissal_approved_by":null},{"number":120,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/120","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/120","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ClinicalCase."},"location":{"path":"apps/frontend-nextjs/src/utils/educationalAnalytics.ts","start_line":9,"end_line":9,"start_column":1,"end_column":79},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/120/instances","dismissal_approved_by":null},{"number":119,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/119","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/119","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports CaseStep, StepResult."},"location":{"path":"apps/frontend-nextjs/src/utils/consistencyValidators.ts","start_line":9,"end_line":9,"start_column":1,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/119/instances","dismissal_approved_by":null},{"number":118,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/118","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/118","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable implementationPlan."},"location":{"path":"apps/frontend-nextjs/src/utils/continuousImprovementSystem.ts","start_line":575,"end_line":575,"start_column":11,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/118/instances","dismissal_approved_by":null},{"number":117,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/117","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/117","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable recommendations."},"location":{"path":"apps/frontend-nextjs/src/utils/continuousImprovementSystem.ts","start_line":493,"end_line":493,"start_column":11,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/117/instances","dismissal_approved_by":null},{"number":116,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/116","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/116","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import TREATMENT_DURATION."},"location":{"path":"apps/frontend-nextjs/src/utils/doseCalculations.ts","start_line":7,"end_line":15,"start_column":1,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/116/instances","dismissal_approved_by":null},{"number":115,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/115","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/115","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import LearningAnalytics."},"location":{"path":"apps/frontend-nextjs/src/utils/continuousImprovementSystem.ts","start_line":10,"end_line":10,"start_column":1,"end_column":84},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/115/instances","dismissal_approved_by":null},{"number":114,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/114","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/114","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports CaseSession, ClinicalCase, StepResult."},"location":{"path":"apps/frontend-nextjs/src/utils/continuousImprovementSystem.ts","start_line":9,"end_line":9,"start_column":1,"end_column":79},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/114/instances","dismissal_approved_by":null},{"number":113,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/113","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/113","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import CertificateTemplate."},"location":{"path":"apps/frontend-nextjs/src/utils/certificationSecurity.ts","start_line":14,"end_line":14,"start_column":1,"end_column":74},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/113/instances","dismissal_approved_by":null},{"number":112,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/112","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/112","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable completedStages."},"location":{"path":"apps/frontend-nextjs/src/types/checklist.ts","start_line":586,"end_line":586,"start_column":9,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/112/instances","dismissal_approved_by":null},{"number":111,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/111","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/111","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable category."},"location":{"path":"apps/frontend-nextjs/src/services/sentimentAnalysis.ts","start_line":77,"end_line":77,"start_column":17,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/111/instances","dismissal_approved_by":null},{"number":110,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/110","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/110","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable timeoutMs."},"location":{"path":"apps/frontend-nextjs/src/services/fallbackSystem.ts","start_line":62,"end_line":62,"start_column":7,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/110/instances","dismissal_approved_by":null},{"number":109,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/109","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/109","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable maxRetries."},"location":{"path":"apps/frontend-nextjs/src/services/fallbackSystem.ts","start_line":61,"end_line":61,"start_column":7,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/109/instances","dismissal_approved_by":null},{"number":108,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/108","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/108","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable adaptToSentiment."},"location":{"path":"apps/frontend-nextjs/src/services/fallbackSystem.ts","start_line":60,"end_line":60,"start_column":7,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/108/instances","dismissal_approved_by":null},{"number":107,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/107","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/107","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable includeEmergencyContacts."},"location":{"path":"apps/frontend-nextjs/src/services/fallbackSystem.ts","start_line":59,"end_line":59,"start_column":7,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/107/instances","dismissal_approved_by":null},{"number":106,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/106","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/106","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable useLocalKnowledge."},"location":{"path":"apps/frontend-nextjs/src/services/fallbackSystem.ts","start_line":58,"end_line":58,"start_column":7,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/106/instances","dismissal_approved_by":null},{"number":105,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/105","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/105","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import SentimentResult."},"location":{"path":"apps/frontend-nextjs/src/services/astraClient.ts","start_line":6,"end_line":6,"start_column":1,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/105/instances","dismissal_approved_by":null},{"number":104,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-31T00:28:26Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/104","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/104","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"7222a789dc5656e929bce08a277622f23291ad9c","message":{"text":"Unused import AstraResponse."},"location":{"path":"apps/frontend-nextjs/src/services/fallbackSystem.ts","start_line":7,"end_line":7,"start_column":1,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/104/instances","dismissal_approved_by":null},{"number":103,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/103","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/103","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable analyzeSentimentDebounced."},"location":{"path":"apps/frontend-nextjs/src/hooks/useSentimentAnalysis.ts","start_line":111,"end_line":111,"start_column":9,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/103/instances","dismissal_approved_by":null},{"number":102,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/102","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/102","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable autoAnalyze."},"location":{"path":"apps/frontend-nextjs/src/hooks/useSentimentAnalysis.ts","start_line":36,"end_line":36,"start_column":5,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/102/instances","dismissal_approved_by":null},{"number":101,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/101","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/101","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable cacheTimeout."},"location":{"path":"apps/frontend-nextjs/src/hooks/useKnowledgeBase.ts","start_line":33,"end_line":33,"start_column":5,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/101/instances","dismissal_approved_by":null},{"number":100,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/100","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/100","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable shouldUseFallback."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":148,"end_line":148,"start_column":5,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/100/instances","dismissal_approved_by":null},{"number":99,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/99","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/99","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable enrichMessage."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":136,"end_line":136,"start_column":5,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/99/instances","dismissal_approved_by":null},{"number":98,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/98","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/98","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import adjustResponseTone."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":9,"end_line":9,"start_column":1,"end_column":112},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/98/instances","dismissal_approved_by":null},{"number":97,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-16T04:14:55Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/97","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/97","state":"fixed","fixed_at":"2025-08-16T04:14:54Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"fixed","commit_sha":"db272963c78145aad7bc00510cf8329da20d4913","message":{"text":"Unused import useMemo."},"location":{"path":"apps/frontend-nextjs/src/hooks/useChat.ts","start_line":6,"end_line":6,"start_column":1,"end_column":75},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/97/instances","dismissal_approved_by":null},{"number":96,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-19T23:34:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/96","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/96","state":"fixed","fixed_at":"2025-08-19T23:34:15Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"306b24915d684f03aa64a68788e14ba202ee1d74","message":{"text":"Unused import useABTestCore."},"location":{"path":"apps/frontend-nextjs/src/hooks/useABTest.ts","start_line":9,"end_line":9,"start_column":1,"end_column":84},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/96/instances","dismissal_approved_by":null},{"number":95,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/95","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/95","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable persona."},"location":{"path":"apps/frontend-nextjs/src/components/ui/PersonaEducationalAvatar.tsx","start_line":256,"end_line":256,"start_column":9,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/95/instances","dismissal_approved_by":null},{"number":94,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/94","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/94","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable warningAlerts."},"location":{"path":"apps/frontend-nextjs/src/components/qa/QualityDashboard.tsx","start_line":102,"end_line":102,"start_column":9,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/94/instances","dismissal_approved_by":null},{"number":93,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/93","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/93","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import MistakePattern."},"location":{"path":"apps/frontend-nextjs/src/components/qa/QualityDashboard.tsx","start_line":12,"end_line":16,"start_column":1,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/93/instances","dismissal_approved_by":null},{"number":92,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/92","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/92","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import theme."},"location":{"path":"apps/frontend-nextjs/src/components/personas/PersonaSelector.tsx","start_line":7,"end_line":7,"start_column":1,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/92/instances","dismissal_approved_by":null},{"number":91,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/91","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/91","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import getIconByEmoji."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/MobileNavigation.tsx","start_line":6,"end_line":10,"start_column":1,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/91/instances","dismissal_approved_by":null},{"number":90,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/90","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/90","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable formatTimeSpent."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/Progress/GlobalProgress.tsx","start_line":28,"end_line":28,"start_column":9,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/90/instances","dismissal_approved_by":null},{"number":89,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/89","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/89","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports ChatBotIcon, DashboardIcon, InstitutionalIcon, ModulesIcon, ProgressIcon, ResourcesIcon, SystemLogoIcon."},"location":{"path":"apps/frontend-nextjs/src/components/navigation/EducationalFooter.tsx","start_line":10,"end_line":20,"start_column":1,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/89/instances","dismissal_approved_by":null},{"number":88,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/88","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/88","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable setDemoMode."},"location":{"path":"apps/frontend-nextjs/src/components/interactive/TreatmentTimeline/index.tsx","start_line":28,"end_line":28,"start_column":20,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/88/instances","dismissal_approved_by":null},{"number":87,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/87","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/87","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable demoMode."},"location":{"path":"apps/frontend-nextjs/src/components/interactive/TreatmentTimeline/index.tsx","start_line":28,"end_line":28,"start_column":10,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/87/instances","dismissal_approved_by":null},{"number":86,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/86","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/86","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable setNewNote."},"location":{"path":"apps/frontend-nextjs/src/components/interactive/TreatmentTimeline/InteractiveTimeline.tsx","start_line":37,"end_line":37,"start_column":19,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/86/instances","dismissal_approved_by":null},{"number":85,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/85","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/85","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable newNote."},"location":{"path":"apps/frontend-nextjs/src/components/interactive/TreatmentTimeline/InteractiveTimeline.tsx","start_line":37,"end_line":37,"start_column":10,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/85/instances","dismissal_approved_by":null},{"number":84,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/84","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/84","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import LanguageToggle."},"location":{"path":"apps/frontend-nextjs/src/components/layout/EducationalLayout.tsx","start_line":7,"end_line":7,"start_column":1,"end_column":72},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/84/instances","dismissal_approved_by":null},{"number":83,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/83","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/83","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable setProfile."},"location":{"path":"apps/frontend-nextjs/src/components/interactive/DoseCalculator/AdvancedCalculator.tsx","start_line":211,"end_line":211,"start_column":19,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/83/instances","dismissal_approved_by":null},{"number":82,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/82","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/82","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports calculatePQTUDoses, validateCalculation."},"location":{"path":"apps/frontend-nextjs/src/components/interactive/DoseCalculator/AdvancedCalculator.tsx","start_line":4,"end_line":4,"start_column":1,"end_column":84},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/82/instances","dismissal_approved_by":null},{"number":81,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T23:27:42Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/81","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/81","state":"fixed","fixed_at":"2025-08-13T23:27:41Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"fixed","commit_sha":"b30a8aae37bdc122cf57276aace21eef5c456983","message":{"text":"Unused variable getSeverityColor."},"location":{"path":"apps/frontend-nextjs/src/components/interactive/DispensingChecklist/ReadOnlyChecklist.tsx","start_line":37,"end_line":37,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/81/instances","dismissal_approved_by":null},{"number":80,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/80","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/80","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ChecklistProgress."},"location":{"path":"apps/frontend-nextjs/src/components/interactive/DispensingChecklist/ReadOnlyChecklist.tsx","start_line":4,"end_line":4,"start_column":1,"end_column":70},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/80/instances","dismissal_approved_by":null},{"number":79,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/79","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/79","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable buttonClasses."},"location":{"path":"apps/frontend-nextjs/src/components/interactive/DoseCalculator/ABTestBasicCalculator.tsx","start_line":105,"end_line":105,"start_column":9,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/79/instances","dismissal_approved_by":null},{"number":78,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/78","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/78","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports ChecklistProgress, QualityMetrics."},"location":{"path":"apps/frontend-nextjs/src/components/interactive/DispensingChecklist/InteractiveChecklist.tsx","start_line":4,"end_line":10,"start_column":1,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/78/instances","dismissal_approved_by":null},{"number":77,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/77","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/77","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable setEmailAddress."},"location":{"path":"apps/frontend-nextjs/src/components/interactive/Certification/CertificateGenerator.tsx","start_line":37,"end_line":37,"start_column":24,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/77/instances","dismissal_approved_by":null},{"number":76,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/76","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/76","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ClockIcon."},"location":{"path":"apps/frontend-nextjs/src/components/interactive/Certification/CertificateGenerator.tsx","start_line":6,"end_line":18,"start_column":1,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/76/instances","dismissal_approved_by":null},{"number":75,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/75","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/75","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import CertificateTemplate."},"location":{"path":"apps/frontend-nextjs/src/components/interactive/Certification/CertificateGenerator.tsx","start_line":4,"end_line":4,"start_column":1,"end_column":104},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/75/instances","dismissal_approved_by":null},{"number":74,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/74","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/74","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable getTypeIcon."},"location":{"path":"apps/frontend-nextjs/src/components/educational/SmartSearch/index.tsx","start_line":455,"end_line":455,"start_column":9,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/74/instances","dismissal_approved_by":null},{"number":73,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/73","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/73","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable getDefinition."},"location":{"path":"apps/frontend-nextjs/src/components/educational/SmartSearch/index.tsx","start_line":57,"end_line":57,"start_column":28,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/73/instances","dismissal_approved_by":null},{"number":72,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/72","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/72","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable findTerm."},"location":{"path":"apps/frontend-nextjs/src/components/educational/SmartSearch/index.tsx","start_line":57,"end_line":57,"start_column":18,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/72/instances","dismissal_approved_by":null},{"number":71,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/71","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/71","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable selectedTerm."},"location":{"path":"apps/frontend-nextjs/src/components/educational/Glossary/index.tsx","start_line":110,"end_line":110,"start_column":10,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/71/instances","dismissal_approved_by":null},{"number":70,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/70","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/70","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import theme."},"location":{"path":"apps/frontend-nextjs/src/components/educational/InfoCard/index.tsx","start_line":5,"end_line":5,"start_column":1,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/70/instances","dismissal_approved_by":null},{"number":69,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/69","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/69","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ReactNode."},"location":{"path":"apps/frontend-nextjs/src/components/educational/InfoCard/index.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/69/instances","dismissal_approved_by":null},{"number":68,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/68","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/68","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ProgressData."},"location":{"path":"apps/frontend-nextjs/src/components/educational/EducationalDashboard/index.tsx","start_line":6,"end_line":6,"start_column":1,"end_column":65},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/68/instances","dismissal_approved_by":null},{"number":67,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/67","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/67","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ProgressIndicator."},"location":{"path":"apps/frontend-nextjs/src/components/educational/EducationalDashboard/index.tsx","start_line":5,"end_line":5,"start_column":1,"end_column":84},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/67/instances","dismissal_approved_by":null},{"number":66,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/66","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/66","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import useEffect."},"location":{"path":"apps/frontend-nextjs/src/components/educational/EducationalDashboard/index.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/66/instances","dismissal_approved_by":null},{"number":65,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/65","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/65","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable focusedIndex."},"location":{"path":"apps/frontend-nextjs/src/components/common/KeyboardShortcuts.tsx","start_line":17,"end_line":17,"start_column":10,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/65/instances","dismissal_approved_by":null},{"number":64,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/64","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/64","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable personaIds."},"location":{"path":"apps/frontend-nextjs/src/components/chat/modern/PersonaSwitch.tsx","start_line":26,"end_line":26,"start_column":9,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/64/instances","dismissal_approved_by":null},{"number":63,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/63","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/63","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ToggleIcon."},"location":{"path":"apps/frontend-nextjs/src/components/chat/modern/PersonaSwitch.tsx","start_line":7,"end_line":7,"start_column":1,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/63/instances","dismissal_approved_by":null},{"number":62,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/62","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/62","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import getPersonaColors."},"location":{"path":"apps/frontend-nextjs/src/components/chat/modern/PersonaSwitch.tsx","start_line":6,"end_line":6,"start_column":1,"end_column":74},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/62/instances","dismissal_approved_by":null},{"number":61,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/61","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/61","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable HistoryToggle."},"location":{"path":"apps/frontend-nextjs/src/components/chat/modern/ModernChatHeader.tsx","start_line":67,"end_line":67,"start_column":7,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/61/instances","dismissal_approved_by":null},{"number":60,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/60","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/60","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused imports InfoIcon, MenuIcon."},"location":{"path":"apps/frontend-nextjs/src/components/chat/modern/ModernChatHeader.tsx","start_line":8,"end_line":15,"start_column":1,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/60/instances","dismissal_approved_by":null},{"number":59,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/59","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/59","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable handleReject."},"location":{"path":"apps/frontend-nextjs/src/components/chat/RoutingIndicator.tsx","start_line":49,"end_line":49,"start_column":9,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/59/instances","dismissal_approved_by":null},{"number":58,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/58","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/58","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable isValidImageUrl."},"location":{"path":"apps/frontend-nextjs/src/components/chat/PersonaAvatar.tsx","start_line":10,"end_line":10,"start_column":7,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/58/instances","dismissal_approved_by":null},{"number":57,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/57","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/57","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable setLoading."},"location":{"path":"apps/frontend-nextjs/src/components/chat/ConversationHistory.tsx","start_line":48,"end_line":48,"start_column":19,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/57/instances","dismissal_approved_by":null},{"number":56,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/56","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/56","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable loading."},"location":{"path":"apps/frontend-nextjs/src/components/chat/ConversationHistory.tsx","start_line":48,"end_line":48,"start_column":10,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/56/instances","dismissal_approved_by":null},{"number":55,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/55","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/55","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable MOBILE_SIDEBAR_WIDTH."},"location":{"path":"apps/frontend-nextjs/src/components/chat/ConversationHistory.tsx","start_line":10,"end_line":10,"start_column":7,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/55/instances","dismissal_approved_by":null},{"number":54,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/54","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/54","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable SIDEBAR_WIDTH."},"location":{"path":"apps/frontend-nextjs/src/components/chat/ConversationHistory.tsx","start_line":9,"end_line":9,"start_column":7,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/54/instances","dismissal_approved_by":null},{"number":53,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/53","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/53","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable conversationText."},"location":{"path":"apps/frontend-nextjs/src/components/chat/ConversationExporter.tsx","start_line":92,"end_line":92,"start_column":13,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/53/instances","dismissal_approved_by":null},{"number":52,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/52","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/52","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import LearningAnalytics."},"location":{"path":"apps/frontend-nextjs/src/components/admin/AdminAnalyticsDashboard.tsx","start_line":16,"end_line":20,"start_column":1,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/52/instances","dismissal_approved_by":null},{"number":51,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/51","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/51","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ABVariant."},"location":{"path":"apps/frontend-nextjs/src/components/admin/ABTestManager.tsx","start_line":15,"end_line":15,"start_column":1,"end_column":81},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/51/instances","dismissal_approved_by":null},{"number":50,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/50","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/50","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import ClipboardListIcon."},"location":{"path":"apps/frontend-nextjs/src/components/Navigation.tsx","start_line":9,"end_line":18,"start_column":1,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/50/instances","dismissal_approved_by":null},{"number":49,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-28T02:28:45Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/49","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/49","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Unused variable getValidPersonasCount."},"location":{"path":"apps/frontend-nextjs/src/app/page.tsx","start_line":52,"end_line":52,"start_column":37,"end_column":58},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/49/instances","dismissal_approved_by":null},{"number":48,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-28T02:28:45Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/48","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/48","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:codeql-detailed","environment":"{\"language\":\"javascript\"}","category":"/language:javascript/detailed","state":"open","commit_sha":"f77bc7d60e6543ff0d2e90f4f9e26b6381d74e9d","message":{"text":"Unused variable personas."},"location":{"path":"apps/frontend-nextjs/src/app/page.tsx","start_line":52,"end_line":52,"start_column":11,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/48/instances","dismissal_approved_by":null},{"number":47,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/47","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/47","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused import useEffect."},"location":{"path":"apps/frontend-nextjs/src/app/resources/calculator/page.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/47/instances","dismissal_approved_by":null},{"number":46,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/46","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/46","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable currentPersona."},"location":{"path":"apps/frontend-nextjs/src/app/progress/page.tsx","start_line":154,"end_line":154,"start_column":9,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/46/instances","dismissal_approved_by":null},{"number":45,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/45","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/45","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable setProgressData."},"location":{"path":"apps/frontend-nextjs/src/app/progress/page.tsx","start_line":48,"end_line":48,"start_column":24,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/45/instances","dismissal_approved_by":null},{"number":44,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/44","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/44","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable handleShowExplanation."},"location":{"path":"apps/frontend-nextjs/src/app/chat/page.tsx","start_line":358,"end_line":358,"start_column":9,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/44/instances","dismissal_approved_by":null},{"number":43,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/43","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/43","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable handleRejectRouting."},"location":{"path":"apps/frontend-nextjs/src/app/chat/page.tsx","start_line":354,"end_line":354,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/43/instances","dismissal_approved_by":null},{"number":42,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/42","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/42","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable handleAcceptRouting."},"location":{"path":"apps/frontend-nextjs/src/app/chat/page.tsx","start_line":349,"end_line":349,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/42/instances","dismissal_approved_by":null},{"number":41,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/41","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/41","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable conversationId."},"location":{"path":"apps/frontend-nextjs/src/app/chat/page.tsx","start_line":327,"end_line":327,"start_column":11,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/41/instances","dismissal_approved_by":null},{"number":40,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/40","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/40","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable getRoutingRecommendedPersona."},"location":{"path":"apps/frontend-nextjs/src/app/chat/page.tsx","start_line":146,"end_line":146,"start_column":28,"end_column":56},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/40/instances","dismissal_approved_by":null},{"number":39,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/39","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/39","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable shouldShowRouting."},"location":{"path":"apps/frontend-nextjs/src/app/chat/page.tsx","start_line":145,"end_line":145,"start_column":5,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/39/instances","dismissal_approved_by":null},{"number":38,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/38","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/38","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable isAnalyzing."},"location":{"path":"apps/frontend-nextjs/src/app/chat/page.tsx","start_line":144,"end_line":144,"start_column":5,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/38/instances","dismissal_approved_by":null},{"number":37,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/37","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/37","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable currentAnalysis."},"location":{"path":"apps/frontend-nextjs/src/app/chat/page.tsx","start_line":143,"end_line":143,"start_column":5,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/37/instances","dismissal_approved_by":null},{"number":36,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/36","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/36","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable resetSystemFailures."},"location":{"path":"apps/frontend-nextjs/src/app/chat/page.tsx","start_line":85,"end_line":85,"start_column":5,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/36/instances","dismissal_approved_by":null},{"number":35,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/35","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/35","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable resetFallback."},"location":{"path":"apps/frontend-nextjs/src/app/chat/page.tsx","start_line":84,"end_line":84,"start_column":5,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/35/instances","dismissal_approved_by":null},{"number":34,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/34","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/34","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable lastSearchResult."},"location":{"path":"apps/frontend-nextjs/src/app/chat/page.tsx","start_line":81,"end_line":81,"start_column":5,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/34/instances","dismissal_approved_by":null},{"number":33,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/33","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/33","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable personaSwitchSuggestion."},"location":{"path":"apps/frontend-nextjs/src/app/chat/page.tsx","start_line":79,"end_line":79,"start_column":5,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/33/instances","dismissal_approved_by":null},{"number":32,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-08-13T01:39:17Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/32","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/32","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security-unified.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"d930f1910757381e1df0a245c06f96134b41f688","message":{"text":"Unused variable chatError."},"location":{"path":"apps/frontend-nextjs/src/app/chat/page.tsx","start_line":76,"end_line":76,"start_column":12,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/32/instances","dismissal_approved_by":null},{"number":31,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/31","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/31","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"apps/frontend-nextjs/src/utils/abTesting.ts","start_line":592,"end_line":592,"start_column":30,"end_column":67},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/31/instances","dismissal_approved_by":null},{"number":30,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/30","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/30","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"apps/frontend-nextjs/src/utils/abTesting.ts","start_line":591,"end_line":591,"start_column":27,"end_column":58},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/30/instances","dismissal_approved_by":null},{"number":29,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/29","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/29","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This string may still contain <script, which may cause an HTML element injection vulnerability."},"location":{"path":"apps/frontend-nextjs/src/utils/securityUtils.ts","start_line":81,"end_line":88,"start_column":15,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/29/instances","dismissal_approved_by":null},{"number":28,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/28","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/28","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This string may still contain <script, which may cause an HTML element injection vulnerability."},"location":{"path":"apps/frontend-nextjs/src/utils/continuousImprovementSystem.ts","start_line":677,"end_line":678,"start_column":12,"end_column":74},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/28/instances","dismissal_approved_by":null},{"number":27,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/27","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/27","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/bad-tag-filter","severity":"warning","description":"Bad HTML filtering regexp","name":"js/bad-tag-filter","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","external/cwe/cwe-184","external/cwe/cwe-185","external/cwe/cwe-186","security"],"full_description":"Matching HTML tags using regular expressions is hard to do right, and can easily lead to security issues.","help":"# Bad HTML filtering regexp\nIt is possible to match some single HTML tags using regular expressions (parsing general HTML using regular expressions is impossible). However, if the regular expression is not written well it might be possible to circumvent it, which can lead to cross-site scripting or other security issues.\n\nSome of these mistakes are caused by browsers having very forgiving HTML parsers, and will often render invalid HTML containing syntax errors. Regular expressions that attempt to match HTML should also recognize tags containing such syntax errors.\n\n\n## Recommendation\nUse a well-tested sanitization or parser library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\n\n## Example\nThe following example attempts to filters out all `<script>` tags.\n\n\n```javascript\nfunction filterScript(html) {\n    var scriptRegex = /<script\\b[^>]*>([\\s\\S]*?)<\\/script>/gi;\n    var match;\n    while ((match = scriptRegex.exec(html)) !== null) {\n        html = html.replace(match[0], match[1]);\n    }\n    return html;\n}\n\n```\nThe above sanitizer does not filter out all `<script>` tags. Browsers will not only accept `</script>` as script end tags, but also tags such as `</script foo=\"bar\">` even though it is a parser error. This means that an attack string such as `<script>alert(1)</script foo=\"bar\">` will not be filtered by the function, and `alert(1)` will be executed by a browser if the string is rendered as HTML.\n\nOther corner cases include that HTML comments can end with `--!>`, and that HTML tag names can contain upper case characters.\n\n\n## References\n* Securitum: [The Curious Case of Copy &amp; Paste](https://research.securitum.com/the-curious-case-of-copy-paste/).\n* stackoverflow.com: [You can't parse \\[X\\]HTML with regex](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags#answer-1732454).\n* HTML Standard: [Comment end bang state](https://html.spec.whatwg.org/multipage/parsing.html#comment-end-bang-state).\n* stackoverflow.com: [Why aren't browsers strict about HTML?](https://stackoverflow.com/questions/25559999/why-arent-browsers-strict-about-html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n* Common Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html).\n* Common Weakness Enumeration: [CWE-186](https://cwe.mitre.org/data/definitions/186.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This regular expression does not match script end tags like </script >."},"location":{"path":"apps/frontend-nextjs/src/utils/securityUtils.ts","start_line":82,"end_line":82,"start_column":15,"end_column":64},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/27/instances","dismissal_approved_by":null},{"number":26,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/26","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/26","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/bad-tag-filter","severity":"warning","description":"Bad HTML filtering regexp","name":"js/bad-tag-filter","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","external/cwe/cwe-184","external/cwe/cwe-185","external/cwe/cwe-186","security"],"full_description":"Matching HTML tags using regular expressions is hard to do right, and can easily lead to security issues.","help":"# Bad HTML filtering regexp\nIt is possible to match some single HTML tags using regular expressions (parsing general HTML using regular expressions is impossible). However, if the regular expression is not written well it might be possible to circumvent it, which can lead to cross-site scripting or other security issues.\n\nSome of these mistakes are caused by browsers having very forgiving HTML parsers, and will often render invalid HTML containing syntax errors. Regular expressions that attempt to match HTML should also recognize tags containing such syntax errors.\n\n\n## Recommendation\nUse a well-tested sanitization or parser library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\n\n## Example\nThe following example attempts to filters out all `<script>` tags.\n\n\n```javascript\nfunction filterScript(html) {\n    var scriptRegex = /<script\\b[^>]*>([\\s\\S]*?)<\\/script>/gi;\n    var match;\n    while ((match = scriptRegex.exec(html)) !== null) {\n        html = html.replace(match[0], match[1]);\n    }\n    return html;\n}\n\n```\nThe above sanitizer does not filter out all `<script>` tags. Browsers will not only accept `</script>` as script end tags, but also tags such as `</script foo=\"bar\">` even though it is a parser error. This means that an attack string such as `<script>alert(1)</script foo=\"bar\">` will not be filtered by the function, and `alert(1)` will be executed by a browser if the string is rendered as HTML.\n\nOther corner cases include that HTML comments can end with `--!>`, and that HTML tag names can contain upper case characters.\n\n\n## References\n* Securitum: [The Curious Case of Copy &amp; Paste](https://research.securitum.com/the-curious-case-of-copy-paste/).\n* stackoverflow.com: [You can't parse \\[X\\]HTML with regex](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags#answer-1732454).\n* HTML Standard: [Comment end bang state](https://html.spec.whatwg.org/multipage/parsing.html#comment-end-bang-state).\n* stackoverflow.com: [Why aren't browsers strict about HTML?](https://stackoverflow.com/questions/25559999/why-arent-browsers-strict-about-html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n* Common Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html).\n* Common Weakness Enumeration: [CWE-186](https://cwe.mitre.org/data/definitions/186.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This regular expression does not match script end tags like </script >."},"location":{"path":"apps/frontend-nextjs/src/utils/educationalSecurity.ts","start_line":111,"end_line":111,"start_column":8,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/26/instances","dismissal_approved_by":null},{"number":25,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/25","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/25","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/bad-tag-filter","severity":"warning","description":"Bad HTML filtering regexp","name":"js/bad-tag-filter","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","external/cwe/cwe-184","external/cwe/cwe-185","external/cwe/cwe-186","security"],"full_description":"Matching HTML tags using regular expressions is hard to do right, and can easily lead to security issues.","help":"# Bad HTML filtering regexp\nIt is possible to match some single HTML tags using regular expressions (parsing general HTML using regular expressions is impossible). However, if the regular expression is not written well it might be possible to circumvent it, which can lead to cross-site scripting or other security issues.\n\nSome of these mistakes are caused by browsers having very forgiving HTML parsers, and will often render invalid HTML containing syntax errors. Regular expressions that attempt to match HTML should also recognize tags containing such syntax errors.\n\n\n## Recommendation\nUse a well-tested sanitization or parser library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\n\n## Example\nThe following example attempts to filters out all `<script>` tags.\n\n\n```javascript\nfunction filterScript(html) {\n    var scriptRegex = /<script\\b[^>]*>([\\s\\S]*?)<\\/script>/gi;\n    var match;\n    while ((match = scriptRegex.exec(html)) !== null) {\n        html = html.replace(match[0], match[1]);\n    }\n    return html;\n}\n\n```\nThe above sanitizer does not filter out all `<script>` tags. Browsers will not only accept `</script>` as script end tags, but also tags such as `</script foo=\"bar\">` even though it is a parser error. This means that an attack string such as `<script>alert(1)</script foo=\"bar\">` will not be filtered by the function, and `alert(1)` will be executed by a browser if the string is rendered as HTML.\n\nOther corner cases include that HTML comments can end with `--!>`, and that HTML tag names can contain upper case characters.\n\n\n## References\n* Securitum: [The Curious Case of Copy &amp; Paste](https://research.securitum.com/the-curious-case-of-copy-paste/).\n* stackoverflow.com: [You can't parse \\[X\\]HTML with regex](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags#answer-1732454).\n* HTML Standard: [Comment end bang state](https://html.spec.whatwg.org/multipage/parsing.html#comment-end-bang-state).\n* stackoverflow.com: [Why aren't browsers strict about HTML?](https://stackoverflow.com/questions/25559999/why-arent-browsers-strict-about-html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n* Common Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html).\n* Common Weakness Enumeration: [CWE-186](https://cwe.mitre.org/data/definitions/186.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This regular expression does not match script end tags like </script >."},"location":{"path":"apps/frontend-nextjs/src/utils/continuousImprovementSystem.ts","start_line":678,"end_line":678,"start_column":17,"end_column":66},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/25/instances","dismissal_approved_by":null},{"number":24,"created_at":"2025-08-13T01:39:16Z","updated_at":"2025-09-06T16:06:01Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/24","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/24","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-scheme-check","severity":"warning","description":"Incomplete URL scheme check","name":"js/incomplete-url-scheme-check","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-184","security"],"full_description":"Checking for the \"javascript:\" URL scheme without also checking for \"vbscript:\" and \"data:\" suggests a logic error or even a security vulnerability.","help":"# Incomplete URL scheme check\nURLs starting with `javascript:` can be used to encode JavaScript code to be executed when the URL is visited. While this is a powerful mechanism for creating feature-rich and responsive web applications, it is also a potential security risk: if the URL comes from an untrusted source, it might contain harmful JavaScript code. For this reason, many frameworks and libraries first check the URL scheme of any untrusted URL, and reject URLs with the `javascript:` scheme.\n\nHowever, the `data:` and `vbscript:` schemes can be used to represent executable code in a very similar way, so any validation logic that checks against `javascript:`, but not against `data:` and `vbscript:`, is likely to be insufficient.\n\n\n## Recommendation\nAdd checks covering both `data:` and `vbscript:`.\n\n\n## Example\nThe following function validates a (presumably untrusted) URL `url`. If it starts with `javascript:` (case-insensitive and potentially preceded by whitespace), the harmless placeholder URL `about:blank` is returned to prevent code injection; otherwise `url` itself is returned.\n\n\n```javascript\nfunction sanitizeUrl(url) {\n    let u = decodeURI(url).trim().toLowerCase();\n    if (u.startsWith(\"javascript:\"))\n        return \"about:blank\";\n    return url;\n}\n\n```\nWhile this check provides partial projection, it should be extended to cover `data:` and `vbscript:` as well:\n\n\n```javascript\nfunction sanitizeUrl(url) {\n    let u = decodeURI(url).trim().toLowerCase();\n    if (u.startsWith(\"javascript:\") || u.startsWith(\"data:\") || u.startsWith(\"vbscript:\"))\n        return \"about:blank\";\n    return url;\n}\n\n```\n\n## References\n* WHATWG: [URL schemes](https://wiki.whatwg.org/wiki/URL_schemes).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.0"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/main-pipeline.yml:security-quality-gates","environment":"{}","category":".github/workflows/main-pipeline.yml:security-quality-gates","state":"open","commit_sha":"94d54cda8a8aa0c3533c3b544ded49f16b1e3e41","message":{"text":"This check does not consider data:."},"location":{"path":"apps/frontend-nextjs/src/utils/securityUtils.ts","start_line":81,"end_line":88,"start_column":15,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/24/instances","dismissal_approved_by":null},{"number":23,"created_at":"2025-08-13T01:37:56Z","updated_at":"2025-08-17T20:08:57Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/23","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/23","state":"fixed","fixed_at":"2025-08-17T20:08:57Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-5206","severity":"warning","description":"scikit-learn: Possible sensitive data leak","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"A sensitive data leakage vulnerability was identified in scikit-learn's TfidfVectorizer, specifically in versions up to and including 1.4.1.post1, which was fixed in version 1.5.0. The vulnerability arises from the unexpected storage of all tokens present in the training data within the `stop_words_` attribute, rather than only storing the subset of tokens required for the TF-IDF technique to function. This behavior leads to the potential leakage of sensitive information, as the `stop_words_` attribute could contain tokens that were meant to be discarded and not stored, such as passwords or keys. The impact of this vulnerability varies based on the nature of the data being processed by the vectorizer.","help":"**Vulnerability CVE-2024-5206**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|scikit-learn|1.5.0|[CVE-2024-5206](https://avd.aquasec.com/nvd/cve-2024-5206)|\n\nA sensitive data leakage vulnerability was identified in scikit-learn's TfidfVectorizer, specifically in versions up to and including 1.4.1.post1, which was fixed in version 1.5.0. The vulnerability arises from the unexpected storage of all tokens present in the training data within the `stop_words_` attribute, rather than only storing the subset of tokens required for the TF-IDF technique to function. This behavior leads to the potential leakage of sensitive information, as the `stop_words_` attribute could contain tokens that were meant to be discarded and not stored, such as passwords or keys. The impact of this vulnerability varies based on the nature of the data being processed by the vectorizer.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-5206","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"65f74986713841ab6fa6486a785fe125d1ba3a24","message":{"text":"Package: scikit-learn\nInstalled Version: 1.3.2\nVulnerability CVE-2024-5206\nSeverity: MEDIUM\nFixed Version: 1.5.0\nLink: [CVE-2024-5206](https://avd.aquasec.com/nvd/cve-2024-5206)"},"location":{"path":"apps/backend/requirements.txt","start_line":15,"end_line":15,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/23/instances","dismissal_approved_by":null},{"number":22,"created_at":"2025-08-13T01:37:56Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/22","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/22","state":"fixed","fixed_at":"2025-08-18T03:01:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-6827","severity":"error","description":"gunicorn: HTTP Request Smuggling in benoitc/gunicorn","name":"LanguageSpecificPackageVulnerability","tags":["HIGH","security","vulnerability"],"full_description":"Gunicorn version 21.2.0 does not properly validate the value of the 'Transfer-Encoding' header as specified in the RFC standards, which leads to the default fallback method of 'Content-Length,' making it vulnerable to TE.CL request smuggling. This vulnerability can lead to cache poisoning, data exposure, session manipulation, SSRF, XSS, DoS, data integrity compromise, security bypass, information leakage, and business logic abuse.","help":"**Vulnerability CVE-2024-6827**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|gunicorn|23.0.0|[CVE-2024-6827](https://avd.aquasec.com/nvd/cve-2024-6827)|\n\nGunicorn version 21.2.0 does not properly validate the value of the 'Transfer-Encoding' header as specified in the RFC standards, which leads to the default fallback method of 'Content-Length,' making it vulnerable to TE.CL request smuggling. This vulnerability can lead to cache poisoning, data exposure, session manipulation, SSRF, XSS, DoS, data integrity compromise, security bypass, information leakage, and business logic abuse.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-6827","security_severity_level":"high"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"Package: gunicorn\nInstalled Version: 21.2.0\nVulnerability CVE-2024-6827\nSeverity: HIGH\nFixed Version: 23.0.0\nLink: [CVE-2024-6827](https://avd.aquasec.com/nvd/cve-2024-6827)"},"location":{"path":"apps/backend/requirements.txt","start_line":32,"end_line":32,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/22/instances","dismissal_approved_by":null},{"number":21,"created_at":"2025-08-13T01:37:56Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/21","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/21","state":"fixed","fixed_at":"2025-08-18T03:01:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-1135","severity":"error","description":"python-gunicorn: HTTP Request Smuggling due to improper validation of Transfer-Encoding headers","name":"LanguageSpecificPackageVulnerability","tags":["HIGH","security","vulnerability"],"full_description":"Gunicorn fails to properly validate Transfer-Encoding headers, leading to HTTP Request Smuggling (HRS) vulnerabilities. By crafting requests with conflicting Transfer-Encoding headers, attackers can bypass security restrictions and access restricted endpoints. This issue is due to Gunicorn's handling of Transfer-Encoding headers, where it incorrectly processes requests with multiple, conflicting Transfer-Encoding headers, treating them as chunked regardless of the final encoding specified. This vulnerability allows for a range of attacks including cache poisoning, session manipulation, and data exposure.","help":"**Vulnerability CVE-2024-1135**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|gunicorn|22.0.0|[CVE-2024-1135](https://avd.aquasec.com/nvd/cve-2024-1135)|\n\nGunicorn fails to properly validate Transfer-Encoding headers, leading to HTTP Request Smuggling (HRS) vulnerabilities. By crafting requests with conflicting Transfer-Encoding headers, attackers can bypass security restrictions and access restricted endpoints. This issue is due to Gunicorn's handling of Transfer-Encoding headers, where it incorrectly processes requests with multiple, conflicting Transfer-Encoding headers, treating them as chunked regardless of the final encoding specified. This vulnerability allows for a range of attacks including cache poisoning, session manipulation, and data exposure.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-1135","security_severity_level":"high"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"Package: gunicorn\nInstalled Version: 21.2.0\nVulnerability CVE-2024-1135\nSeverity: HIGH\nFixed Version: 22.0.0\nLink: [CVE-2024-1135](https://avd.aquasec.com/nvd/cve-2024-1135)"},"location":{"path":"apps/backend/requirements.txt","start_line":32,"end_line":32,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/21/instances","dismissal_approved_by":null},{"number":20,"created_at":"2025-08-13T01:37:56Z","updated_at":"2025-08-17T20:08:57Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/20","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/20","state":"fixed","fixed_at":"2025-08-17T20:08:57Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-49767","severity":"warning","description":"werkzeug: python-werkzeug: Werkzeug possible resource exhaustion when parsing file data in forms","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"Werkzeug is a Web Server Gateway Interface web application library. Applications using `werkzeug.formparser.MultiPartParser` corresponding to a version of Werkzeug prior to 3.0.6 to parse `multipart/form-data` requests (e.g. all flask applications) are vulnerable to a relatively simple but effective resource exhaustion (denial of service) attack. A specifically crafted form submission request can cause the parser to allocate and block 3 to 8 times the upload size in main memory. There is no upper limit; a single upload at 1 Gbit/s can exhaust 32 GB of RAM in less than 60 seconds. Werkzeug version 3.0.6 fixes this issue.","help":"**Vulnerability CVE-2024-49767**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Werkzeug|3.0.6|[CVE-2024-49767](https://avd.aquasec.com/nvd/cve-2024-49767)|\n\nWerkzeug is a Web Server Gateway Interface web application library. Applications using `werkzeug.formparser.MultiPartParser` corresponding to a version of Werkzeug prior to 3.0.6 to parse `multipart/form-data` requests (e.g. all flask applications) are vulnerable to a relatively simple but effective resource exhaustion (denial of service) attack. A specifically crafted form submission request can cause the parser to allocate and block 3 to 8 times the upload size in main memory. There is no upper limit; a single upload at 1 Gbit/s can exhaust 32 GB of RAM in less than 60 seconds. Werkzeug version 3.0.6 fixes this issue.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-49767","security_severity_level":"high"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"65f74986713841ab6fa6486a785fe125d1ba3a24","message":{"text":"Package: Werkzeug\nInstalled Version: 3.0.1\nVulnerability CVE-2024-49767\nSeverity: MEDIUM\nFixed Version: 3.0.6\nLink: [CVE-2024-49767](https://avd.aquasec.com/nvd/cve-2024-49767)"},"location":{"path":"apps/backend/requirements.txt","start_line":7,"end_line":7,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/20/instances","dismissal_approved_by":null},{"number":19,"created_at":"2025-08-13T01:37:56Z","updated_at":"2025-08-17T20:08:57Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/19","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/19","state":"fixed","fixed_at":"2025-08-17T20:08:57Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-49766","severity":"warning","description":"werkzeug: python-werkzeug: Werkzeug safe_join not safe on Windows","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"Werkzeug is a Web Server Gateway Interface web application library. On Python < 3.11 on Windows, os.path.isabs() does not catch UNC paths like //server/share. Werkzeug's safe_join() relies on this check, and so can produce a path that is not safe, potentially allowing unintended access to data. Applications using Python >= 3.11, or not using Windows, are not vulnerable. Werkzeug version 3.0.6 contains a patch.","help":"**Vulnerability CVE-2024-49766**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Werkzeug|3.0.6|[CVE-2024-49766](https://avd.aquasec.com/nvd/cve-2024-49766)|\n\nWerkzeug is a Web Server Gateway Interface web application library. On Python < 3.11 on Windows, os.path.isabs() does not catch UNC paths like //server/share. Werkzeug's safe_join() relies on this check, and so can produce a path that is not safe, potentially allowing unintended access to data. Applications using Python >= 3.11, or not using Windows, are not vulnerable. Werkzeug version 3.0.6 contains a patch.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-49766","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"65f74986713841ab6fa6486a785fe125d1ba3a24","message":{"text":"Package: Werkzeug\nInstalled Version: 3.0.1\nVulnerability CVE-2024-49766\nSeverity: MEDIUM\nFixed Version: 3.0.6\nLink: [CVE-2024-49766](https://avd.aquasec.com/nvd/cve-2024-49766)"},"location":{"path":"apps/backend/requirements.txt","start_line":7,"end_line":7,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/19/instances","dismissal_approved_by":null},{"number":18,"created_at":"2025-08-13T01:37:56Z","updated_at":"2025-08-17T20:08:57Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/18","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/18","state":"fixed","fixed_at":"2025-08-17T20:08:57Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-34069","severity":"error","description":"python-werkzeug: user may execute code on a developer's machine","name":"LanguageSpecificPackageVulnerability","tags":["HIGH","security","vulnerability"],"full_description":"Werkzeug is a comprehensive WSGI web application library. The debugger in affected versions of Werkzeug can allow an attacker to execute code on a developer's machine under some circumstances. This requires the attacker to get the developer to interact with a domain and subdomain they control, and enter the debugger PIN, but if they are successful it allows access to the debugger even if it is only running on localhost. This also requires the attacker to guess a URL in the developer's application that will trigger the debugger. This vulnerability is fixed in 3.0.3.","help":"**Vulnerability CVE-2024-34069**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|Werkzeug|3.0.3|[CVE-2024-34069](https://avd.aquasec.com/nvd/cve-2024-34069)|\n\nWerkzeug is a comprehensive WSGI web application library. The debugger in affected versions of Werkzeug can allow an attacker to execute code on a developer's machine under some circumstances. This requires the attacker to get the developer to interact with a domain and subdomain they control, and enter the debugger PIN, but if they are successful it allows access to the debugger even if it is only running on localhost. This also requires the attacker to guess a URL in the developer's application that will trigger the debugger. This vulnerability is fixed in 3.0.3.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-34069","security_severity_level":"high"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"65f74986713841ab6fa6486a785fe125d1ba3a24","message":{"text":"Package: Werkzeug\nInstalled Version: 3.0.1\nVulnerability CVE-2024-34069\nSeverity: HIGH\nFixed Version: 3.0.3\nLink: [CVE-2024-34069](https://avd.aquasec.com/nvd/cve-2024-34069)"},"location":{"path":"apps/backend/requirements.txt","start_line":7,"end_line":7,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/18/instances","dismissal_approved_by":null},{"number":17,"created_at":"2025-08-13T01:37:56Z","updated_at":"2025-08-17T20:08:57Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/17","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/17","state":"fixed","fixed_at":"2025-08-17T20:08:57Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-6866","severity":"warning","description":"corydolphin/flask-cors version 4.01 contains a vulnerability where the ...","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"corydolphin/flask-cors version 4.01 contains a vulnerability where the request path matching is case-insensitive due to the use of the `try_match` function, which is originally intended for matching hosts. This results in a mismatch because paths in URLs are case-sensitive, but the regex matching treats them as case-insensitive. This misconfiguration can lead to significant security vulnerabilities, allowing unauthorized origins to access paths meant to be restricted, resulting in data exposure and potential data leaks.","help":"**Vulnerability CVE-2024-6866**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Flask-CORS|6.0.0|[CVE-2024-6866](https://avd.aquasec.com/nvd/cve-2024-6866)|\n\ncorydolphin/flask-cors version 4.01 contains a vulnerability where the request path matching is case-insensitive due to the use of the `try_match` function, which is originally intended for matching hosts. This results in a mismatch because paths in URLs are case-sensitive, but the regex matching treats them as case-insensitive. This misconfiguration can lead to significant security vulnerabilities, allowing unauthorized origins to access paths meant to be restricted, resulting in data exposure and potential data leaks.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-6866","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"65f74986713841ab6fa6486a785fe125d1ba3a24","message":{"text":"Package: Flask-CORS\nInstalled Version: 4.0.0\nVulnerability CVE-2024-6866\nSeverity: MEDIUM\nFixed Version: 6.0.0\nLink: [CVE-2024-6866](https://avd.aquasec.com/nvd/cve-2024-6866)"},"location":{"path":"apps/backend/requirements.txt","start_line":6,"end_line":6,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/17/instances","dismissal_approved_by":null},{"number":16,"created_at":"2025-08-13T01:37:56Z","updated_at":"2025-08-17T20:08:57Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/16","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/16","state":"fixed","fixed_at":"2025-08-17T20:08:57Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-6844","severity":"warning","description":"A vulnerability in corydolphin/flask-cors version 4.0.1 allows for inc ...","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"A vulnerability in corydolphin/flask-cors version 4.0.1 allows for inconsistent CORS matching due to the handling of the '+' character in URL paths. The request.path is passed through the unquote_plus function, which converts the '+' character to a space ' '. This behavior leads to incorrect path normalization, causing potential mismatches in CORS configuration. As a result, endpoints may not be matched correctly to their CORS settings, leading to unexpected CORS policy application. This can cause unauthorized cross-origin access or block valid requests, creating security vulnerabilities and usability issues.","help":"**Vulnerability CVE-2024-6844**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Flask-CORS|6.0.0|[CVE-2024-6844](https://avd.aquasec.com/nvd/cve-2024-6844)|\n\nA vulnerability in corydolphin/flask-cors version 4.0.1 allows for inconsistent CORS matching due to the handling of the '+' character in URL paths. The request.path is passed through the unquote_plus function, which converts the '+' character to a space ' '. This behavior leads to incorrect path normalization, causing potential mismatches in CORS configuration. As a result, endpoints may not be matched correctly to their CORS settings, leading to unexpected CORS policy application. This can cause unauthorized cross-origin access or block valid requests, creating security vulnerabilities and usability issues.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-6844","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"65f74986713841ab6fa6486a785fe125d1ba3a24","message":{"text":"Package: Flask-CORS\nInstalled Version: 4.0.0\nVulnerability CVE-2024-6844\nSeverity: MEDIUM\nFixed Version: 6.0.0\nLink: [CVE-2024-6844](https://avd.aquasec.com/nvd/cve-2024-6844)"},"location":{"path":"apps/backend/requirements.txt","start_line":6,"end_line":6,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/16/instances","dismissal_approved_by":null},{"number":15,"created_at":"2025-08-13T01:37:56Z","updated_at":"2025-08-17T20:08:57Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/15","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/15","state":"fixed","fixed_at":"2025-08-17T20:08:57Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-6839","severity":"warning","description":"corydolphin/flask-cors version 4.0.1 contains an improper regex path m ...","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"corydolphin/flask-cors version 4.0.1 contains an improper regex path matching vulnerability. The plugin prioritizes longer regex patterns over more specific ones when matching paths, which can lead to less restrictive CORS policies being applied to sensitive endpoints. This mismatch in regex pattern priority allows unauthorized cross-origin access to sensitive data or functionality, potentially exposing confidential information and increasing the risk of unauthorized actions by malicious actors.","help":"**Vulnerability CVE-2024-6839**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Flask-CORS|6.0.0|[CVE-2024-6839](https://avd.aquasec.com/nvd/cve-2024-6839)|\n\ncorydolphin/flask-cors version 4.0.1 contains an improper regex path matching vulnerability. The plugin prioritizes longer regex patterns over more specific ones when matching paths, which can lead to less restrictive CORS policies being applied to sensitive endpoints. This mismatch in regex pattern priority allows unauthorized cross-origin access to sensitive data or functionality, potentially exposing confidential information and increasing the risk of unauthorized actions by malicious actors.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-6839","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"65f74986713841ab6fa6486a785fe125d1ba3a24","message":{"text":"Package: Flask-CORS\nInstalled Version: 4.0.0\nVulnerability CVE-2024-6839\nSeverity: MEDIUM\nFixed Version: 6.0.0\nLink: [CVE-2024-6839](https://avd.aquasec.com/nvd/cve-2024-6839)"},"location":{"path":"apps/backend/requirements.txt","start_line":6,"end_line":6,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/15/instances","dismissal_approved_by":null},{"number":14,"created_at":"2025-08-13T01:37:56Z","updated_at":"2025-08-17T20:08:57Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/14","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/14","state":"fixed","fixed_at":"2025-08-17T20:08:57Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-1681","severity":"warning","description":"corydolphin/flask-cors is vulnerable to log injection when the log lev ...","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"corydolphin/flask-cors is vulnerable to log injection when the log level is set to debug. An attacker can inject fake log entries into the log file by sending a specially crafted GET request containing a CRLF sequence in the request path. This vulnerability allows attackers to corrupt log files, potentially covering tracks of other attacks, confusing log post-processing tools, and forging log entries. The issue is due to improper output neutralization for logs.","help":"**Vulnerability CVE-2024-1681**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Flask-CORS|4.0.1|[CVE-2024-1681](https://avd.aquasec.com/nvd/cve-2024-1681)|\n\ncorydolphin/flask-cors is vulnerable to log injection when the log level is set to debug. An attacker can inject fake log entries into the log file by sending a specially crafted GET request containing a CRLF sequence in the request path. This vulnerability allows attackers to corrupt log files, potentially covering tracks of other attacks, confusing log post-processing tools, and forging log entries. The issue is due to improper output neutralization for logs.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-1681","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"65f74986713841ab6fa6486a785fe125d1ba3a24","message":{"text":"Package: Flask-CORS\nInstalled Version: 4.0.0\nVulnerability CVE-2024-1681\nSeverity: MEDIUM\nFixed Version: 4.0.1\nLink: [CVE-2024-1681](https://avd.aquasec.com/nvd/cve-2024-1681)"},"location":{"path":"apps/backend/requirements.txt","start_line":6,"end_line":6,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/14/instances","dismissal_approved_by":null},{"number":13,"created_at":"2025-08-13T01:37:56Z","updated_at":"2025-08-17T20:08:57Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/13","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/13","state":"fixed","fixed_at":"2025-08-17T20:08:57Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-6221","severity":"error","description":"A vulnerability in corydolphin/flask-cors version 4.0.1 allows the `Ac ...","name":"LanguageSpecificPackageVulnerability","tags":["HIGH","security","vulnerability"],"full_description":"A vulnerability in corydolphin/flask-cors version 4.0.1 allows the `Access-Control-Allow-Private-Network` CORS header to be set to true by default. This behavior can expose private network resources to unauthorized external access, leading to significant security risks such as data breaches, unauthorized access to sensitive information, and potential network intrusions.","help":"**Vulnerability CVE-2024-6221**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|Flask-CORS|4.0.2|[CVE-2024-6221](https://avd.aquasec.com/nvd/cve-2024-6221)|\n\nA vulnerability in corydolphin/flask-cors version 4.0.1 allows the `Access-Control-Allow-Private-Network` CORS header to be set to true by default. This behavior can expose private network resources to unauthorized external access, leading to significant security risks such as data breaches, unauthorized access to sensitive information, and potential network intrusions.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-6221","security_severity_level":"high"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"65f74986713841ab6fa6486a785fe125d1ba3a24","message":{"text":"Package: Flask-CORS\nInstalled Version: 4.0.0\nVulnerability CVE-2024-6221\nSeverity: HIGH\nFixed Version: 4.0.2\nLink: [CVE-2024-6221](https://avd.aquasec.com/nvd/cve-2024-6221)"},"location":{"path":"apps/backend/requirements.txt","start_line":6,"end_line":6,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/13/instances","dismissal_approved_by":null},{"number":12,"created_at":"2025-08-07T01:33:56Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/12","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/12","state":"fixed","fixed_at":"2025-08-18T03:01:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-47081","severity":"warning","description":"requests: Requests vulnerable to .netrc credentials leak via malicious URLs","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"Requests is a HTTP library. Due to a URL parsing issue, Requests releases prior to 2.32.4 may leak .netrc credentials to third parties for specific maliciously-crafted URLs. Users should upgrade to version 2.32.4 to receive a fix. For older versions of Requests, use of the .netrc file can be disabled with `trust_env=False` on one's Requests Session.","help":"**Vulnerability CVE-2024-47081**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|requests|2.32.4|[CVE-2024-47081](https://avd.aquasec.com/nvd/cve-2024-47081)|\n\nRequests is a HTTP library. Due to a URL parsing issue, Requests releases prior to 2.32.4 may leak .netrc credentials to third parties for specific maliciously-crafted URLs. Users should upgrade to version 2.32.4 to receive a fix. For older versions of Requests, use of the .netrc file can be disabled with `trust_env=False` on one's Requests Session.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-47081","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"Package: requests\nInstalled Version: 2.31.0\nVulnerability CVE-2024-47081\nSeverity: MEDIUM\nFixed Version: 2.32.4\nLink: [CVE-2024-47081](https://avd.aquasec.com/nvd/cve-2024-47081)"},"location":{"path":"apps/backend/requirements.txt","start_line":19,"end_line":19,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/12/instances","dismissal_approved_by":null},{"number":11,"created_at":"2025-08-07T01:33:56Z","updated_at":"2025-08-18T03:01:06Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/11","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/11","state":"fixed","fixed_at":"2025-08-18T03:01:06Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-35195","severity":"warning","description":"requests: subsequent requests to the same host ignore cert verification","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"Requests is a HTTP library. Prior to 2.32.0, when making requests through a Requests `Session`, if the first request is made with `verify=False` to disable cert verification, all subsequent requests to the same host will continue to ignore cert verification regardless of changes to the value of `verify`. This behavior will continue for the lifecycle of the connection in the connection pool. This vulnerability is fixed in 2.32.0.","help":"**Vulnerability CVE-2024-35195**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|requests|2.32.0|[CVE-2024-35195](https://avd.aquasec.com/nvd/cve-2024-35195)|\n\nRequests is a HTTP library. Prior to 2.32.0, when making requests through a Requests `Session`, if the first request is made with `verify=False` to disable cert verification, all subsequent requests to the same host will continue to ignore cert verification regardless of changes to the value of `verify`. This behavior will continue for the lifecycle of the connection in the connection pool. This vulnerability is fixed in 2.32.0.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-35195","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"e3eca283adcc619a5fe9f50bb19e5d308a6f9ca1","message":{"text":"Package: requests\nInstalled Version: 2.31.0\nVulnerability CVE-2024-35195\nSeverity: MEDIUM\nFixed Version: 2.32.0\nLink: [CVE-2024-35195](https://avd.aquasec.com/nvd/cve-2024-35195)"},"location":{"path":"apps/backend/requirements.txt","start_line":19,"end_line":19,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/11/instances","dismissal_approved_by":null},{"number":10,"created_at":"2025-08-07T01:33:56Z","updated_at":"2025-08-13T01:37:56Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/10","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/10","state":"fixed","fixed_at":"2025-08-13T01:37:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-6827","severity":"error","description":"gunicorn: HTTP Request Smuggling in benoitc/gunicorn","name":"LanguageSpecificPackageVulnerability","tags":["HIGH","security","vulnerability"],"full_description":"Gunicorn version 21.2.0 does not properly validate the value of the 'Transfer-Encoding' header as specified in the RFC standards, which leads to the default fallback method of 'Content-Length,' making it vulnerable to TE.CL request smuggling. This vulnerability can lead to cache poisoning, data exposure, session manipulation, SSRF, XSS, DoS, data integrity compromise, security bypass, information leakage, and business logic abuse.","help":"**Vulnerability CVE-2024-6827**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|gunicorn|23.0.0|[CVE-2024-6827](https://avd.aquasec.com/nvd/cve-2024-6827)|\n\nGunicorn version 21.2.0 does not properly validate the value of the 'Transfer-Encoding' header as specified in the RFC standards, which leads to the default fallback method of 'Content-Length,' making it vulnerable to TE.CL request smuggling. This vulnerability can lead to cache poisoning, data exposure, session manipulation, SSRF, XSS, DoS, data integrity compromise, security bypass, information leakage, and business logic abuse.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-6827","security_severity_level":"high"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"2b7ce0502e391c118e4e5616a7594fff46fc8309","message":{"text":"Package: gunicorn\nInstalled Version: 21.2.0\nVulnerability CVE-2024-6827\nSeverity: HIGH\nFixed Version: 23.0.0\nLink: [CVE-2024-6827](https://avd.aquasec.com/nvd/cve-2024-6827)"},"location":{"path":"apps/backend/requirements.txt","start_line":27,"end_line":27,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/10/instances","dismissal_approved_by":null},{"number":9,"created_at":"2025-08-07T01:33:56Z","updated_at":"2025-08-13T01:37:56Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/9","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/9","state":"fixed","fixed_at":"2025-08-13T01:37:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-1135","severity":"error","description":"python-gunicorn: HTTP Request Smuggling due to improper validation of Transfer-Encoding headers","name":"LanguageSpecificPackageVulnerability","tags":["HIGH","security","vulnerability"],"full_description":"Gunicorn fails to properly validate Transfer-Encoding headers, leading to HTTP Request Smuggling (HRS) vulnerabilities. By crafting requests with conflicting Transfer-Encoding headers, attackers can bypass security restrictions and access restricted endpoints. This issue is due to Gunicorn's handling of Transfer-Encoding headers, where it incorrectly processes requests with multiple, conflicting Transfer-Encoding headers, treating them as chunked regardless of the final encoding specified. This vulnerability allows for a range of attacks including cache poisoning, session manipulation, and data exposure.","help":"**Vulnerability CVE-2024-1135**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|gunicorn|22.0.0|[CVE-2024-1135](https://avd.aquasec.com/nvd/cve-2024-1135)|\n\nGunicorn fails to properly validate Transfer-Encoding headers, leading to HTTP Request Smuggling (HRS) vulnerabilities. By crafting requests with conflicting Transfer-Encoding headers, attackers can bypass security restrictions and access restricted endpoints. This issue is due to Gunicorn's handling of Transfer-Encoding headers, where it incorrectly processes requests with multiple, conflicting Transfer-Encoding headers, treating them as chunked regardless of the final encoding specified. This vulnerability allows for a range of attacks including cache poisoning, session manipulation, and data exposure.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-1135","security_severity_level":"high"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"2b7ce0502e391c118e4e5616a7594fff46fc8309","message":{"text":"Package: gunicorn\nInstalled Version: 21.2.0\nVulnerability CVE-2024-1135\nSeverity: HIGH\nFixed Version: 22.0.0\nLink: [CVE-2024-1135](https://avd.aquasec.com/nvd/cve-2024-1135)"},"location":{"path":"apps/backend/requirements.txt","start_line":27,"end_line":27,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/9/instances","dismissal_approved_by":null},{"number":8,"created_at":"2025-08-07T01:33:56Z","updated_at":"2025-08-13T01:37:56Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/8","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/8","state":"fixed","fixed_at":"2025-08-13T01:37:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-49767","severity":"warning","description":"werkzeug: python-werkzeug: Werkzeug possible resource exhaustion when parsing file data in forms","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"Werkzeug is a Web Server Gateway Interface web application library. Applications using `werkzeug.formparser.MultiPartParser` corresponding to a version of Werkzeug prior to 3.0.6 to parse `multipart/form-data` requests (e.g. all flask applications) are vulnerable to a relatively simple but effective resource exhaustion (denial of service) attack. A specifically crafted form submission request can cause the parser to allocate and block 3 to 8 times the upload size in main memory. There is no upper limit; a single upload at 1 Gbit/s can exhaust 32 GB of RAM in less than 60 seconds. Werkzeug version 3.0.6 fixes this issue.","help":"**Vulnerability CVE-2024-49767**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Werkzeug|3.0.6|[CVE-2024-49767](https://avd.aquasec.com/nvd/cve-2024-49767)|\n\nWerkzeug is a Web Server Gateway Interface web application library. Applications using `werkzeug.formparser.MultiPartParser` corresponding to a version of Werkzeug prior to 3.0.6 to parse `multipart/form-data` requests (e.g. all flask applications) are vulnerable to a relatively simple but effective resource exhaustion (denial of service) attack. A specifically crafted form submission request can cause the parser to allocate and block 3 to 8 times the upload size in main memory. There is no upper limit; a single upload at 1 Gbit/s can exhaust 32 GB of RAM in less than 60 seconds. Werkzeug version 3.0.6 fixes this issue.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-49767","security_severity_level":"high"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"2b7ce0502e391c118e4e5616a7594fff46fc8309","message":{"text":"Package: Werkzeug\nInstalled Version: 3.0.1\nVulnerability CVE-2024-49767\nSeverity: MEDIUM\nFixed Version: 3.0.6\nLink: [CVE-2024-49767](https://avd.aquasec.com/nvd/cve-2024-49767)"},"location":{"path":"apps/backend/requirements.txt","start_line":7,"end_line":7,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/8/instances","dismissal_approved_by":null},{"number":7,"created_at":"2025-08-07T01:33:56Z","updated_at":"2025-08-13T01:37:56Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/7","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/7","state":"fixed","fixed_at":"2025-08-13T01:37:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-49766","severity":"warning","description":"werkzeug: python-werkzeug: Werkzeug safe_join not safe on Windows","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"Werkzeug is a Web Server Gateway Interface web application library. On Python < 3.11 on Windows, os.path.isabs() does not catch UNC paths like //server/share. Werkzeug's safe_join() relies on this check, and so can produce a path that is not safe, potentially allowing unintended access to data. Applications using Python >= 3.11, or not using Windows, are not vulnerable. Werkzeug version 3.0.6 contains a patch.","help":"**Vulnerability CVE-2024-49766**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Werkzeug|3.0.6|[CVE-2024-49766](https://avd.aquasec.com/nvd/cve-2024-49766)|\n\nWerkzeug is a Web Server Gateway Interface web application library. On Python < 3.11 on Windows, os.path.isabs() does not catch UNC paths like //server/share. Werkzeug's safe_join() relies on this check, and so can produce a path that is not safe, potentially allowing unintended access to data. Applications using Python >= 3.11, or not using Windows, are not vulnerable. Werkzeug version 3.0.6 contains a patch.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-49766","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"2b7ce0502e391c118e4e5616a7594fff46fc8309","message":{"text":"Package: Werkzeug\nInstalled Version: 3.0.1\nVulnerability CVE-2024-49766\nSeverity: MEDIUM\nFixed Version: 3.0.6\nLink: [CVE-2024-49766](https://avd.aquasec.com/nvd/cve-2024-49766)"},"location":{"path":"apps/backend/requirements.txt","start_line":7,"end_line":7,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/7/instances","dismissal_approved_by":null},{"number":6,"created_at":"2025-08-07T01:33:56Z","updated_at":"2025-08-13T01:37:56Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/6","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/6","state":"fixed","fixed_at":"2025-08-13T01:37:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-34069","severity":"error","description":"python-werkzeug: user may execute code on a developer's machine","name":"LanguageSpecificPackageVulnerability","tags":["HIGH","security","vulnerability"],"full_description":"Werkzeug is a comprehensive WSGI web application library. The debugger in affected versions of Werkzeug can allow an attacker to execute code on a developer's machine under some circumstances. This requires the attacker to get the developer to interact with a domain and subdomain they control, and enter the debugger PIN, but if they are successful it allows access to the debugger even if it is only running on localhost. This also requires the attacker to guess a URL in the developer's application that will trigger the debugger. This vulnerability is fixed in 3.0.3.","help":"**Vulnerability CVE-2024-34069**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|Werkzeug|3.0.3|[CVE-2024-34069](https://avd.aquasec.com/nvd/cve-2024-34069)|\n\nWerkzeug is a comprehensive WSGI web application library. The debugger in affected versions of Werkzeug can allow an attacker to execute code on a developer's machine under some circumstances. This requires the attacker to get the developer to interact with a domain and subdomain they control, and enter the debugger PIN, but if they are successful it allows access to the debugger even if it is only running on localhost. This also requires the attacker to guess a URL in the developer's application that will trigger the debugger. This vulnerability is fixed in 3.0.3.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-34069","security_severity_level":"high"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"2b7ce0502e391c118e4e5616a7594fff46fc8309","message":{"text":"Package: Werkzeug\nInstalled Version: 3.0.1\nVulnerability CVE-2024-34069\nSeverity: HIGH\nFixed Version: 3.0.3\nLink: [CVE-2024-34069](https://avd.aquasec.com/nvd/cve-2024-34069)"},"location":{"path":"apps/backend/requirements.txt","start_line":7,"end_line":7,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/6/instances","dismissal_approved_by":null},{"number":5,"created_at":"2025-08-07T01:33:56Z","updated_at":"2025-08-13T01:37:56Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/5","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/5","state":"fixed","fixed_at":"2025-08-13T01:37:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-6866","severity":"warning","description":"corydolphin/flask-cors version 4.01 contains a vulnerability where the ...","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"corydolphin/flask-cors version 4.01 contains a vulnerability where the request path matching is case-insensitive due to the use of the `try_match` function, which is originally intended for matching hosts. This results in a mismatch because paths in URLs are case-sensitive, but the regex matching treats them as case-insensitive. This misconfiguration can lead to significant security vulnerabilities, allowing unauthorized origins to access paths meant to be restricted, resulting in data exposure and potential data leaks.","help":"**Vulnerability CVE-2024-6866**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Flask-CORS|6.0.0|[CVE-2024-6866](https://avd.aquasec.com/nvd/cve-2024-6866)|\n\ncorydolphin/flask-cors version 4.01 contains a vulnerability where the request path matching is case-insensitive due to the use of the `try_match` function, which is originally intended for matching hosts. This results in a mismatch because paths in URLs are case-sensitive, but the regex matching treats them as case-insensitive. This misconfiguration can lead to significant security vulnerabilities, allowing unauthorized origins to access paths meant to be restricted, resulting in data exposure and potential data leaks.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-6866","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"2b7ce0502e391c118e4e5616a7594fff46fc8309","message":{"text":"Package: Flask-CORS\nInstalled Version: 4.0.0\nVulnerability CVE-2024-6866\nSeverity: MEDIUM\nFixed Version: 6.0.0\nLink: [CVE-2024-6866](https://avd.aquasec.com/nvd/cve-2024-6866)"},"location":{"path":"apps/backend/requirements.txt","start_line":6,"end_line":6,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/5/instances","dismissal_approved_by":null},{"number":4,"created_at":"2025-08-07T01:33:56Z","updated_at":"2025-08-13T01:37:56Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/4","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/4","state":"fixed","fixed_at":"2025-08-13T01:37:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-6844","severity":"warning","description":"A vulnerability in corydolphin/flask-cors version 4.0.1 allows for inc ...","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"A vulnerability in corydolphin/flask-cors version 4.0.1 allows for inconsistent CORS matching due to the handling of the '+' character in URL paths. The request.path is passed through the unquote_plus function, which converts the '+' character to a space ' '. This behavior leads to incorrect path normalization, causing potential mismatches in CORS configuration. As a result, endpoints may not be matched correctly to their CORS settings, leading to unexpected CORS policy application. This can cause unauthorized cross-origin access or block valid requests, creating security vulnerabilities and usability issues.","help":"**Vulnerability CVE-2024-6844**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Flask-CORS|6.0.0|[CVE-2024-6844](https://avd.aquasec.com/nvd/cve-2024-6844)|\n\nA vulnerability in corydolphin/flask-cors version 4.0.1 allows for inconsistent CORS matching due to the handling of the '+' character in URL paths. The request.path is passed through the unquote_plus function, which converts the '+' character to a space ' '. This behavior leads to incorrect path normalization, causing potential mismatches in CORS configuration. As a result, endpoints may not be matched correctly to their CORS settings, leading to unexpected CORS policy application. This can cause unauthorized cross-origin access or block valid requests, creating security vulnerabilities and usability issues.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-6844","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"2b7ce0502e391c118e4e5616a7594fff46fc8309","message":{"text":"Package: Flask-CORS\nInstalled Version: 4.0.0\nVulnerability CVE-2024-6844\nSeverity: MEDIUM\nFixed Version: 6.0.0\nLink: [CVE-2024-6844](https://avd.aquasec.com/nvd/cve-2024-6844)"},"location":{"path":"apps/backend/requirements.txt","start_line":6,"end_line":6,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/4/instances","dismissal_approved_by":null},{"number":3,"created_at":"2025-08-07T01:33:56Z","updated_at":"2025-08-13T01:37:56Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/3","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/3","state":"fixed","fixed_at":"2025-08-13T01:37:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-6839","severity":"warning","description":"corydolphin/flask-cors version 4.0.1 contains an improper regex path m ...","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"corydolphin/flask-cors version 4.0.1 contains an improper regex path matching vulnerability. The plugin prioritizes longer regex patterns over more specific ones when matching paths, which can lead to less restrictive CORS policies being applied to sensitive endpoints. This mismatch in regex pattern priority allows unauthorized cross-origin access to sensitive data or functionality, potentially exposing confidential information and increasing the risk of unauthorized actions by malicious actors.","help":"**Vulnerability CVE-2024-6839**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Flask-CORS|6.0.0|[CVE-2024-6839](https://avd.aquasec.com/nvd/cve-2024-6839)|\n\ncorydolphin/flask-cors version 4.0.1 contains an improper regex path matching vulnerability. The plugin prioritizes longer regex patterns over more specific ones when matching paths, which can lead to less restrictive CORS policies being applied to sensitive endpoints. This mismatch in regex pattern priority allows unauthorized cross-origin access to sensitive data or functionality, potentially exposing confidential information and increasing the risk of unauthorized actions by malicious actors.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-6839","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"2b7ce0502e391c118e4e5616a7594fff46fc8309","message":{"text":"Package: Flask-CORS\nInstalled Version: 4.0.0\nVulnerability CVE-2024-6839\nSeverity: MEDIUM\nFixed Version: 6.0.0\nLink: [CVE-2024-6839](https://avd.aquasec.com/nvd/cve-2024-6839)"},"location":{"path":"apps/backend/requirements.txt","start_line":6,"end_line":6,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/3/instances","dismissal_approved_by":null},{"number":2,"created_at":"2025-08-07T01:33:56Z","updated_at":"2025-08-13T01:37:56Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/2","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/2","state":"fixed","fixed_at":"2025-08-13T01:37:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-1681","severity":"warning","description":"corydolphin/flask-cors is vulnerable to log injection when the log lev ...","name":"LanguageSpecificPackageVulnerability","tags":["MEDIUM","security","vulnerability"],"full_description":"corydolphin/flask-cors is vulnerable to log injection when the log level is set to debug. An attacker can inject fake log entries into the log file by sending a specially crafted GET request containing a CRLF sequence in the request path. This vulnerability allows attackers to corrupt log files, potentially covering tracks of other attacks, confusing log post-processing tools, and forging log entries. The issue is due to improper output neutralization for logs.","help":"**Vulnerability CVE-2024-1681**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|Flask-CORS|4.0.1|[CVE-2024-1681](https://avd.aquasec.com/nvd/cve-2024-1681)|\n\ncorydolphin/flask-cors is vulnerable to log injection when the log level is set to debug. An attacker can inject fake log entries into the log file by sending a specially crafted GET request containing a CRLF sequence in the request path. This vulnerability allows attackers to corrupt log files, potentially covering tracks of other attacks, confusing log post-processing tools, and forging log entries. The issue is due to improper output neutralization for logs.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-1681","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"2b7ce0502e391c118e4e5616a7594fff46fc8309","message":{"text":"Package: Flask-CORS\nInstalled Version: 4.0.0\nVulnerability CVE-2024-1681\nSeverity: MEDIUM\nFixed Version: 4.0.1\nLink: [CVE-2024-1681](https://avd.aquasec.com/nvd/cve-2024-1681)"},"location":{"path":"apps/backend/requirements.txt","start_line":6,"end_line":6,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/2/instances","dismissal_approved_by":null},{"number":1,"created_at":"2025-08-07T01:33:56Z","updated_at":"2025-08-13T01:37:56Z","url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1","html_url":"https://github.com/AnalineS/roteirosdedispersacao/security/code-scanning/1","state":"fixed","fixed_at":"2025-08-13T01:37:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"CVE-2024-6221","severity":"error","description":"A vulnerability in corydolphin/flask-cors version 4.0.1 allows the `Ac ...","name":"LanguageSpecificPackageVulnerability","tags":["HIGH","security","vulnerability"],"full_description":"A vulnerability in corydolphin/flask-cors version 4.0.1 allows the `Access-Control-Allow-Private-Network` CORS header to be set to true by default. This behavior can expose private network resources to unauthorized external access, leading to significant security risks such as data breaches, unauthorized access to sensitive information, and potential network intrusions.","help":"**Vulnerability CVE-2024-6221**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|Flask-CORS|4.0.2|[CVE-2024-6221](https://avd.aquasec.com/nvd/cve-2024-6221)|\n\nA vulnerability in corydolphin/flask-cors version 4.0.1 allows the `Access-Control-Allow-Private-Network` CORS header to be set to true by default. This behavior can expose private network resources to unauthorized external access, leading to significant security risks such as data breaches, unauthorized access to sensitive information, and potential network intrusions.","help_uri":"https://avd.aquasec.com/nvd/cve-2024-6221","security_severity_level":"high"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/deploy.yml:security-scan","environment":"{}","category":".github/workflows/deploy.yml:security-scan","state":"fixed","commit_sha":"2b7ce0502e391c118e4e5616a7594fff46fc8309","message":{"text":"Package: Flask-CORS\nInstalled Version: 4.0.0\nVulnerability CVE-2024-6221\nSeverity: HIGH\nFixed Version: 4.0.2\nLink: [CVE-2024-6221](https://avd.aquasec.com/nvd/cve-2024-6221)"},"location":{"path":"apps/backend/requirements.txt","start_line":6,"end_line":6,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/AnalineS/roteirosdedispersacao/code-scanning/alerts/1/instances","dismissal_approved_by":null}]