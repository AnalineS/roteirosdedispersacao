#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Setup e Configura√ß√£o Astra DB para Hansen√≠ase RAG
Script para configurar conex√£o, keyspace, e tabelas do Astra DB
Seguindo FASE 3.1 do PLANO Q2 2025 - IA e Machine Learning
"""

import os
import sys
import json
import uuid
import asyncio
import logging
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime, timezone
from pathlib import Path

# Importa√ß√µes para Astra DB
try:
    from cassandra.cluster import Cluster
    from cassandra.auth import PlainTextAuthProvider
    from cassandra.policies import RoundRobinPolicy
    from cassandra import ConsistencyLevel
    from cassandra.query import SimpleStatement
    import requests
except ImportError as e:
    print(f"‚ùå Depend√™ncias faltando. Execute: pip install cassandra-driver requests")
    sys.exit(1)

# Importar config do sistema
sys.path.append(str(Path(__file__).parent.parent))
from app_config import config, EnvironmentConfig

class AstraDBSetup:
    """Setup e configura√ß√£o completa do Astra DB para RAG Hansen√≠ase"""
    
    def __init__(self):
        self.config = config
        self.session = None
        self.cluster = None
        
        # Configura√ß√µes do Astra DB
        self.astra_url = self.config.ASTRA_DB_URL
        self.astra_token = self.config.ASTRA_DB_TOKEN
        self.keyspace = self.config.ASTRA_DB_KEYSPACE or 'hanseniase_rag'
        
        # Configura√ß√µes de logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
        
    def validate_credentials(self) -> bool:
        """Validar credenciais Astra DB"""
        print("üîê Validando credenciais Astra DB...")
        
        if not self.astra_url:
            print("‚ùå ASTRA_DB_URL n√£o configurada")
            return False
        
        if not self.astra_token:
            print("‚ùå ASTRA_DB_TOKEN n√£o configurada")
            return False
        
        print("‚úÖ Credenciais b√°sicas encontradas")
        
        # Verificar formato do token
        if not self.astra_token.startswith('AstraCS:'):
            print("‚ö†Ô∏è Token pode n√£o estar no formato correto (deve come√ßar com 'AstraCS:')")
        
        print(f"üìç URL: {self.astra_url[:50]}...")
        print(f"üîë Token: {self.astra_token[:20]}...")
        print(f"üè† Keyspace: {self.keyspace}")
        
        return True
        
    def test_connection(self) -> Tuple[bool, Dict[str, Any]]:
        """Testar conex√£o com Astra DB"""
        print("\nüîó Testando conex√£o com Astra DB...")
        
        connection_info = {
            "status": "failed",
            "latency_ms": None,
            "error": None,
            "node_count": 0,
            "consistency_level": None
        }
        
        try:
            start_time = datetime.now()
            
            # Configurar autentica√ß√£o
            auth_provider = PlainTextAuthProvider(
                username='token',
                password=self.astra_token
            )
            
            # Extrair hostname da URL
            if 'https://' in self.astra_url:
                hostname = self.astra_url.replace('https://', '').split('/')[0]
            else:
                hostname = self.astra_url.split('/')[0]
            
            print(f"üåê Conectando em: {hostname}")
            
            # Criar cluster
            self.cluster = Cluster(
                [hostname],
                auth_provider=auth_provider,
                port=9042,  # Porta padr√£o do Cassandra
                load_balancing_policy=RoundRobinPolicy(),
                protocol_version=4
            )
            
            # Conectar
            self.session = self.cluster.connect()
            
            # Calcular lat√™ncia
            end_time = datetime.now()
            latency = (end_time - start_time).total_seconds() * 1000
            
            # Obter informa√ß√µes do cluster
            metadata = self.cluster.metadata
            node_count = len(metadata.all_hosts())
            
            connection_info.update({
                "status": "success",
                "latency_ms": round(latency, 2),
                "node_count": node_count,
                "consistency_level": "LOCAL_QUORUM"
            })
            
            print(f"‚úÖ Conex√£o estabelecida!")
            print(f"‚ö° Lat√™ncia: {latency:.2f}ms")
            print(f"üñ•Ô∏è N√≥s conectados: {node_count}")
            
            return True, connection_info
            
        except Exception as e:
            error_msg = str(e)
            connection_info["error"] = error_msg
            
            print(f"‚ùå Erro na conex√£o: {error_msg}")
            
            # Sugest√µes de troubleshooting
            if "Authentication failed" in error_msg:
                print("üí° Verifique se o token est√° correto e ativo")
            elif "No host available" in error_msg:
                print("üí° Verifique se a URL est√° correta e a database est√° ativa")
            elif "Connection refused" in error_msg:
                print("üí° Verifique conectividade de rede")
            
            return False, connection_info
    
    def setup_keyspace(self) -> bool:
        """Criar keyspace se n√£o existir"""
        print(f"\nüè† Configurando keyspace '{self.keyspace}'...")
        
        if not self.session:
            print("‚ùå Sess√£o n√£o estabelecida")
            return False
        
        try:
            # Verificar se keyspace existe
            keyspaces = self.session.execute("SELECT keyspace_name FROM system_schema.keyspaces")
            existing_keyspaces = [row.keyspace_name for row in keyspaces]
            
            if self.keyspace in existing_keyspaces:
                print(f"‚úÖ Keyspace '{self.keyspace}' j√° existe")
                self.session.set_keyspace(self.keyspace)
                return True
            
            # Criar keyspace
            create_keyspace_cql = f"""
            CREATE KEYSPACE IF NOT EXISTS {self.keyspace}
            WITH replication = {{
                'class': 'NetworkTopologyStrategy',
                'datacenter1': 1
            }}
            """
            
            print(f"üìù Criando keyspace...")
            self.session.execute(create_keyspace_cql)
            self.session.set_keyspace(self.keyspace)
            
            print(f"‚úÖ Keyspace '{self.keyspace}' criado com sucesso")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao configurar keyspace: {e}")
            return False
    
    def create_embeddings_table(self) -> bool:
        """Criar tabela de embeddings otimizada para RAG"""
        print("\nüìä Criando tabela de embeddings...")
        
        if not self.session:
            print("‚ùå Sess√£o n√£o estabelecida")
            return False
        
        try:
            # Schema otimizado para vetoriza√ß√£o m√©dica
            create_table_cql = """
            CREATE TABLE IF NOT EXISTS embeddings (
                id UUID PRIMARY KEY,
                document_id TEXT,
                chunk_index INT,
                content TEXT,
                embedding VECTOR<FLOAT, 768>,
                metadata MAP<TEXT, TEXT>,
                source_file TEXT,
                source_category TEXT,
                content_type TEXT,
                medical_priority FLOAT,
                created_at TIMESTAMP,
                updated_at TIMESTAMP
            )
            """
            
            print("üìù Executando cria√ß√£o da tabela...")
            self.session.execute(create_table_cql)
            
            # Criar √≠ndices para busca otimizada
            indexes = [
                "CREATE INDEX IF NOT EXISTS idx_embeddings_document ON embeddings (document_id);",
                "CREATE INDEX IF NOT EXISTS idx_embeddings_source ON embeddings (source_file);",
                "CREATE INDEX IF NOT EXISTS idx_embeddings_category ON embeddings (source_category);",
                "CREATE INDEX IF NOT EXISTS idx_embeddings_type ON embeddings (content_type);",
                "CREATE INDEX IF NOT EXISTS idx_embeddings_priority ON embeddings (medical_priority);"
            ]
            
            print("üîç Criando √≠ndices otimizados...")
            for idx_cql in indexes:
                try:
                    self.session.execute(idx_cql)
                    print(f"  ‚úÖ √çndice criado")
                except Exception as e:
                    print(f"  ‚ö†Ô∏è √çndice j√° existe ou erro: {e}")
            
            print("‚úÖ Tabela de embeddings configurada com sucesso")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao criar tabela de embeddings: {e}")
            return False
    
    def create_analytics_table(self) -> bool:
        """Criar tabela para an√°lise preditiva"""
        print("\nüìà Criando tabela de analytics...")
        
        try:
            create_analytics_cql = """
            CREATE TABLE IF NOT EXISTS analytics (
                id UUID PRIMARY KEY,
                session_id TEXT,
                user_query TEXT,
                persona_used TEXT,
                response_quality FLOAT,
                medical_accuracy FLOAT,
                user_satisfaction FLOAT,
                query_category TEXT,
                response_tokens INT,
                processing_time_ms INT,
                created_at TIMESTAMP,
                metadata MAP<TEXT, TEXT>
            )
            """
            
            self.session.execute(create_analytics_cql)
            
            # √çndices para analytics
            analytics_indexes = [
                "CREATE INDEX IF NOT EXISTS idx_analytics_session ON analytics (session_id);",
                "CREATE INDEX IF NOT EXISTS idx_analytics_persona ON analytics (persona_used);",
                "CREATE INDEX IF NOT EXISTS idx_analytics_category ON analytics (query_category);",
                "CREATE INDEX IF NOT EXISTS idx_analytics_created ON analytics (created_at);"
            ]
            
            for idx_cql in analytics_indexes:
                try:
                    self.session.execute(idx_cql)
                except Exception:
                    pass  # √çndice j√° existe
            
            print("‚úÖ Tabela de analytics configurada")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao criar tabela de analytics: {e}")
            return False
    
    def test_crud_operations(self) -> bool:
        """Testar opera√ß√µes CRUD b√°sicas"""
        print("\nüß™ Testando opera√ß√µes CRUD...")
        
        try:
            # Test INSERT
            test_id = uuid.uuid4()
            test_embedding = [0.1] * 768  # Vetor de teste
            
            insert_cql = """
            INSERT INTO embeddings (
                id, document_id, chunk_index, content, embedding,
                metadata, source_file, source_category, content_type,
                medical_priority, created_at, updated_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """
            
            self.session.execute(insert_cql, [
                test_id,
                'test_doc_001',
                0,
                'Teste de inser√ß√£o para valida√ß√£o do Astra DB',
                test_embedding,
                {'test': 'true', 'validation': 'crud'},
                'test_file.json',
                'qa',
                'validation',
                1.0,
                datetime.now(timezone.utc),
                datetime.now(timezone.utc)
            ])
            
            print("  ‚úÖ INSERT realizado")
            
            # Test SELECT
            select_cql = "SELECT id, content, source_file FROM embeddings WHERE id = ?"
            result = self.session.execute(select_cql, [test_id])
            row = result.one()
            
            if row and row.content == 'Teste de inser√ß√£o para valida√ß√£o do Astra DB':
                print("  ‚úÖ SELECT confirmado")
            else:
                print("  ‚ùå SELECT falhou")
                return False
            
            # Test UPDATE
            update_cql = "UPDATE embeddings SET content = ? WHERE id = ?"
            self.session.execute(update_cql, [
                'Teste atualizado para valida√ß√£o',
                test_id
            ])
            print("  ‚úÖ UPDATE realizado")
            
            # Test DELETE
            delete_cql = "DELETE FROM embeddings WHERE id = ?"
            self.session.execute(delete_cql, [test_id])
            print("  ‚úÖ DELETE realizado")
            
            # Verificar se foi deletado
            verify_result = self.session.execute(select_cql, [test_id])
            if verify_result.one() is None:
                print("  ‚úÖ DELETE confirmado")
            else:
                print("  ‚ùå DELETE falhou")
                return False
            
            print("‚úÖ Todas as opera√ß√µes CRUD funcionando corretamente")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro nas opera√ß√µes CRUD: {e}")
            return False
    
    def test_vector_search(self) -> bool:
        """Testar busca vetorial"""
        print("\nüîç Testando busca vetorial...")
        
        try:
            # Inserir alguns vetores de teste
            test_vectors = [
                {
                    'id': uuid.uuid4(),
                    'content': 'Rifampicina √© um antibi√≥tico usado no tratamento da hansen√≠ase',
                    'embedding': [0.8, 0.2, 0.1] + [0.0] * 765,
                    'category': 'medication'
                },
                {
                    'id': uuid.uuid4(),
                    'content': 'Dapsona √© outro medicamento importante na PQT',
                    'embedding': [0.7, 0.3, 0.2] + [0.0] * 765,
                    'category': 'medication'
                },
                {
                    'id': uuid.uuid4(),
                    'content': 'Orienta√ß√µes sobre dosagem supervisionada',
                    'embedding': [0.1, 0.8, 0.1] + [0.0] * 765,
                    'category': 'protocol'
                }
            ]
            
            # Inserir vetores de teste
            insert_cql = """
            INSERT INTO embeddings (
                id, document_id, chunk_index, content, embedding,
                source_category, content_type, medical_priority, created_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """
            
            for i, vector in enumerate(test_vectors):
                self.session.execute(insert_cql, [
                    vector['id'],
                    f'test_vector_{i}',
                    0,
                    vector['content'],
                    vector['embedding'],
                    vector['category'],
                    'test',
                    1.0,
                    datetime.now(timezone.utc)
                ])
            
            print(f"  ‚úÖ {len(test_vectors)} vetores de teste inseridos")
            
            # Testar busca simples
            search_cql = "SELECT id, content FROM embeddings WHERE source_category = ?"
            results = self.session.execute(search_cql, ['medication'])
            medication_results = list(results)
            
            if len(medication_results) >= 2:
                print(f"  ‚úÖ Busca por categoria encontrou {len(medication_results)} resultados")
            else:
                print(f"  ‚ùå Busca por categoria retornou apenas {len(medication_results)} resultados")
            
            # Limpeza
            for vector in test_vectors:
                self.session.execute("DELETE FROM embeddings WHERE id = ?", [vector['id']])
            
            print("  üßπ Dados de teste removidos")
            print("‚úÖ Busca vetorial funcionando")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro na busca vetorial: {e}")
            return False
    
    def generate_setup_report(self, test_results: Dict[str, Any]) -> str:
        """Gerar relat√≥rio de setup"""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        report = f"""
# üìä Relat√≥rio de Setup Astra DB - Hansen√≠ase RAG

**Data:** {timestamp}
**Keyspace:** {self.keyspace}
**Ambiente:** {EnvironmentConfig.get_current()}

## üîß Resultados dos Testes

### Conex√£o
- Status: {'‚úÖ Sucesso' if test_results.get('connection_success') else '‚ùå Falha'}
- Lat√™ncia: {test_results.get('connection_info', {}).get('latency_ms', 'N/A')}ms
- N√≥s conectados: {test_results.get('connection_info', {}).get('node_count', 'N/A')}

### Configura√ß√£o
- Keyspace: {'‚úÖ Configurado' if test_results.get('keyspace_success') else '‚ùå Falha'}
- Tabela Embeddings: {'‚úÖ Criada' if test_results.get('embeddings_table_success') else '‚ùå Falha'}
- Tabela Analytics: {'‚úÖ Criada' if test_results.get('analytics_table_success') else '‚ùå Falha'}

### Opera√ß√µes
- CRUD: {'‚úÖ Funcionando' if test_results.get('crud_success') else '‚ùå Falha'}
- Busca Vetorial: {'‚úÖ Funcionando' if test_results.get('vector_search_success') else '‚ùå Falha'}

## üìã Schema das Tabelas

### embeddings
- id (UUID PRIMARY KEY)
- document_id (TEXT)
- chunk_index (INT)
- content (TEXT)
- embedding (VECTOR<FLOAT, 768>)
- metadata (MAP<TEXT, TEXT>)
- source_file (TEXT)
- source_category (TEXT)
- content_type (TEXT)
- medical_priority (FLOAT)
- created_at (TIMESTAMP)
- updated_at (TIMESTAMP)

### analytics
- id (UUID PRIMARY KEY)
- session_id (TEXT)
- user_query (TEXT)
- persona_used (TEXT)
- response_quality (FLOAT)
- medical_accuracy (FLOAT)
- user_satisfaction (FLOAT)
- query_category (TEXT)
- response_tokens (INT)
- processing_time_ms (INT)
- created_at (TIMESTAMP)
- metadata (MAP<TEXT, TEXT>)

## üöÄ Pr√≥ximos Passos

1. **FASE 3.2**: Migra√ß√£o de dados estruturados
2. **Popula√ß√£o de Embeddings**: Vetorizar conhecimento m√©dico
3. **Configura√ß√£o de √çndices**: Otimizar para busca sem√¢ntica
4. **Integra√ß√£o com Backend**: Conectar com sistema de chat

## üîß Configura√ß√µes Recomendadas

- **Consistency Level**: LOCAL_QUORUM
- **Batch Size**: 100 documentos por vez
- **Vector Dimension**: 768 (compat√≠vel com BERT m√©dico)
- **Replication Factor**: 1 (single datacenter)

---

**Status Geral:** {'üü¢ PRONTO' if all([
    test_results.get('connection_success'),
    test_results.get('keyspace_success'),
    test_results.get('embeddings_table_success'),
    test_results.get('crud_success')
]) else 'üü° PARCIAL' if test_results.get('connection_success') else 'üî¥ FALHA'}

Gerado por: FASE 3.1 - Setup Astra DB Connection
Vers√£o: Q2-2025-ML-MODERNIZATION
        """.strip()
        
        return report
    
    def cleanup(self):
        """Fechar conex√µes"""
        if self.session:
            self.session.shutdown()
        if self.cluster:
            self.cluster.shutdown()
        print("üîå Conex√µes fechadas")

def main():
    """Fun√ß√£o principal do setup"""
    print("üöÄ FASE 3.1: Setup Conex√£o Astra DB")
    print("=" * 60)
    
    setup = AstraDBSetup()
    test_results = {}
    
    try:
        # 1. Validar credenciais
        if not setup.validate_credentials():
            print("\n‚ùå Credenciais inv√°lidas. Configure as vari√°veis de ambiente:")
            print("  - ASTRA_DB_URL")
            print("  - ASTRA_DB_TOKEN")
            print("  - ASTRA_DB_KEYSPACE (opcional)")
            return False
        
        # 2. Testar conex√£o
        connection_success, connection_info = setup.test_connection()
        test_results['connection_success'] = connection_success
        test_results['connection_info'] = connection_info
        
        if not connection_success:
            print("\n‚ùå N√£o foi poss√≠vel conectar ao Astra DB")
            return False
        
        # 3. Configurar keyspace
        keyspace_success = setup.setup_keyspace()
        test_results['keyspace_success'] = keyspace_success
        
        # 4. Criar tabelas
        embeddings_success = setup.create_embeddings_table()
        analytics_success = setup.create_analytics_table()
        test_results['embeddings_table_success'] = embeddings_success
        test_results['analytics_table_success'] = analytics_success
        
        # 5. Testar opera√ß√µes
        crud_success = setup.test_crud_operations()
        vector_search_success = setup.test_vector_search()
        test_results['crud_success'] = crud_success
        test_results['vector_search_success'] = vector_search_success
        
        # 6. Gerar relat√≥rio
        report = setup.generate_setup_report(test_results)
        
        # Salvar relat√≥rio
        report_path = Path(__file__).parent.parent / 'astra_setup_report.md'
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"\nüìÑ Relat√≥rio salvo em: {report_path}")
        
        # Status final
        success_count = sum([
            test_results.get('connection_success', False),
            test_results.get('keyspace_success', False),
            test_results.get('embeddings_table_success', False),
            test_results.get('crud_success', False)
        ])
        
        print("\n" + "=" * 60)
        if success_count == 4:
            print("üéâ ASTRA DB CONFIGURADO COM SUCESSO!")
            print("‚úÖ Todos os testes passaram")
            print("üöÄ Pronto para FASE 3.2: Migra√ß√£o de dados")
        elif success_count >= 2:
            print("üü° SETUP PARCIALMENTE CONCLU√çDO")
            print(f"‚úÖ {success_count}/4 testes passaram")
            print("‚ö†Ô∏è Verifique os erros antes de prosseguir")
        else:
            print("üî¥ SETUP FALHOU")
            print("‚ùå Problemas cr√≠ticos encontrados")
            print("üîß Verifique configura√ß√µes e tente novamente")
        
        print("=" * 60)
        
        return success_count >= 3
        
    except Exception as e:
        print(f"\nüí• Erro cr√≠tico no setup: {e}")
        return False
        
    finally:
        setup.cleanup()

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)