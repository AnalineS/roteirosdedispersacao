# ============================================================================
# DOCKERFILE PRODUCTION COM CELERY - Sistema Hanseníase
# Multi-stage build otimizado para Cloud Run com Workers
# ============================================================================

# === STAGE 1: BUILD DEPENDENCIES ===
FROM python:3.11-slim as builder

# Metadados
LABEL stage="builder"
LABEL maintainer="Roteiro de Dispensação API"
LABEL version="3.0.0"
LABEL description="Backend Flask com Celery Workers"

# Configurações de build
ARG DEBIAN_FRONTEND=noninteractive
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Instalar dependências de build
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    python3-dev \
    curl \
    ca-certificates \
    git \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Criar ambiente virtual
ENV VIRTUAL_ENV=/opt/venv
RUN python -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Copiar requirements
COPY requirements.txt ./

# Instalar dependências Python
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir celery[redis]==5.3.4

# === STAGE 2: RUNTIME ===
FROM python:3.11-slim

# Metadados
LABEL maintainer="Roteiro de Dispensação API"
LABEL version="3.0.0"
LABEL description="Flask + Celery Production"

# Configurações runtime
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PORT=8080
ENV HOST=0.0.0.0

# Instalar apenas runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Criar usuário não-root
RUN groupadd -r apiuser && useradd -r -g apiuser apiuser

# Copiar ambiente virtual do builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Criar diretório da aplicação
WORKDIR /app

# Copiar código da aplicação
COPY --chown=apiuser:apiuser . .

# Tornar script executável
RUN chmod +x start_with_celery.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:${PORT}/health || exit 1

# Expor porta
EXPOSE ${PORT}

# Executar como usuário não-root
USER apiuser

# Comando para iniciar Flask + Celery
CMD ["/bin/bash", "start_with_celery.sh"]