#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Inicializa√ß√£o da Integra√ß√£o Prometheus
===============================================

Inicializa e configura a integra√ß√£o completa com Prometheus para
a plataforma m√©dico-educacional Roteiros de Dispensa√ß√£o.

Caracter√≠sticas:
- Inicializa√ß√£o autom√°tica do sistema de m√©tricas
- Verifica√ß√£o de depend√™ncias
- Configura√ß√£o de alertas m√©dicos
- Integra√ß√£o com performance monitor existente
- Coleta autom√°tica de m√©tricas do sistema

Uso:
    python scripts/start_prometheus_integration.py
    python scripts/start_prometheus_integration.py --port 9091
    python scripts/start_prometheus_integration.py --disable-server

Autor: Sistema de M√©tricas Roteiro de Dispensa√ß√£o  
Data: 2025-08-12
"""

import sys
import os
import argparse
import logging
import time
import threading
from pathlib import Path
from typing import Optional

# Adicionar diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class PrometheusIntegrationBootstrap:
    """Bootstrap para integra√ß√£o Prometheus"""
    
    def __init__(self):
        self.prometheus_integration = None
        self.metrics_server_started = False
        self.background_collector = None
        self.collection_interval = 15  # segundos
        
    def check_dependencies(self) -> bool:
        """Verifica se todas as depend√™ncias est√£o dispon√≠veis"""
        logger.info("üîç Verificando depend√™ncias...")
        
        try:
            # Verificar Prometheus client
            import prometheus_client
            logger.info("‚úÖ prometheus-client dispon√≠vel")
        except ImportError:
            logger.error("‚ùå prometheus-client n√£o encontrado. Execute: pip install prometheus-client")
            return False
        
        try:
            # Verificar configura√ß√£o da aplica√ß√£o
            from app_config import config
            if not config.PROMETHEUS_ENABLED:
                logger.warning("‚ö†Ô∏è  Prometheus desabilitado na configura√ß√£o")
                return False
            logger.info("‚úÖ Configura√ß√£o da aplica√ß√£o OK")
        except ImportError:
            logger.error("‚ùå Erro ao importar configura√ß√£o da aplica√ß√£o")
            return False
        
        try:
            # Verificar sistema de m√©tricas existente
            from core.metrics.performance_monitor import performance_monitor
            logger.info("‚úÖ Performance monitor existente dispon√≠vel")
        except ImportError:
            logger.warning("‚ö†Ô∏è  Performance monitor n√£o dispon√≠vel")
            
        try:
            # Verificar integra√ß√£o Prometheus
            from core.metrics.prometheus_metrics import prometheus_integration
            logger.info("‚úÖ Integra√ß√£o Prometheus dispon√≠vel")
        except ImportError:
            logger.error("‚ùå Erro ao importar integra√ß√£o Prometheus")
            return False
            
        return True
    
    def initialize_prometheus(self, port: Optional[int] = None) -> bool:
        """Inicializa sistema Prometheus"""
        logger.info("üöÄ Inicializando integra√ß√£o Prometheus...")
        
        try:
            from core.metrics.prometheus_metrics import prometheus_integration
            from app_config import config
            
            self.prometheus_integration = prometheus_integration
            
            if not self.prometheus_integration.enabled:
                logger.error("‚ùå Integra√ß√£o Prometheus n√£o habilitada")
                return False
                
            logger.info("‚úÖ Sistema de m√©tricas Prometheus inicializado")
            
            # Inicializar servidor de m√©tricas se solicitado
            if port is not None:
                success = self.prometheus_integration.start_metrics_server(port)
                self.metrics_server_started = success
                
                if success:
                    logger.info(f"üìä Servidor de m√©tricas Prometheus rodando na porta {port}")
                    logger.info(f"üîó Acesse: http://localhost:{port}/metrics")
                else:
                    logger.error("‚ùå Falha ao iniciar servidor de m√©tricas")
                    
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar Prometheus: {e}")
            return False
    
    def start_background_collection(self):
        """Inicia coleta autom√°tica de m√©tricas em background"""
        logger.info("üîÑ Iniciando coleta autom√°tica de m√©tricas...")
        
        def collect_metrics():
            while True:
                try:
                    if self.prometheus_integration and self.prometheus_integration.enabled:
                        self.prometheus_integration.collect_and_export_system_metrics()
                        logger.debug("üìä M√©tricas coletadas e exportadas")
                    time.sleep(self.collection_interval)
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è  Erro na coleta autom√°tica: {e}")
                    time.sleep(self.collection_interval)
        
        self.background_collector = threading.Thread(target=collect_metrics, daemon=True)
        self.background_collector.start()
        logger.info(f"‚úÖ Coleta autom√°tica iniciada (intervalo: {self.collection_interval}s)")
    
    def setup_medical_alerts(self):
        """Configura alertas espec√≠ficos para plataforma m√©dica"""
        logger.info("‚öïÔ∏è  Configurando alertas m√©dicos...")
        
        try:
            from core.metrics.performance_monitor import performance_monitor
            
            def medical_alert_handler(alert_type: str, details: dict):
                """Handler especializado para alertas m√©dicos"""
                severity_map = {
                    'high_cpu_usage': 'CRITICAL',
                    'high_memory_usage': 'CRITICAL', 
                    'high_disk_usage': 'WARNING',
                    'slow_endpoint': 'WARNING',
                    'high_error_rate': 'CRITICAL'
                }
                
                severity = severity_map.get(alert_type, 'INFO')
                
                # Log estruturado para alertas m√©dicos
                logger.warning(f"üö® ALERTA M√âDICO [{severity}] {alert_type}: {details}")
                
                # Registrar no Prometheus se dispon√≠vel
                if self.prometheus_integration and self.prometheus_integration.enabled:
                    self.prometheus_integration.metrics_collector.record_security_event(
                        event_type=f"medical_alert_{alert_type}",
                        severity=severity.lower(),
                        source='performance_monitor'
                    )
            
            performance_monitor.add_alert_callback(medical_alert_handler)
            logger.info("‚úÖ Sistema de alertas m√©dicos configurado")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  Erro ao configurar alertas m√©dicos: {e}")
    
    def display_status(self):
        """Exibe status do sistema"""
        logger.info("üìã Status da Integra√ß√£o Prometheus:")
        logger.info(f"   - Prometheus habilitado: {'‚úÖ' if self.prometheus_integration and self.prometheus_integration.enabled else '‚ùå'}")
        logger.info(f"   - Servidor de m√©tricas: {'‚úÖ' if self.metrics_server_started else '‚ùå'}")
        logger.info(f"   - Coleta autom√°tica: {'‚úÖ' if self.background_collector and self.background_collector.is_alive() else '‚ùå'}")
        
        if self.prometheus_integration and self.prometheus_integration.enabled:
            try:
                from app_config import config
                logger.info(f"   - Porta do servidor: {config.PROMETHEUS_PORT}")
                logger.info(f"   - Namespace: {config.MEDICAL_METRICS_NAMESPACE}")
                logger.info(f"   - Job name: {config.PROMETHEUS_JOB_NAME}")
            except:
                pass
    
    def run_health_check(self):
        """Executa verifica√ß√£o de sa√∫de do sistema"""
        logger.info("üè• Executando health check m√©dico...")
        
        try:
            if not self.prometheus_integration or not self.prometheus_integration.enabled:
                logger.error("‚ùå Sistema Prometheus n√£o dispon√≠vel")
                return False
                
            # Verificar coleta de m√©tricas
            metrics_data, _ = self.prometheus_integration.get_metrics_for_endpoint()
            if len(metrics_data) < 100:  # M√©tricas muito pequenas indicam problema
                logger.warning("‚ö†Ô∏è  Poucas m√©tricas sendo coletadas")
            else:
                logger.info("‚úÖ Coleta de m√©tricas funcionando")
            
            # Verificar integra√ß√£o com performance monitor
            try:
                from core.metrics.performance_monitor import performance_monitor
                current_metrics = performance_monitor.get_current_metrics()
                if current_metrics and current_metrics.get('uptime_seconds', 0) > 0:
                    logger.info("‚úÖ Performance monitor integrado")
                else:
                    logger.warning("‚ö†Ô∏è  Performance monitor com problemas")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  Erro na verifica√ß√£o do performance monitor: {e}")
                
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro no health check: {e}")
            return False
    
    def shutdown(self):
        """Finaliza sistema graciosamente"""
        logger.info("üîÑ Finalizando integra√ß√£o Prometheus...")
        
        if self.prometheus_integration:
            self.prometheus_integration.shutdown()
            
        logger.info("‚úÖ Sistema finalizado")

def main():
    parser = argparse.ArgumentParser(description="Inicializar integra√ß√£o Prometheus para plataforma m√©dica")
    parser.add_argument('--port', type=int, help='Porta para servidor de m√©tricas (padr√£o: configura√ß√£o)')
    parser.add_argument('--disable-server', action='store_true', help='N√£o iniciar servidor HTTP de m√©tricas')
    parser.add_argument('--interval', type=int, default=15, help='Intervalo de coleta em segundos (padr√£o: 15)')
    parser.add_argument('--health-check-only', action='store_true', help='Executar apenas health check')
    
    args = parser.parse_args()
    
    bootstrap = PrometheusIntegrationBootstrap()
    bootstrap.collection_interval = args.interval
    
    try:
        # Verificar depend√™ncias
        if not bootstrap.check_dependencies():
            logger.error("‚ùå Falha na verifica√ß√£o de depend√™ncias")
            sys.exit(1)
            
        # Health check apenas
        if args.health_check_only:
            bootstrap.initialize_prometheus()
            success = bootstrap.run_health_check()
            sys.exit(0 if success else 1)
        
        # Inicializar Prometheus
        port = None if args.disable_server else args.port
        if not bootstrap.initialize_prometheus(port):
            logger.error("‚ùå Falha na inicializa√ß√£o do Prometheus")
            sys.exit(1)
        
        # Configurar alertas m√©dicos
        bootstrap.setup_medical_alerts()
        
        # Iniciar coleta autom√°tica
        bootstrap.start_background_collection()
        
        # Exibir status
        bootstrap.display_status()
        
        # Health check inicial
        bootstrap.run_health_check()
        
        logger.info("üéâ Integra√ß√£o Prometheus totalmente inicializada!")
        logger.info("üìä Sistema coletando m√©tricas m√©dicas continuamente")
        
        if not args.disable_server and bootstrap.metrics_server_started:
            from app_config import config
            port = args.port or config.PROMETHEUS_PORT
            logger.info(f"üåê M√©tricas dispon√≠veis em: http://localhost:{port}/metrics")
        
        logger.info("‚öïÔ∏è  Sistema pronto para monitoramento m√©dico!")
        logger.info("üëã Pressione Ctrl+C para finalizar")
        
        # Loop principal
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            logger.info("üõë Interrup√ß√£o solicitada pelo usu√°rio")
            
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}")
        sys.exit(1)
        
    finally:
        bootstrap.shutdown()

if __name__ == "__main__":
    main()