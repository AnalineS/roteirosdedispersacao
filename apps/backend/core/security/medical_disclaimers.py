# -*- coding: utf-8 -*-
"""
Sistema de Disclaimers M√©dico-Educacionais
==========================================

Gerencia disclaimers e avisos de responsabilidade m√©dica para plataforma educacional
de dispensa√ß√£o farmac√™utica PQT-U, seguindo diretrizes do CFM e legisla√ß√£o brasileira.

Caracter√≠sticas:
- Disclaimers espec√≠ficos por tipo de consulta
- Integra√ß√£o com sistema de personas
- Conformidade com diretrizes m√©dicas brasileiras
- Rastreamento de aceita√ß√£o de termos
- Headers HTTP de responsabilidade m√©dica

Autor: Sistema de Seguran√ßa Roteiro de Dispensa√ß√£o
Data: 2025-08-12
Baseado: PCDT Hansen√≠ase 2022, CFM Resolu√ß√£o 2.314/2022
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List, Tuple
from dataclasses import dataclass
from enum import Enum
from flask import request, jsonify, g
import json

# Import configura√ß√µes
from app_config import config, EnvironmentConfig

logger = logging.getLogger(__name__)

class DisclaimerType(Enum):
    """Tipos de disclaimer m√©dico-educacional"""
    EDUCATIONAL_GENERAL = "educational_general"
    DOSAGE_CALCULATION = "dosage_calculation"
    CLINICAL_GUIDANCE = "clinical_guidance"
    DRUG_INTERACTION = "drug_interaction"
    ADVERSE_EVENTS = "adverse_events"
    EMERGENCY_CONSULTATION = "emergency_consultation"
    PERSONA_CONSULTATION = "persona_consultation"

class ConsultationContext(Enum):
    """Contexto da consulta m√©dica"""
    EDUCATIONAL = "educational"
    PROFESSIONAL_GUIDANCE = "professional_guidance"
    EMERGENCY_SUPPORT = "emergency_support"
    ACADEMIC_RESEARCH = "academic_research"
    TRAINING_SIMULATION = "training_simulation"

@dataclass
class MedicalDisclaimer:
    """Estrutura de disclaimer m√©dico"""
    disclaimer_type: DisclaimerType
    consultation_context: ConsultationContext
    title: str
    content: str
    legal_references: List[str]
    severity_level: str  # info, warning, critical
    requires_acknowledgment: bool
    validity_days: int
    persona_specific: Optional[str] = None

class MedicalDisclaimerSystem:
    """Sistema de gerenciamento de disclaimers m√©dicos"""
    
    def __init__(self):
        self.disclaimers = self._initialize_disclaimers()
        self.user_acknowledgments: Dict[str, Dict[str, datetime]] = {}
        self.disclaimer_impressions: Dict[str, int] = {}
    
    def _initialize_disclaimers(self) -> Dict[DisclaimerType, MedicalDisclaimer]:
        """Inicializa todos os disclaimers m√©dico-educacionais"""
        
        disclaimers = {}
        
        # DISCLAIMER GERAL EDUCACIONAL
        disclaimers[DisclaimerType.EDUCATIONAL_GENERAL] = MedicalDisclaimer(
            disclaimer_type=DisclaimerType.EDUCATIONAL_GENERAL,
            consultation_context=ConsultationContext.EDUCATIONAL,
            title="Plataforma Educacional - Roteiros de Dispensa√ß√£o PQT-U",
            content="""
üéì **IMPORTANTE: PLATAFORMA EDUCACIONAL**

Esta √© uma plataforma educacional baseada na tese de doutorado "Roteiro de Dispensa√ß√£o para Hansen√≠ase PQT-U" (UnB, 2025), desenvolvida exclusivamente para fins educacionais e de pesquisa acad√™mica.

‚ö†Ô∏è **AVISOS IMPORTANTES:**
‚Ä¢ Este sistema N√ÉO substitui consulta m√©dica presencial
‚Ä¢ N√ÉO √© um dispositivo m√©dico ou sistema de telemedicina
‚Ä¢ N√ÉO deve ser usado para diagn√≥sticos ou tratamentos reais
‚Ä¢ Todas as informa√ß√µes s√£o baseadas no PCDT Hansen√≠ase 2022 (Minist√©rio da Sa√∫de)

üî¨ **FINALIDADE EDUCACIONAL:**
‚Ä¢ Capacita√ß√£o de profissionais de sa√∫de
‚Ä¢ Apoio ao ensino farmac√™utico
‚Ä¢ Pesquisa acad√™mica em dispensa√ß√£o farmac√™utica
‚Ä¢ Treinamento em protocolos de hansen√≠ase

‚öñÔ∏è **RESPONSABILIDADE PROFISSIONAL:**
O uso de informa√ß√µes desta plataforma √© de total responsabilidade do profissional de sa√∫de, que deve sempre:
‚Ä¢ Consultar fontes oficiais atualizadas
‚Ä¢ Seguir protocolos institucionais
‚Ä¢ Buscar supervis√£o cl√≠nica quando necess√°rio
‚Ä¢ Exercer julgamento cl√≠nico independente

üìö **BASE CIENT√çFICA:**
Baseado em: PCDT Hansen√≠ase 2022, Diretrizes SBD, OMS Guidelines, literatura cient√≠fica revisada por pares.
            """,
            legal_references=[
                "CFM Resolu√ß√£o 2.314/2022 (Telemedicina)",
                "Lei 13.989/2020 (Telemedicina durante pandemia)",
                "PCDT Hansen√≠ase 2022 - Minist√©rio da Sa√∫de",
                "C√≥digo de √âtica M√©dica - CFM",
                "Lei 5.991/1973 (Controle Sanit√°rio do Com√©rcio de Medicamentos)"
            ],
            severity_level="warning",
            requires_acknowledgment=True,
            validity_days=30
        )
        
        # DISCLAIMER C√ÅLCULO DE DOSES
        disclaimers[DisclaimerType.DOSAGE_CALCULATION] = MedicalDisclaimer(
            disclaimer_type=DisclaimerType.DOSAGE_CALCULATION,
            consultation_context=ConsultationContext.PROFESSIONAL_GUIDANCE,
            title="Calculadora de Doses PQT-U - Uso Educacional",
            content="""
üíä **CALCULADORA DE DOSES PQT-U - FERRAMENTA EDUCACIONAL**

‚ö†Ô∏è **ATEN√á√ÉO CR√çTICA:**
‚Ä¢ Os c√°lculos s√£o baseados no PCDT Hansen√≠ase 2022
‚Ä¢ Sempre CONFIRME os c√°lculos manualmente
‚Ä¢ Considere condi√ß√µes cl√≠nicas espec√≠ficas do paciente
‚Ä¢ Verifique contraindica√ß√µes e intera√ß√µes medicamentosas

üîç **VALIDA√á√ÉO OBRIGAT√ìRIA:**
‚Ä¢ Revise TODOS os par√¢metros inseridos
‚Ä¢ Confirme peso, idade e forma cl√≠nica
‚Ä¢ Verifique hist√≥rico medicamentoso
‚Ä¢ Considere comorbidades e alergias

‚öñÔ∏è **RESPONSABILIDADE CL√çNICA:**
A prescri√ß√£o final √© de EXCLUSIVA responsabilidade do m√©dico assistente. Esta ferramenta √© apenas um aux√≠lio educacional.

üö® **EM CASO DE D√öVIDAS:**
‚Ä¢ Consulte o PCDT Hansen√≠ase 2022 atualizado
‚Ä¢ Entre em contato com refer√™ncia em hansen√≠ase
‚Ä¢ Considere segunda opini√£o m√©dica
‚Ä¢ Documente todas as decis√µes cl√≠nicas
            """,
            legal_references=[
                "PCDT Hansen√≠ase 2022 - Minist√©rio da Sa√∫de",
                "Portaria SCTIE/MS 364/2022",
                "CFM Resolu√ß√£o 1.931/2009 (C√≥digo de √âtica M√©dica)",
                "Lei 5.991/1973 (Controle de Medicamentos)"
            ],
            severity_level="critical",
            requires_acknowledgment=True,
            validity_days=7
        )
        
        # DISCLAIMER INTERA√á√ïES MEDICAMENTOSAS
        disclaimers[DisclaimerType.DRUG_INTERACTION] = MedicalDisclaimer(
            disclaimer_type=DisclaimerType.DRUG_INTERACTION,
            consultation_context=ConsultationContext.PROFESSIONAL_GUIDANCE,
            title="Intera√ß√µes Medicamentosas - Verifica√ß√£o Educacional",
            content="""
üß¨ **SISTEMA DE VERIFICA√á√ÉO DE INTERA√á√ïES - USO EDUCACIONAL**

‚ö†Ô∏è **LIMITA√á√ïES DO SISTEMA:**
‚Ä¢ Base de dados pode n√£o estar 100% atualizada
‚Ä¢ N√£o substitui an√°lise farmacol√≥gica especializada
‚Ä¢ Considere sempre o contexto cl√≠nico individual
‚Ä¢ Intera√ß√µes raras podem n√£o estar listadas

üî¨ **VALIDA√á√ÉO NECESS√ÅRIA:**
‚Ä¢ Consulte fontes farmacol√≥gicas atualizadas
‚Ä¢ Considere farmacocin√©tica individual
‚Ä¢ Avalie relev√¢ncia cl√≠nica das intera√ß√µes
‚Ä¢ Monitore sinais de intera√ß√£o na pr√°tica

üë®‚Äç‚öïÔ∏è **DECIS√ÉO CL√çNICA:**
A interpreta√ß√£o e conduta sobre intera√ß√µes √© responsabilidade exclusiva do profissional prescritor.

üìû **RECURSOS ADICIONAIS:**
‚Ä¢ Centro de Informa√ß√µes sobre Medicamentos (CIM)
‚Ä¢ Farmac√™utico cl√≠nico da institui√ß√£o
‚Ä¢ Literatura farmacol√≥gica especializada
            """,
            legal_references=[
                "Formul√°rio Terap√™utico Nacional 2010",
                "RENAME 2022",
                "Micromedex Drug Interactions",
                "CFM Resolu√ß√£o 1.931/2009"
            ],
            severity_level="warning",
            requires_acknowledgment=True,
            validity_days=15
        )
        
        # DISCLAIMER DR. GASNELIO (Persona T√©cnica)
        disclaimers[DisclaimerType.PERSONA_CONSULTATION] = MedicalDisclaimer(
            disclaimer_type=DisclaimerType.PERSONA_CONSULTATION,
            consultation_context=ConsultationContext.EDUCATIONAL,
            title="Dr. Gasnelio - Assistente T√©cnico-Educacional",
            content="""
üë®‚Äç‚öïÔ∏è **Dr. Gasnelio - Assistente Virtual Educacional**

ü§ñ **NATUREZA DO ASSISTENTE:**
‚Ä¢ Assistente de intelig√™ncia artificial educacional
‚Ä¢ Baseado em literatura cient√≠fica e PCDT 2022
‚Ä¢ N√£o √© um profissional de sa√∫de real
‚Ä¢ N√£o estabelece rela√ß√£o m√©dico-paciente

üéì **PROP√ìSITO EDUCACIONAL:**
‚Ä¢ Apoiar aprendizagem sobre hansen√≠ase
‚Ä¢ Exemplificar comunica√ß√£o t√©cnica
‚Ä¢ Demonstrar racioc√≠nio farmac√™utico
‚Ä¢ Facilitar compreens√£o de protocolos

‚ö†Ô∏è **LIMITA√á√ïES:**
‚Ä¢ Pode conter imprecis√µes ou desatualiza√ß√µes
‚Ä¢ N√£o considera contexto cl√≠nico completo
‚Ä¢ N√£o substitui julgamento profissional
‚Ä¢ Responses podem necessitar verifica√ß√£o

‚úÖ **USO APROPRIADO:**
‚Ä¢ Estudo de casos educacionais
‚Ä¢ Treinamento em protocolos
‚Ä¢ Revis√£o de conceitos t√©cnicos
‚Ä¢ Apoio ao ensino farmac√™utico
            """,
            legal_references=[
                "Lei Geral de Prote√ß√£o de Dados (LGPD)",
                "CFM Resolu√ß√£o 2.314/2022",
                "Marco Civil da Internet - Lei 12.965/2014"
            ],
            severity_level="info",
            requires_acknowledgment=False,
            validity_days=60,
            persona_specific="dr_gasnelio"
        )
        
        # DISCLAIMER EVENTOS ADVERSOS
        disclaimers[DisclaimerType.ADVERSE_EVENTS] = MedicalDisclaimer(
            disclaimer_type=DisclaimerType.ADVERSE_EVENTS,
            consultation_context=ConsultationContext.EMERGENCY_SUPPORT,
            title="Eventos Adversos - Procedimentos de Emerg√™ncia",
            content="""
üö® **EVENTOS ADVERSOS GRAVES - A√á√ÉO IMEDIATA NECESS√ÅRIA**

‚õëÔ∏è **EM CASO DE EMERG√äNCIA:**
‚Ä¢ Interrompa IMEDIATAMENTE o tratamento
‚Ä¢ Procure atendimento m√©dico de urg√™ncia
‚Ä¢ Ligue para SAMU 192 se necess√°rio
‚Ä¢ Notifique o evento ao VigiMed (Anvisa)

üî¥ **SINAIS DE ALARME:**
‚Ä¢ Rea√ß√µes cut√¢neas graves (Stevens-Johnson)
‚Ä¢ Hepatotoxicidade aguda
‚Ä¢ Neuropatia grave progressiva
‚Ä¢ Rea√ß√µes hans√™nicas severas

üìã **DOCUMENTA√á√ÉO OBRIGAT√ìRIA:**
‚Ä¢ Registre todos os sintomas
‚Ä¢ Mantenha receitas e medicamentos
‚Ä¢ Documente cronologia do evento
‚Ä¢ Colete exames complementares

üìû **NOTIFICA√á√ÉO:**
‚Ä¢ VigiMed: notificacoes.anvisa.gov.br
‚Ä¢ Centro de Farmacovigil√¢ncia local
‚Ä¢ Programa de Controle da Hansen√≠ase

‚öñÔ∏è **RESPONSABILIDADE LEGAL:**
A notifica√ß√£o de eventos adversos graves √© obrigat√≥ria conforme RDC 4/2009.
            """,
            legal_references=[
                "RDC Anvisa 4/2009 (Farmacovigil√¢ncia)",
                "Lei 6.360/1976 (Vigil√¢ncia Sanit√°ria)",
                "Portaria SVS/MS 344/1998",
                "PCDT Hansen√≠ase 2022 - Se√ß√£o Farmacovigil√¢ncia"
            ],
            severity_level="critical",
            requires_acknowledgment=True,
            validity_days=90
        )
        
        return disclaimers
    
    def get_applicable_disclaimers(self, request_context: Dict[str, Any]) -> List[MedicalDisclaimer]:
        """Determina quais disclaimers s√£o aplic√°veis ao contexto da request"""
        applicable = []
        
        # Sempre incluir disclaimer geral
        applicable.append(self.disclaimers[DisclaimerType.EDUCATIONAL_GENERAL])
        
        # An√°lise baseada na rota/endpoint
        endpoint = request_context.get('endpoint', '')
        
        if 'calculator' in endpoint or 'dose' in endpoint:
            applicable.append(self.disclaimers[DisclaimerType.DOSAGE_CALCULATION])
        
        if 'interaction' in endpoint:
            applicable.append(self.disclaimers[DisclaimerType.DRUG_INTERACTION])
        
        if 'adverse' in endpoint or 'reaction' in endpoint:
            applicable.append(self.disclaimers[DisclaimerType.ADVERSE_EVENTS])
        
        # An√°lise baseada na persona
        persona = request_context.get('persona', '')
        if persona == 'dr_gasnelio':
            persona_disclaimer = None
            for disclaimer in self.disclaimers.values():
                if disclaimer.persona_specific == 'dr_gasnelio':
                    persona_disclaimer = disclaimer
                    break
            if persona_disclaimer:
                applicable.append(persona_disclaimer)
        
        return applicable
    
    def check_acknowledgment_required(self, user_id: str, disclaimers: List[MedicalDisclaimer]) -> List[MedicalDisclaimer]:
        """Verifica quais disclaimers precisam de acknowledgment"""
        required = []
        user_acks = self.user_acknowledgments.get(user_id, {})
        
        for disclaimer in disclaimers:
            if not disclaimer.requires_acknowledgment:
                continue
            
            disclaimer_key = disclaimer.disclaimer_type.value
            last_ack = user_acks.get(disclaimer_key)
            
            if not last_ack:
                required.append(disclaimer)
            elif datetime.now() - last_ack > timedelta(days=disclaimer.validity_days):
                required.append(disclaimer)
        
        return required
    
    def record_acknowledgment(self, user_id: str, disclaimer_type: DisclaimerType) -> bool:
        """Registra acknowledgment de disclaimer"""
        try:
            if user_id not in self.user_acknowledgments:
                self.user_acknowledgments[user_id] = {}
            
            self.user_acknowledgments[user_id][disclaimer_type.value] = datetime.now()
            
            # Log do acknowledgment
            logger.info(f"Disclaimer acknowledged: {disclaimer_type.value} by user {user_id}")
            
            # Incrementar contador de impress√µes
            self.disclaimer_impressions[disclaimer_type.value] = self.disclaimer_impressions.get(disclaimer_type.value, 0) + 1
            
            return True
        except Exception as e:
            logger.error(f"Erro ao registrar acknowledgment: {e}")
            return False
    
    def get_disclaimer_headers(self, disclaimers: List[MedicalDisclaimer]) -> Dict[str, str]:
        """Gera headers HTTP com informa√ß√µes de disclaimer"""
        headers = {}
        
        # Header principal de disclaimers m√©dicos
        disclaimer_types = [d.disclaimer_type.value for d in disclaimers]
        headers['X-Medical-Disclaimer'] = ','.join(disclaimer_types)
        
        # Header de responsabilidade
        headers['X-Medical-Responsibility'] = 'educational-platform-only'
        
        # Header de conformidade
        headers['X-Medical-Compliance'] = 'PCDT-2022,CFM-2314'
        
        # Header de severidade m√°xima
        max_severity = 'info'
        for disclaimer in disclaimers:
            if disclaimer.severity_level == 'critical':
                max_severity = 'critical'
                break
            elif disclaimer.severity_level == 'warning' and max_severity != 'critical':
                max_severity = 'warning'
        
        headers['X-Medical-Severity'] = max_severity
        
        return headers
    
    def format_disclaimer_response(self, disclaimers: List[MedicalDisclaimer], include_content: bool = True) -> Dict[str, Any]:
        """Formata disclaimers para response JSON"""
        formatted = {
            'timestamp': datetime.now().isoformat(),
            'total_disclaimers': len(disclaimers),
            'max_severity': 'info',
            'disclaimers': []
        }
        
        # Determinar severidade m√°xima
        for disclaimer in disclaimers:
            if disclaimer.severity_level == 'critical':
                formatted['max_severity'] = 'critical'
                break
            elif disclaimer.severity_level == 'warning' and formatted['max_severity'] != 'critical':
                formatted['max_severity'] = 'warning'
        
        # Formatar cada disclaimer
        for disclaimer in disclaimers:
            disclaimer_data = {
                'type': disclaimer.disclaimer_type.value,
                'context': disclaimer.consultation_context.value,
                'title': disclaimer.title,
                'severity': disclaimer.severity_level,
                'requires_acknowledgment': disclaimer.requires_acknowledgment,
                'validity_days': disclaimer.validity_days
            }
            
            if include_content:
                disclaimer_data['content'] = disclaimer.content
                disclaimer_data['legal_references'] = disclaimer.legal_references
            
            if disclaimer.persona_specific:
                disclaimer_data['persona'] = disclaimer.persona_specific
            
            formatted['disclaimers'].append(disclaimer_data)
        
        return formatted
    
    def get_disclaimer_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas dos disclaimers"""
        return {
            'total_disclaimers': len(self.disclaimers),
            'total_acknowledgments': sum(len(acks) for acks in self.user_acknowledgments.values()),
            'unique_users': len(self.user_acknowledgments),
            'impression_counts': dict(self.disclaimer_impressions),
            'disclaimer_types': [dt.value for dt in self.disclaimers.keys()]
        }

# Inst√¢ncia global
medical_disclaimer_system = MedicalDisclaimerSystem()

# Middleware de disclaimers
def add_medical_disclaimers():
    """Middleware para adicionar disclaimers m√©dicos √†s responses"""
    def decorator(f):
        def wrapper(*args, **kwargs):
            # Executar fun√ß√£o original
            response = f(*args, **kwargs)
            
            # Analisar contexto da request
            request_context = {
                'endpoint': request.endpoint or request.path,
                'persona': getattr(g, 'selected_persona', None),
                'method': request.method
            }
            
            # Obter disclaimers aplic√°veis
            applicable_disclaimers = medical_disclaimer_system.get_applicable_disclaimers(request_context)
            
            # Adicionar headers de disclaimer
            if applicable_disclaimers:
                disclaimer_headers = medical_disclaimer_system.get_disclaimer_headers(applicable_disclaimers)
                
                # Se response √© um tuple (response, status_code), extrair o response
                if isinstance(response, tuple):
                    response_data, status_code = response[0], response[1]
                else:
                    response_data, status_code = response, 200
                
                # Adicionar headers se √© uma resposta Flask
                if hasattr(response_data, 'headers'):
                    for header, value in disclaimer_headers.items():
                        response_data.headers[header] = value
            
            return response
        
        wrapper.__name__ = f.__name__
        return wrapper
    return decorator

# Fun√ß√µes de conveni√™ncia
def get_medical_disclaimers(request_context: Dict[str, Any]) -> List[MedicalDisclaimer]:
    """Obt√©m disclaimers m√©dicos para contexto"""
    return medical_disclaimer_system.get_applicable_disclaimers(request_context)

def record_disclaimer_acknowledgment(user_id: str, disclaimer_type: str) -> bool:
    """Registra acknowledgment de disclaimer"""
    try:
        dt = DisclaimerType(disclaimer_type)
        return medical_disclaimer_system.record_acknowledgment(user_id, dt)
    except ValueError:
        return False

def get_disclaimer_stats() -> Dict[str, Any]:
    """Retorna estat√≠sticas de disclaimers"""
    return medical_disclaimer_system.get_disclaimer_stats()

__all__ = [
    'MedicalDisclaimerSystem',
    'DisclaimerType',
    'ConsultationContext',
    'medical_disclaimer_system',
    'add_medical_disclaimers',
    'get_medical_disclaimers',
    'record_disclaimer_acknowledgment',
    'get_disclaimer_stats'
]