/**
 * Analytics & Tracking Validation Suite
 * Testa m√©tricas, logging e tracking para melhoria cont√≠nua
 */

import { useIntelligentRouting } from '@/hooks/useIntelligentRouting';
import { analyzeQuestionRouting } from '@/services/intelligentRouting';
import { renderHook, act, waitFor } from '@testing-library/react';
import type { Persona } from '@/services/api';

// Mock personas para testes
const mockPersonas: Record<string, Persona> = {
  dr_gasnelio: {
    name: 'Dr. Gasnelio',
    description: 'Especialista cl√≠nico',
    avatar: 'üë®‚Äç‚öïÔ∏è',
    personality: 'T√©cnico',
    expertise: ['clinical', 'dosage'],
    response_style: 'Technical',
    target_audience: 'Professionals',
    system_prompt: 'Clinical',
    capabilities: ['diagn√≥stico'],
    example_questions: ['Dose?'],
    limitations: ['N√£o faz diagn√≥sticos definitivos'],
    response_format: {}
  },
  ga: {
    name: 'G√°',
    description: 'Especialista educacional',
    avatar: 'üë©‚Äçüéì',
    personality: 'Emp√°tica',
    expertise: ['education'],
    response_style: 'Educational',
    target_audience: 'Patients',
    system_prompt: 'Educational',
    capabilities: ['educa√ß√£o'],
    example_questions: ['Como explicar?'],
    limitations: ['N√£o substitui consulta m√©dica'],
    response_format: {}
  }
};

// Mock do console para capturar logs
const originalConsoleLog = console.log;
const originalConsoleError = console.error;
const originalConsoleWarn = console.warn;

let capturedLogs: Array<{ level: string; message: string; timestamp: number }> = [];

function startLogCapture() {
  capturedLogs = [];
  
  console.log = (...args: unknown[]) => {
    capturedLogs.push({
      level: 'log',
      message: args.join(' '),
      timestamp: Date.now()
    });
    originalConsoleLog(...args);
  };
  
  console.error = (...args: unknown[]) => {
    capturedLogs.push({
      level: 'error',
      message: args.join(' '),
      timestamp: Date.now()
    });
    originalConsoleError(...args);
  };
  
  console.warn = (...args: unknown[]) => {
    capturedLogs.push({
      level: 'warn',
      message: args.join(' '),
      timestamp: Date.now()
    });
    originalConsoleWarn(...args);
  };
}

function stopLogCapture() {
  console.log = originalConsoleLog;
  console.error = originalConsoleError;
  console.warn = originalConsoleWarn;
}

function getLogsByPattern(pattern: string) {
  return capturedLogs.filter(log => 
    log.message.toLowerCase().includes(pattern.toLowerCase())
  );
}

/**
 * Valida tracking de m√©tricas de uso
 */
export async function validateUsageMetrics(): Promise<{
  passed: boolean;
  results: {
    recommendationAcceptance: boolean;
    recommendationRejection: boolean;
    analysisCount: boolean;
    confidenceTracking: boolean;
    scopeDistribution: boolean;
    personaPreferences: boolean;
  };
}> {
  console.log('\nüìä VALIDANDO M√âTRICAS DE USO');
  console.log('=' .repeat(30));

  const results = {
    recommendationAcceptance: false,
    recommendationRejection: false,
    analysisCount: false,
    confidenceTracking: false,
    scopeDistribution: false,
    personaPreferences: false
  };

  try {
    startLogCapture();

    const { result } = renderHook(() => 
      useIntelligentRouting(mockPersonas, { enabled: true })
    );

    // Teste 1: Recommendation Acceptance Tracking
    console.log('üìù Teste 1: Recommendation Acceptance Tracking');
    
    // Simular an√°lise e aceita√ß√£o
    act(() => {
      result.current.analyzeQuestion('Qual a dose de rifampicina?');
    });

    await waitFor(() => {
      return result.current.currentAnalysis !== null;
    }, { timeout: 2000 });

    const initialAnalytics = result.current.getAnalytics();
    
    act(() => {
      result.current.acceptRecommendation();
    });

    const analyticsAfterAccept = result.current.getAnalytics();
    const acceptanceTracked = analyticsAfterAccept.acceptedRecommendations > initialAnalytics.acceptedRecommendations;
    
    // Verificar logs de aceita√ß√£o
    const acceptanceLogs = getLogsByPattern('recommendation accepted');
    const logsCapturingAcceptance = acceptanceLogs.length > 0;
    
    results.recommendationAcceptance = acceptanceTracked && logsCapturingAcceptance;
    
    console.log(`   Analytics incrementado: ${acceptanceTracked ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Logs capturados: ${logsCapturingAcceptance ? '‚úÖ' : '‚ùå'}`);

    // Teste 2: Recommendation Rejection Tracking
    console.log('\nüìù Teste 2: Recommendation Rejection Tracking');
    
    // Nova an√°lise para rejeitar
    act(() => {
      result.current.analyzeQuestion('Como educar o paciente?');
    });

    await waitFor(() => {
      return result.current.currentAnalysis !== null;
    }, { timeout: 2000 });

    const analyticsBeforeReject = result.current.getAnalytics();
    
    act(() => {
      result.current.rejectRecommendation('ga');
    });

    const analyticsAfterReject = result.current.getAnalytics();
    const rejectionTracked = analyticsAfterReject.rejectedRecommendations > analyticsBeforeReject.rejectedRecommendations;
    
    // Verificar logs de rejei√ß√£o
    const rejectionLogs = getLogsByPattern('recommendation rejected');
    const logsCapturingRejection = rejectionLogs.length > 0;
    
    results.recommendationRejection = rejectionTracked && logsCapturingRejection;
    
    console.log(`   Analytics incrementado: ${rejectionTracked ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Logs capturados: ${logsCapturingRejection ? '‚úÖ' : '‚ùå'}`);

    // Teste 3: Analysis Count Tracking
    console.log('\nüìù Teste 3: Analysis Count Tracking');
    
    const finalAnalytics = result.current.getAnalytics();
    const analysisCountCorrect = finalAnalytics.totalAnalyses >= 2; // Pelo menos 2 an√°lises
    
    results.analysisCount = analysisCountCorrect;
    console.log(`   Contagem de an√°lises: ${finalAnalytics.totalAnalyses} ${analysisCountCorrect ? '‚úÖ' : '‚ùå'}`);

    // Teste 4: Confidence Tracking
    console.log('\nüìù Teste 4: Confidence Tracking');
    
    // Verificar se logs incluem informa√ß√µes de confian√ßa
    const confidenceLogs = capturedLogs.filter(log => 
      log.message.includes('confidence') && /\d+\.?\d*/.test(log.message)
    );
    
    results.confidenceTracking = confidenceLogs.length > 0;
    console.log(`   Confian√ßa nos logs: ${confidenceLogs.length} logs ${results.confidenceTracking ? '‚úÖ' : '‚ùå'}`);

    // Teste 5: Scope Distribution
    console.log('\nüìù Teste 5: Scope Distribution');
    
    // Verificar se logs incluem informa√ß√µes de escopo
    const scopeLogs = capturedLogs.filter(log => 
      log.message.includes('scope') || 
      log.message.includes('dosage') || 
      log.message.includes('education') ||
      log.message.includes('clinical')
    );
    
    results.scopeDistribution = scopeLogs.length > 0;
    console.log(`   Escopo nos logs: ${scopeLogs.length} logs ${results.scopeDistribution ? '‚úÖ' : '‚ùå'}`);

    // Teste 6: Persona Preferences
    console.log('\nüìù Teste 6: Persona Preferences');
    
    // Verificar se logs incluem informa√ß√µes sobre personas escolhidas
    const personaLogs = capturedLogs.filter(log => 
      log.message.includes('dr_gasnelio') || 
      log.message.includes('ga') ||
      log.message.includes('persona')
    );
    
    results.personaPreferences = personaLogs.length > 0;
    console.log(`   Personas nos logs: ${personaLogs.length} logs ${results.personaPreferences ? '‚úÖ' : '‚ùå'}`);

    stopLogCapture();

  } catch (error) {
    console.log(`üí• ERRO na valida√ß√£o de m√©tricas: ${error.message}`);
    stopLogCapture();
  }

  const passed = results.recommendationAcceptance && 
                results.recommendationRejection && 
                results.analysisCount;
  // confidenceTracking, scopeDistribution, personaPreferences s√£o desej√°veis mas n√£o cr√≠ticos

  console.log(`\nüìä Usage Metrics Validation: ${passed ? '‚úÖ PASSOU' : '‚ùå FALHOU'}`);

  return { passed, results };
}

/**
 * Valida qualidade dos logs para debugging
 */
export async function validateLoggingQuality(): Promise<{
  passed: boolean;
  results: {
    errorLogging: boolean;
    performanceLogging: boolean;
    debugInformation: boolean;
    logStructure: boolean;
    logLevels: boolean;
    sensitiveDataProtection: boolean;
  };
}> {
  console.log('\nüìù VALIDANDO QUALIDADE DOS LOGS');
  console.log('=' .repeat(35));

  const results = {
    errorLogging: false,
    performanceLogging: false,
    debugInformation: false,
    logStructure: false,
    logLevels: false,
    sensitiveDataProtection: false
  };

  try {
    startLogCapture();

    // Teste 1: Error Logging
    console.log('üìù Teste 1: Error Logging');
    
    // For√ßar erro para testar logging
    try {
      await analyzeQuestionRouting('test', {});
    } catch (error) {
      // Esperamos que falhe com personas vazias
    }
    
    const errorLogs = capturedLogs.filter(log => 
      log.level === 'error' || log.message.toLowerCase().includes('erro')
    );
    
    results.errorLogging = errorLogs.length > 0;
    console.log(`   Erros logados: ${errorLogs.length} logs ${results.errorLogging ? '‚úÖ' : '‚ùå'}`);

    // Teste 2: Performance Logging
    console.log('\nüìù Teste 2: Performance Logging');
    
    // Executar an√°lise normal para capturar logs de performance
    await analyzeQuestionRouting('Qual a dose de rifampicina?', mockPersonas);
    
    const performanceLogs = capturedLogs.filter(log => 
      log.message.includes('ms') || 
      log.message.includes('performance') ||
      log.message.includes('time') ||
      log.message.includes('cache')
    );
    
    results.performanceLogging = performanceLogs.length > 0;
    console.log(`   Performance logada: ${performanceLogs.length} logs ${results.performanceLogging ? '‚úÖ' : '‚ùå'}`);

    // Teste 3: Debug Information
    console.log('\nüìù Teste 3: Debug Information');
    
    const debugLogs = capturedLogs.filter(log => 
      log.message.includes('debug') || 
      log.message.includes('analysis:') ||
      log.message.includes('routing:') ||
      log.message.includes('cache:')
    );
    
    results.debugInformation = debugLogs.length > 0;
    console.log(`   Debug info presente: ${debugLogs.length} logs ${results.debugInformation ? '‚úÖ' : '‚ùå'}`);

    // Teste 4: Log Structure
    console.log('\nüìù Teste 4: Log Structure');
    
    // Verificar se logs t√™m estrutura consistente
    let structuredLogs = 0;
    
    capturedLogs.forEach(log => {
      // Logs estruturados devem ter timestamp, level e informa√ß√µes organizadas
      if (log.timestamp && log.level && log.message.includes(':')) {
        structuredLogs++;
      }
    });
    
    const structurePercentage = capturedLogs.length > 0 ? (structuredLogs / capturedLogs.length) * 100 : 0;
    results.logStructure = structurePercentage > 50; // Pelo menos 50% estruturados
    
    console.log(`   Logs estruturados: ${structurePercentage.toFixed(1)}% ${results.logStructure ? '‚úÖ' : '‚ùå'}`);

    // Teste 5: Log Levels
    console.log('\nüìù Teste 5: Log Levels');
    
    const hasLogLevels = capturedLogs.some(log => log.level === 'log') &&
                        capturedLogs.some(log => log.level === 'error') &&
                        capturedLogs.some(log => log.level === 'warn');
    
    results.logLevels = hasLogLevels;
    console.log(`   M√∫ltiplos n√≠veis de log: ${hasLogLevels ? '‚úÖ' : '‚ùå'}`);
    console.log(`     Logs: ${capturedLogs.filter(l => l.level === 'log').length}`);
    console.log(`     Errors: ${capturedLogs.filter(l => l.level === 'error').length}`);
    console.log(`     Warns: ${capturedLogs.filter(l => l.level === 'warn').length}`);

    // Teste 6: Sensitive Data Protection
    console.log('\nüìù Teste 6: Sensitive Data Protection');
    
    // Verificar se n√£o h√° dados sens√≠veis nos logs
    const sensitivePatterns = [
      /password/i,
      /token/i,
      /secret/i,
      /api[_-]?key/i,
      /authorization/i,
      /bearer/i
    ];
    
    let hasSensitiveData = false;
    
    capturedLogs.forEach(log => {
      sensitivePatterns.forEach(pattern => {
        if (pattern.test(log.message)) {
          hasSensitiveData = true;
        }
      });
    });
    
    results.sensitiveDataProtection = !hasSensitiveData;
    console.log(`   Dados sens√≠veis protegidos: ${results.sensitiveDataProtection ? '‚úÖ' : '‚ùå'}`);

    stopLogCapture();

  } catch (error) {
    console.log(`üí• ERRO na valida√ß√£o de logs: ${error.message}`);
    stopLogCapture();
  }

  const passed = results.errorLogging && 
                results.logStructure && 
                results.sensitiveDataProtection;

  console.log(`\nüìä Logging Quality Validation: ${passed ? '‚úÖ PASSOU' : '‚ùå FALHOU'}`);

  return { passed, results };
}

/**
 * Valida m√©tricas para melhoria cont√≠nua
 */
export async function validateContinuousImprovement(): Promise<{
  passed: boolean;
  results: {
    accuracyMetrics: boolean;
    userSatisfaction: boolean;
    performanceTrends: boolean;
    errorPatterns: boolean;
    usagePatterns: boolean;
    improvementOpportunities: boolean;
  };
}> {
  console.log('\nüîÑ VALIDANDO M√âTRICAS PARA MELHORIA CONT√çNUA');
  console.log('=' .repeat(45));

  const results = {
    accuracyMetrics: false,
    userSatisfaction: false,
    performanceTrends: false,
    errorPatterns: false,
    usagePatterns: false,
    improvementOpportunities: false
  };

  try {
    startLogCapture();

    const { result } = renderHook(() => 
      useIntelligentRouting(mockPersonas, { enabled: true })
    );

    // Simular sess√£o de uso diversificada
    const testScenarios = [
      { question: 'Qual a dose de rifampicina?', expectedPersona: 'dr_gasnelio', userChoice: 'dr_gasnelio' },
      { question: 'Como educar o paciente?', expectedPersona: 'ga', userChoice: 'ga' },
      { question: 'Protocolo para MB?', expectedPersona: 'dr_gasnelio', userChoice: 'dr_gasnelio' },
      { question: 'Como explicar para fam√≠lia?', expectedPersona: 'ga', userChoice: 'dr_gasnelio' }, // Discord√¢ncia
      { question: 'Dispensa√ß√£o na farm√°cia?', expectedPersona: 'ga', userChoice: 'ga' }
    ];

    // Teste 1: Accuracy Metrics
    console.log('üìù Teste 1: Accuracy Metrics');
    
    let correctRecommendations = 0;
    let totalRecommendations = 0;
    
    for (const scenario of testScenarios) {
      act(() => {
        result.current.analyzeQuestion(scenario.question);
      });

      await waitFor(() => {
        return result.current.currentAnalysis !== null;
      }, { timeout: 2000 });

      const analysis = result.current.currentAnalysis;
      if (analysis) {
        totalRecommendations++;
        if (analysis.recommendedPersonaId === scenario.expectedPersona) {
          correctRecommendations++;
        }
        
        // Simular escolha do usu√°rio
        if (scenario.userChoice === analysis.recommendedPersonaId) {
          act(() => {
            result.current.acceptRecommendation();
          });
        } else {
          act(() => {
            result.current.rejectRecommendation(scenario.userChoice);
          });
        }
      }
    }

    const accuracy = totalRecommendations > 0 ? (correctRecommendations / totalRecommendations) * 100 : 0;
    results.accuracyMetrics = accuracy > 60; // Pelo menos 60% de precis√£o
    
    console.log(`   Precis√£o do algoritmo: ${accuracy.toFixed(1)}% ${results.accuracyMetrics ? '‚úÖ' : '‚ùå'}`);

    // Teste 2: User Satisfaction (baseado em aceita√ß√£o)
    console.log('\nüìù Teste 2: User Satisfaction');
    
    const analytics = result.current.getAnalytics();
    const acceptanceRate = analytics.acceptanceRate;
    
    results.userSatisfaction = acceptanceRate > 50; // Pelo menos 50% de aceita√ß√£o
    console.log(`   Taxa de aceita√ß√£o: ${acceptanceRate}% ${results.userSatisfaction ? '‚úÖ' : '‚ùå'}`);

    // Teste 3: Performance Trends
    console.log('\nüìù Teste 3: Performance Trends');
    
    const performanceLogs = capturedLogs.filter(log => 
      log.message.includes('ms') || log.message.includes('time')
    );
    
    results.performanceTrends = performanceLogs.length > 0;
    console.log(`   Dados de performance coletados: ${performanceLogs.length} logs ${results.performanceTrends ? '‚úÖ' : '‚ùå'}`);

    // Teste 4: Error Patterns
    console.log('\nüìù Teste 4: Error Patterns');
    
    const errorLogs = capturedLogs.filter(log => 
      log.level === 'error' || log.message.toLowerCase().includes('erro')
    );
    
    // Verificar se erros s√£o categorizados
    const categorizedErrors = errorLogs.filter(log => 
      log.message.includes('Network') || 
      log.message.includes('Validation') ||
      log.message.includes('Backend')
    );
    
    results.errorPatterns = categorizedErrors.length >= errorLogs.length * 0.5; // 50% categorizados
    console.log(`   Erros categorizados: ${categorizedErrors.length}/${errorLogs.length} ${results.errorPatterns ? '‚úÖ' : '‚ùå'}`);

    // Teste 5: Usage Patterns
    console.log('\nüìù Teste 5: Usage Patterns');
    
    // Verificar se h√° dados sobre padr√µes de uso
    const usageLogs = capturedLogs.filter(log => 
      log.message.includes('scope') || 
      log.message.includes('confidence') ||
      log.message.includes('persona')
    );
    
    results.usagePatterns = usageLogs.length > 0;
    console.log(`   Padr√µes de uso capturados: ${usageLogs.length} logs ${results.usagePatterns ? '‚úÖ' : '‚ùå'}`);

    // Teste 6: Improvement Opportunities
    console.log('\nüìù Teste 6: Improvement Opportunities');
    
    // Identificar oportunidades baseadas nos logs
    const rejectionLogs = getLogsByPattern('rejected');
    const lowConfidenceLogs = capturedLogs.filter(log => 
      log.message.includes('confidence') && 
      (log.message.includes('0.') && parseFloat(log.message.match(/0\.\d+/)?.[0] || '1') < 0.6)
    );
    
    const hasImprovementData = rejectionLogs.length > 0 || lowConfidenceLogs.length > 0;
    results.improvementOpportunities = hasImprovementData;
    
    console.log(`   Rejei√ß√µes para an√°lise: ${rejectionLogs.length}`);
    console.log(`   Baixa confian√ßa: ${lowConfidenceLogs.length}`);
    console.log(`   Oportunidades identificadas: ${hasImprovementData ? '‚úÖ' : '‚ùå'}`);

    stopLogCapture();

  } catch (error) {
    console.log(`üí• ERRO na valida√ß√£o de melhoria cont√≠nua: ${error.message}`);
    stopLogCapture();
  }

  const passed = results.accuracyMetrics && 
                results.userSatisfaction && 
                results.usagePatterns;

  console.log(`\nüìä Continuous Improvement Validation: ${passed ? '‚úÖ PASSOU' : '‚ùå FALHOU'}`);

  return { passed, results };
}

/**
 * Executa valida√ß√£o completa de analytics
 */
export async function runAnalyticsValidation() {
  console.log('üöÄ INICIANDO VALIDA√á√ÉO DE ANALYTICS & TRACKING');
  console.log('üïí ' + new Date().toLocaleString());
  console.log('='.repeat(55));

  const results = {
    usageMetrics: await validateUsageMetrics(),
    loggingQuality: await validateLoggingQuality(),
    continuousImprovement: await validateContinuousImprovement()
  };

  // Sum√°rio final
  console.log('\n' + '='.repeat(55));
  console.log('üìã SUM√ÅRIO DA VALIDA√á√ÉO DE ANALYTICS');
  console.log('='.repeat(55));
  
  console.log(`${results.usageMetrics.passed ? '‚úÖ' : '‚ùå'} Usage Metrics: ${results.usageMetrics.passed ? 'FUNCIONANDO' : 'PROBLEMAS'}`);
  console.log(`${results.loggingQuality.passed ? '‚úÖ' : '‚ùå'} Logging Quality: ${results.loggingQuality.passed ? 'ADEQUADA' : 'MELHORIAS NECESS√ÅRIAS'}`);
  console.log(`${results.continuousImprovement.passed ? '‚úÖ' : '‚ùå'} Continuous Improvement: ${results.continuousImprovement.passed ? 'HABILITADA' : 'INSUFICIENTE'}`);

  const overallSuccess = results.usageMetrics.passed && 
                        results.loggingQuality.passed && 
                        results.continuousImprovement.passed;

  console.log('\nüéØ RESULTADO GERAL: ' + (overallSuccess ? '‚úÖ ANALYTICS APROVADO' : '‚ùå ANALYTICS REQUER MELHORIAS'));

  // Recomenda√ß√µes espec√≠ficas
  if (!overallSuccess) {
    console.log('\nüìà RECOMENDA√á√ïES PARA ANALYTICS:');
    
    if (!results.usageMetrics.passed) {
      console.log('   ‚Ä¢ Implementar tracking mais robusto de aceita√ß√£o/rejei√ß√£o');
      console.log('   ‚Ä¢ Adicionar m√©tricas de confian√ßa e escopo');
      console.log('   ‚Ä¢ Melhorar logs de intera√ß√£o do usu√°rio');
    }
    
    if (!results.loggingQuality.passed) {
      console.log('   ‚Ä¢ Estruturar logs de forma mais consistente');
      console.log('   ‚Ä¢ Implementar diferentes n√≠veis de log');
      console.log('   ‚Ä¢ Adicionar prote√ß√£o para dados sens√≠veis');
      console.log('   ‚Ä¢ Melhorar logs de erro e performance');
    }
    
    if (!results.continuousImprovement.passed) {
      console.log('   ‚Ä¢ Implementar m√©tricas de precis√£o do algoritmo');
      console.log('   ‚Ä¢ Adicionar tracking de satisfa√ß√£o do usu√°rio');
      console.log('   ‚Ä¢ Coletar dados para identificar padr√µes de melhoria');
      console.log('   ‚Ä¢ Implementar dashboards de analytics');
    }
  } else {
    console.log('\n‚ú® PONTOS FORTES DO SISTEMA DE ANALYTICS:');
    console.log('   ‚Ä¢ Tracking abrangente de intera√ß√µes do usu√°rio');
    console.log('   ‚Ä¢ Logs estruturados para debugging eficiente');
    console.log('   ‚Ä¢ M√©tricas adequadas para melhoria cont√≠nua');
    console.log('   ‚Ä¢ Prote√ß√£o de dados sens√≠veis implementada');
  }

  return results;
}