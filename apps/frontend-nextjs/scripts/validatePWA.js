/**
 * Script de valida√ß√£o PWA
 * Verifica se todos os requisitos PWA est√£o atendidos
 */

const fs = require('fs');
const path = require('path');

const publicDir = path.join(__dirname, '..', 'public');
const manifestPath = path.join(publicDir, 'manifest.json');

// Lista de √≠cones obrigat√≥rios
const requiredIcons = [
  'icon-72.png',
  'icon-96.png', 
  'icon-128.png',
  'icon-144.png',
  'icon-152.png',
  'icon-192.png',
  'icon-384.png',
  'icon-512.png',
  'icon-192-maskable.png',
  'icon-512-maskable.png',
  'favicon.png',
  'favicon.ico',
  'apple-touch-icon.png'
];

// Requisitos PWA
const pwaRequirements = [
  'manifest.json',
  'sw.js'
];

function validateIcons() {
  console.log('üîç Validando √≠cones PWA...\n');
  
  let allIconsPresent = true;
  
  for (const icon of requiredIcons) {
    const iconPath = path.join(publicDir, icon);
    if (fs.existsSync(iconPath)) {
      const stats = fs.statSync(iconPath);
      console.log(`‚úÖ ${icon} - ${Math.round(stats.size / 1024)}KB`);
    } else {
      console.log(`‚ùå ${icon} - AUSENTE`);
      allIconsPresent = false;
    }
  }
  
  return allIconsPresent;
}

function validateManifest() {
  console.log('\nüîç Validando manifest.json...\n');
  
  if (!fs.existsSync(manifestPath)) {
    console.log('‚ùå manifest.json n√£o encontrado');
    return false;
  }
  
  try {
    const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
    
    // Campos obrigat√≥rios
    const requiredFields = ['name', 'short_name', 'start_url', 'display', 'icons'];
    let validManifest = true;
    
    for (const field of requiredFields) {
      if (manifest[field]) {
        console.log(`‚úÖ ${field}: ${typeof manifest[field] === 'object' ? 'configurado' : manifest[field]}`);
      } else {
        console.log(`‚ùå ${field}: ausente`);
        validManifest = false;
      }
    }
    
    // Validar √≠cones no manifest
    console.log(`\nüì± √çcones no manifest: ${manifest.icons?.length || 0}`);
    
    if (manifest.icons) {
      for (const icon of manifest.icons) {
        const iconExists = fs.existsSync(path.join(publicDir, icon.src.replace('/', '')));
        const status = iconExists ? '‚úÖ' : '‚ùå';
        console.log(`${status} ${icon.src} (${icon.sizes}) - ${icon.purpose || 'any'}`);
      }
    }
    
    // Validar shortcuts
    if (manifest.shortcuts) {
      console.log(`\nüîó Shortcuts: ${manifest.shortcuts.length}`);
      for (const shortcut of manifest.shortcuts) {
        console.log(`‚úÖ ${shortcut.name} ‚Üí ${shortcut.url}`);
      }
    }
    
    return validManifest;
    
  } catch (error) {
    console.log(`‚ùå Erro ao ler manifest.json: ${error.message}`);
    return false;
  }
}

function validateServiceWorker() {
  console.log('\nüîç Validando Service Worker...\n');
  
  const swPath = path.join(publicDir, 'sw.js');
  
  if (fs.existsSync(swPath)) {
    const swContent = fs.readFileSync(swPath, 'utf8');
    const swSize = Math.round(fs.statSync(swPath).size / 1024);
    
    console.log(`‚úÖ sw.js presente - ${swSize}KB`);
    
    // Verificar funcionalidades b√°sicas
    const features = [
      { name: 'install event', pattern: /addEventListener\(['"`]install['"`]/ },
      { name: 'activate event', pattern: /addEventListener\(['"`]activate['"`]/ },
      { name: 'fetch event', pattern: /addEventListener\(['"`]fetch['"`]/ },
      { name: 'cache management', pattern: /caches\.(open|match|keys)/ },
    ];
    
    for (const feature of features) {
      if (feature.pattern.test(swContent)) {
        console.log(`‚úÖ ${feature.name}`);
      } else {
        console.log(`‚ö†Ô∏è ${feature.name} - n√£o detectado`);
      }
    }
    
    return true;
  } else {
    console.log('‚ùå sw.js n√£o encontrado');
    return false;
  }
}

function generateReport() {
  console.log('\nüìä Gerando relat√≥rio PWA...\n');
  
  const iconsValid = validateIcons();
  const manifestValid = validateManifest();
  const swValid = validateServiceWorker();
  
  const score = [iconsValid, manifestValid, swValid].filter(Boolean).length;
  const totalChecks = 3;
  const percentage = Math.round((score / totalChecks) * 100);
  
  console.log('\n' + '='.repeat(50));
  console.log('üìã RELAT√ìRIO FINAL PWA');
  console.log('='.repeat(50));
  console.log(`√çcones: ${iconsValid ? '‚úÖ V√ÅLIDO' : '‚ùå INV√ÅLIDO'}`);
  console.log(`Manifest: ${manifestValid ? '‚úÖ V√ÅLIDO' : '‚ùå INV√ÅLIDO'}`);
  console.log(`Service Worker: ${swValid ? '‚úÖ V√ÅLIDO' : '‚ùå INV√ÅLIDO'}`);
  console.log('='.repeat(50));
  console.log(`SCORE PWA: ${score}/${totalChecks} (${percentage}%)`);
  
  if (percentage === 100) {
    console.log('üéâ PWA PRONTO PARA PRODU√á√ÉO!');
    console.log('\nüöÄ Pr√≥ximos passos:');
    console.log('1. Teste em dispositivos m√≥veis');
    console.log('2. Execute Lighthouse PWA audit');
    console.log('3. Valide instala√ß√£o em Chrome/Edge/Safari');
    console.log('4. Configure vari√°veis de ambiente');
  } else {
    console.log('‚ö†Ô∏è PWA precisa de ajustes antes da produ√ß√£o');
  }
  
  console.log('='.repeat(50));
}

// Executar valida√ß√£o
if (require.main === module) {
  console.log('üîç VALIDA√á√ÉO PWA - ROTEIROS DE DISPENSA√á√ÉO\n');
  generateReport();
}

module.exports = { validateIcons, validateManifest, validateServiceWorker };