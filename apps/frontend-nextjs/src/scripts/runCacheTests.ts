/**
 * Script para executar testes de performance do cache
 * Pode ser executado via npm run test:cache ou diretamente
 */

import CachePerformanceTest from '../tests/cachePerformanceTest';

async function runCachePerformanceTests() {
  console.log('üéØ Executando testes de performance do cache h√≠brido...\n');

  try {
    const tester = new CachePerformanceTest();
    
    // Executar testes completos
    const metrics = await tester.runCompletePerformanceTest();
    
    // Gerar relat√≥rio
    const report = tester.generateDetailedReport(metrics);
    
    console.log('\n' + '='.repeat(80));
    console.log('üìã RELAT√ìRIO DE PERFORMANCE');
    console.log('='.repeat(80));
    console.log(report);
    
    // Salvar relat√≥rio em arquivo (se em ambiente Node.js)
    if (typeof process !== 'undefined') {
      const fs = require('fs');
      const path = require('path');
      
      const reportPath = path.join(process.cwd(), 'cache-performance-report.md');
      fs.writeFileSync(reportPath, report);
      console.log(`\nüíæ Relat√≥rio salvo em: ${reportPath}`);
    }
    
    // Determinar se os testes passaram
    if (metrics.summary.overallScore >= 70) {
      console.log('\n‚úÖ TESTES DE PERFORMANCE: APROVADOS');
      console.log(`Score final: ${metrics.summary.overallScore}/100`);
      process.exit(0);
    } else {
      console.log('\n‚ùå TESTES DE PERFORMANCE: REPROVADOS');
      console.log(`Score final: ${metrics.summary.overallScore}/100 (m√≠nimo: 70)`);
      process.exit(1);
    }
    
  } catch (error) {
    console.error('üí• Erro cr√≠tico durante testes de performance:', error);
    process.exit(1);
  }
}

// Auto-executar se for chamado diretamente
if (typeof process !== 'undefined' && require.main === module) {
  runCachePerformanceTests();
}

export default runCachePerformanceTests;